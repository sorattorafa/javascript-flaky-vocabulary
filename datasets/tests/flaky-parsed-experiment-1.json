[
  {
    "URL": "https://github.com/oliviertassinari/material-ui/blob/f75bd499b1ac1a31ee9625692f249ff279821b00/packages/material-ui-lab/src/SpeedDial/SpeedDial.test.js",
    "commit": "f75bd499b1ac1a31ee9625692f249ff279821b00",
    "project_name": "material-ui",
    "project_author": "mui-org",
    "flaky_file": "/packages/material-ui-lab/src/SpeedDial/SpeedDial.test.js",
    "start_line": 74,
    "end_line": 83,
    "test_code": "it('should render with a null child', () => {\n  const wrapper = mount(\n    <SpeedDial {...defaultProps} icon={icon}>\n      <SpeedDialAction icon={icon} tooltipTitle=\"One\" />\n      {null}\n      <SpeedDialAction icon={icon} tooltipTitle=\"Three\" />\n    </SpeedDial>,\n  );\n  assert.strictEqual(wrapper.find(SpeedDialAction).length, 2);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should render with a null child'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "SpeedDial",
        "type": "JSXIdentifier"
      },
      {
        "value": "defaultProps",
        "type": "Identifier"
      },
      {
        "value": "icon",
        "type": "JSXIdentifier"
      },
      {
        "value": "icon",
        "type": "Identifier"
      },
      {
        "value": "\n      ",
        "type": "JSXText"
      },
      {
        "value": "SpeedDialAction",
        "type": "JSXIdentifier"
      },
      {
        "value": "icon",
        "type": "JSXIdentifier"
      },
      {
        "value": "icon",
        "type": "Identifier"
      },
      {
        "value": "tooltipTitle",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"One\"",
        "type": "JSXText"
      },
      {
        "value": "\n      ",
        "type": "JSXText"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "\n      ",
        "type": "JSXText"
      },
      {
        "value": "SpeedDialAction",
        "type": "JSXIdentifier"
      },
      {
        "value": "icon",
        "type": "JSXIdentifier"
      },
      {
        "value": "icon",
        "type": "Identifier"
      },
      {
        "value": "tooltipTitle",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"Three\"",
        "type": "JSXText"
      },
      {
        "value": "\n    ",
        "type": "JSXText"
      },
      {
        "value": "SpeedDial",
        "type": "JSXIdentifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "strictEqual",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "SpeedDialAction",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/oliviertassinari/material-ui/blob/f75bd499b1ac1a31ee9625692f249ff279821b00/packages/material-ui-lab/src/SpeedDial/SpeedDial.test.js",
    "commit": "f75bd499b1ac1a31ee9625692f249ff279821b00",
    "project_name": "material-ui",
    "project_author": "mui-org",
    "flaky_file": "/packages/material-ui-lab/src/SpeedDial/SpeedDial.test.js",
    "start_line": 339,
    "end_line": 410,
    "test_code": "describe('actions navigation', function () {\n  this.timeout(5000); // This tests are really slow.\n\n  \n  /**\n   * tests a combination of arrow keys on a focused SpeedDial\n   */\n  const testCombination = async (\n    dialDirection,\n    [firstKey, ...combination],\n    [firstFocusedAction, ...foci],\n  ) => {\n    resetDialToOpen(dialDirection);\n\n    getDialButton().simulate('keydown', { keyCode: keycodes[firstKey] });\n    assert.strictEqual(\n      isActionFocused(firstFocusedAction),\n      true,\n      `focused action initial ${firstKey} should be ${firstFocusedAction}`,\n    );\n\n    combination.forEach((arrowKey, i) => {\n      const previousFocusedAction = foci[i - 1] || firstFocusedAction;\n      const expectedFocusedAction = foci[i];\n      const combinationUntilNot = [firstKey, ...combination.slice(0, i + 1)];\n\n      getActionButton(previousFocusedAction).simulate('keydown', {\n        keyCode: keycodes[arrowKey],\n      });\n      assert.strictEqual(\n        isActionFocused(expectedFocusedAction),\n        true,\n        `focused action after ${combinationUntilNot.join(\n          ',',\n        )} should be ${expectedFocusedAction}`,\n      );\n    });\n\n    /**\n     * Tooltip still fires onFocus after unmount (\"Warning: setState unmounted\").\n     * Could not fix this issue so we are using this workaround\n     */\n    await immediate();\n  };\n\n  it('considers the first arrow key press as forward navigation', async () => {\n    await testCombination('up', ['up', 'up', 'up', 'down'], [0, 1, 2, 1]);\n    await testCombination('up', ['down', 'down', 'down', 'up'], [0, 1, 2, 1]);\n\n    await testCombination('right', ['right', 'right', 'right', 'left'], [0, 1, 2, 1]);\n    await testCombination('right', ['left', 'left', 'left', 'right'], [0, 1, 2, 1]);\n\n    await testCombination('down', ['down', 'down', 'down', 'up'], [0, 1, 2, 1]);\n    await testCombination('down', ['up', 'up', 'up', 'down'], [0, 1, 2, 1]);\n\n    await testCombination('left', ['left', 'left', 'left', 'right'], [0, 1, 2, 1]);\n    await testCombination('left', ['right', 'right', 'right', 'left'], [0, 1, 2, 1]);\n  });\n\n  it('ignores array keys orthogonal to the direction', async () => {\n    await testCombination('up', ['up', 'left', 'right', 'up'], [0, 0, 0, 1]);\n    await testCombination('right', ['right', 'up', 'down', 'right'], [0, 0, 0, 1]);\n    await testCombination('down', ['down', 'left', 'right', 'down'], [0, 0, 0, 1]);\n    await testCombination('left', ['left', 'up', 'down', 'left'], [0, 0, 0, 1]);\n  });\n\n  it('does not wrap around', async () => {\n    await testCombination('up', ['up', 'down', 'down', 'up'], [0, -1, -1, 0]);\n    await testCombination('right', ['right', 'left', 'left', 'right'], [0, -1, -1, 0]);\n    await testCombination('down', ['down', 'up', 'up', 'down'], [0, -1, -1, 0]);\n    await testCombination('left', ['left', 'right', 'right', 'left'], [0, -1, -1, 0]);\n  });\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'actions navigation'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "timeout",
        "type": "Identifier"
      },
      {
        "value": "5000",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "dialDirection",
        "type": "Identifier"
      },
      {
        "value": "firstKey",
        "type": "Identifier"
      },
      {
        "value": "combination",
        "type": "Identifier"
      },
      {
        "value": "firstFocusedAction",
        "type": "Identifier"
      },
      {
        "value": "foci",
        "type": "Identifier"
      },
      {
        "value": "resetDialToOpen",
        "type": "Identifier"
      },
      {
        "value": "dialDirection",
        "type": "Identifier"
      },
      {
        "value": "getDialButton",
        "type": "Identifier"
      },
      {
        "value": "simulate",
        "type": "Identifier"
      },
      {
        "value": "'keydown'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "keycodes",
        "type": "Identifier"
      },
      {
        "value": "firstKey",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "strictEqual",
        "type": "Identifier"
      },
      {
        "value": "isActionFocused",
        "type": "Identifier"
      },
      {
        "value": "firstFocusedAction",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "`focused action initial ${",
        "type": "Template"
      },
      {
        "value": "firstKey",
        "type": "Identifier"
      },
      {
        "value": "} should be ${",
        "type": "Template"
      },
      {
        "value": "firstFocusedAction",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "combination",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "arrowKey",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "previousFocusedAction",
        "type": "Identifier"
      },
      {
        "value": "foci",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "firstFocusedAction",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "expectedFocusedAction",
        "type": "Identifier"
      },
      {
        "value": "foci",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "combinationUntilNot",
        "type": "Identifier"
      },
      {
        "value": "firstKey",
        "type": "Identifier"
      },
      {
        "value": "combination",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "getActionButton",
        "type": "Identifier"
      },
      {
        "value": "previousFocusedAction",
        "type": "Identifier"
      },
      {
        "value": "simulate",
        "type": "Identifier"
      },
      {
        "value": "'keydown'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "keycodes",
        "type": "Identifier"
      },
      {
        "value": "arrowKey",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "strictEqual",
        "type": "Identifier"
      },
      {
        "value": "isActionFocused",
        "type": "Identifier"
      },
      {
        "value": "expectedFocusedAction",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "`focused action after ${",
        "type": "Template"
      },
      {
        "value": "combinationUntilNot",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "','",
        "type": "String"
      },
      {
        "value": "} should be ${",
        "type": "Template"
      },
      {
        "value": "expectedFocusedAction",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "immediate",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'considers the first arrow key press as forward navigation'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'ignores array keys orthogonal to the direction'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'does not wrap around'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'up'",
        "type": "String"
      },
      {
        "value": "'down'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testCombination",
        "type": "Identifier"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/storyboo kjs/storybook/blob/8d135069690f5552ad62aa33c21c1662706f1cc7/lib/ui/src/components/layout/layout.stories.js",
    "commit": "8d135069690f5552ad62aa33c21c1662706f1cc7",
    "project_name": "storybook",
    "project_author": "storybookjs",
    "flaky_file": "/lib/ui/src/components/layout/layout.stories.js",
    "start_line": 8,
    "end_line": 165,
    "test_code": "import { isChromatic } from 'storybook-chromatic/isChromatic';\n\nimport { Desktop } from './desktop';\nimport { Mobile } from './mobile';\n\nimport Sidebar from '../sidebar/Sidebar';\nimport Panel from '../panel/panel';\nimport { Preview } from '../preview/preview';\n\nimport { panels } from '../panel/panel.stories';\nimport { previewProps } from '../preview/preview.stories';\n\nimport { mockDataset } from '../sidebar/treeview/treeview.mockdata';\nimport { store } from './persist';\n\nconst realNavProps = {\n  title: 'Title',\n  url: 'https://example.com',\n  stories: mockDataset.withRoot,\n  menu: [],\n};\n\nconst PlaceholderBlock = styled.div(({ color }) => ({\n  background: color || 'hotpink',\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  overflow: 'hidden',\n}));\n\nclass PlaceholderClock extends Component {\n  state = {\n    count: 1,\n  };\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      const { count } = this.state;\n      this.setState({ count: count + 1 });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    const { interval } = this;\n    clearInterval(interval);\n  }\n\n  render() {\n    const { children, color } = this.props;\n    const { count } = this.state;\n\n    return (\n      <PlaceholderBlock color={color}>\n        <h2\n          style={{\n            position: 'absolute',\n            bottom: 0,\n            right: 0,\n            color: 'rgba(0,0,0,0.2)',\n            fontSize: '150px',\n            lineHeight: '150px',\n            margin: '-20px',\n          }}\n        >\n          {count}\n        </h2>\n        {children}\n      </PlaceholderBlock>\n    );\n  }\n}\nPlaceholderClock.propTypes = {\n  children: PropTypes.node.isRequired,\n  color: PropTypes.string.isRequired,\n};\n\nconst MockNav = props => (\n  <PlaceholderClock color=\"hotpink\">\n    <pre>{JSON.stringify(props, null, 2)}</pre>\n  </PlaceholderClock>\n);\nconst MockPreview = props => (\n  <PlaceholderClock color=\"deepskyblue\">\n    <pre>{JSON.stringify(props, null, 2)}</pre>\n  </PlaceholderClock>\n);\nconst MockPanel = props => (\n  <PlaceholderClock color=\"orangered\">\n    <pre>{JSON.stringify(props, null, 2)}</pre>\n  </PlaceholderClock>\n);\nconst MockPage = props => (\n  <PlaceholderClock color=\"cyan\">\n    <pre>{JSON.stringify(props, null, 2)}</pre>\n  </PlaceholderClock>\n);\n\nconst mockProps = {\n  Nav: MockNav,\n  Preview: MockPreview,\n  Panel: MockPanel,\n  Notifications: () => null,\n  pages: [],\n  options: { isFullscreen: false, showNav: true, showPanel: true, panelPosition: 'right' },\n  path: '/story/UI-DesktopLayout-noNav',\n  viewMode: 'story',\n  storyId: 'UI-DesktopLayout-noNav',\n  panelCount: 2,\n};\n\nconst realProps = {\n  Nav: () => <Sidebar {...realNavProps} />,\n  Preview: () => <Preview {...previewProps} />,\n  Notifications: () => null,\n  Panel: () => (\n    <Panel\n      panels={panels}\n      actions={{ onSelect: () => { }, toggleVisibility: () => { }, togglePosition: () => { } }}\n      selectedPanel=\"test2\"\n    />\n  ),\n  pages: [],\n  options: { isFullscreen: false, showNav: true, showPanel: true, panelPosition: 'right' },\n  path: '/story/UI-DesktopLayout-noNav',\n  viewMode: 'story',\n  storyId: 'UI-DesktopLayout-noNav',\n  panelCount: 2,\n};\n\nstoriesOf('UI|Layout/Desktop', module)\n  .addParameters({\n    component: Desktop,\n  })\n  .addDecorator(withKnobs)\n  .addDecorator(storyFn => {\n    const mocked = boolean('mock', true);\n    const height = number('height', 1200);\n    const width = number('width', 1200);\n\n    if (isChromatic) {\n      store.local.set(`storybook-layout`, {});\n    }\n\n    const props = {\n      height,\n      width,\n      ...(mocked ? mockProps : realProps),\n    };\n\n    return <div style={{ minHeight: 1200, minWidth: 1200 }}>{storyFn({ props })}</div>;\n  })\n",
    "tokens": [
      {
        "value": "import",
        "type": "Keyword"
      },
      {
        "value": "isChromatic",
        "type": "Identifier"
      },
      {
        "value": "from",
        "type": "Identifier"
      },
      {
        "value": "'storybook-chromatic/isChromatic'",
        "type": "String"
      },
      {
        "value": "import",
        "type": "Keyword"
      },
      {
        "value": "Desktop",
        "type": "Identifier"
      },
      {
        "value": "from",
        "type": "Identifier"
      },
      {
        "value": "'./desktop'",
        "type": "String"
      },
      {
        "value": "import",
        "type": "Keyword"
      },
      {
        "value": "Mobile",
        "type": "Identifier"
      },
      {
        "value": "from",
        "type": "Identifier"
      },
      {
        "value": "'./mobile'",
        "type": "String"
      },
      {
        "value": "import",
        "type": "Keyword"
      },
      {
        "value": "Sidebar",
        "type": "Identifier"
      },
      {
        "value": "from",
        "type": "Identifier"
      },
      {
        "value": "'../sidebar/Sidebar'",
        "type": "String"
      },
      {
        "value": "import",
        "type": "Keyword"
      },
      {
        "value": "Panel",
        "type": "Identifier"
      },
      {
        "value": "from",
        "type": "Identifier"
      },
      {
        "value": "'../panel/panel'",
        "type": "String"
      },
      {
        "value": "import",
        "type": "Keyword"
      },
      {
        "value": "Preview",
        "type": "Identifier"
      },
      {
        "value": "from",
        "type": "Identifier"
      },
      {
        "value": "'../preview/preview'",
        "type": "String"
      },
      {
        "value": "import",
        "type": "Keyword"
      },
      {
        "value": "panels",
        "type": "Identifier"
      },
      {
        "value": "from",
        "type": "Identifier"
      },
      {
        "value": "'../panel/panel.stories'",
        "type": "String"
      },
      {
        "value": "import",
        "type": "Keyword"
      },
      {
        "value": "previewProps",
        "type": "Identifier"
      },
      {
        "value": "from",
        "type": "Identifier"
      },
      {
        "value": "'../preview/preview.stories'",
        "type": "String"
      },
      {
        "value": "import",
        "type": "Keyword"
      },
      {
        "value": "mockDataset",
        "type": "Identifier"
      },
      {
        "value": "from",
        "type": "Identifier"
      },
      {
        "value": "'../sidebar/treeview/treeview.mockdata'",
        "type": "String"
      },
      {
        "value": "import",
        "type": "Keyword"
      },
      {
        "value": "store",
        "type": "Identifier"
      },
      {
        "value": "from",
        "type": "Identifier"
      },
      {
        "value": "'./persist'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "realNavProps",
        "type": "Identifier"
      },
      {
        "value": "title",
        "type": "Identifier"
      },
      {
        "value": "'Title'",
        "type": "String"
      },
      {
        "value": "url",
        "type": "Identifier"
      },
      {
        "value": "'https://example.com'",
        "type": "String"
      },
      {
        "value": "stories",
        "type": "Identifier"
      },
      {
        "value": "mockDataset",
        "type": "Identifier"
      },
      {
        "value": "withRoot",
        "type": "Identifier"
      },
      {
        "value": "menu",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "PlaceholderBlock",
        "type": "Identifier"
      },
      {
        "value": "styled",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "Identifier"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "background",
        "type": "Identifier"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "'hotpink'",
        "type": "String"
      },
      {
        "value": "position",
        "type": "Identifier"
      },
      {
        "value": "'absolute'",
        "type": "String"
      },
      {
        "value": "top",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "right",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "bottom",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "left",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "'100%'",
        "type": "String"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "'100%'",
        "type": "String"
      },
      {
        "value": "display",
        "type": "Identifier"
      },
      {
        "value": "'flex'",
        "type": "String"
      },
      {
        "value": "justifyContent",
        "type": "Identifier"
      },
      {
        "value": "'center'",
        "type": "String"
      },
      {
        "value": "alignItems",
        "type": "Identifier"
      },
      {
        "value": "'center'",
        "type": "String"
      },
      {
        "value": "overflow",
        "type": "Identifier"
      },
      {
        "value": "'hidden'",
        "type": "String"
      },
      {
        "value": "class",
        "type": "Keyword"
      },
      {
        "value": "PlaceholderClock",
        "type": "Identifier"
      },
      {
        "value": "extends",
        "type": "Keyword"
      },
      {
        "value": "Component",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "componentDidMount",
        "type": "Identifier"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "interval",
        "type": "Identifier"
      },
      {
        "value": "setInterval",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "setState",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1000",
        "type": "Numeric"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "interval",
        "type": "Identifier"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "clearInterval",
        "type": "Identifier"
      },
      {
        "value": "interval",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "PlaceholderBlock",
        "type": "JSXIdentifier"
      },
      {
        "value": "color",
        "type": "JSXIdentifier"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "\n        ",
        "type": "JSXText"
      },
      {
        "value": "h2",
        "type": "JSXIdentifier"
      },
      {
        "value": "style",
        "type": "JSXIdentifier"
      },
      {
        "value": "position",
        "type": "Identifier"
      },
      {
        "value": "'absolute'",
        "type": "String"
      },
      {
        "value": "bottom",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "right",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "'rgba(0,0,0,0.2)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "'150px'",
        "type": "String"
      },
      {
        "value": "lineHeight",
        "type": "Identifier"
      },
      {
        "value": "'150px'",
        "type": "String"
      },
      {
        "value": "margin",
        "type": "Identifier"
      },
      {
        "value": "'-20px'",
        "type": "String"
      },
      {
        "value": "\n          ",
        "type": "JSXText"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "\n        ",
        "type": "JSXText"
      },
      {
        "value": "h2",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n        ",
        "type": "JSXText"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "\n      ",
        "type": "JSXText"
      },
      {
        "value": "PlaceholderBlock",
        "type": "JSXIdentifier"
      },
      {
        "value": "PlaceholderClock",
        "type": "Identifier"
      },
      {
        "value": "propTypes",
        "type": "Identifier"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "PropTypes",
        "type": "Identifier"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "isRequired",
        "type": "Identifier"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "PropTypes",
        "type": "Identifier"
      },
      {
        "value": "string",
        "type": "Identifier"
      },
      {
        "value": "isRequired",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "MockNav",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "PlaceholderClock",
        "type": "JSXIdentifier"
      },
      {
        "value": "color",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"hotpink\"",
        "type": "JSXText"
      },
      {
        "value": "\n    ",
        "type": "JSXText"
      },
      {
        "value": "pre",
        "type": "JSXIdentifier"
      },
      {
        "value": "JSON",
        "type": "JSXIdentifier"
      },
      {
        "value": "stringify",
        "type": "JSXIdentifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "pre",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n  ",
        "type": "JSXText"
      },
      {
        "value": "PlaceholderClock",
        "type": "JSXIdentifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "MockPreview",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "PlaceholderClock",
        "type": "JSXIdentifier"
      },
      {
        "value": "color",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"deepskyblue\"",
        "type": "JSXText"
      },
      {
        "value": "\n    ",
        "type": "JSXText"
      },
      {
        "value": "pre",
        "type": "JSXIdentifier"
      },
      {
        "value": "JSON",
        "type": "JSXIdentifier"
      },
      {
        "value": "stringify",
        "type": "JSXIdentifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "pre",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n  ",
        "type": "JSXText"
      },
      {
        "value": "PlaceholderClock",
        "type": "JSXIdentifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "MockPanel",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "PlaceholderClock",
        "type": "JSXIdentifier"
      },
      {
        "value": "color",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"orangered\"",
        "type": "JSXText"
      },
      {
        "value": "\n    ",
        "type": "JSXText"
      },
      {
        "value": "pre",
        "type": "JSXIdentifier"
      },
      {
        "value": "JSON",
        "type": "JSXIdentifier"
      },
      {
        "value": "stringify",
        "type": "JSXIdentifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "pre",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n  ",
        "type": "JSXText"
      },
      {
        "value": "PlaceholderClock",
        "type": "JSXIdentifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "MockPage",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "PlaceholderClock",
        "type": "JSXIdentifier"
      },
      {
        "value": "color",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"cyan\"",
        "type": "JSXText"
      },
      {
        "value": "\n    ",
        "type": "JSXText"
      },
      {
        "value": "pre",
        "type": "JSXIdentifier"
      },
      {
        "value": "JSON",
        "type": "JSXIdentifier"
      },
      {
        "value": "stringify",
        "type": "JSXIdentifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "pre",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n  ",
        "type": "JSXText"
      },
      {
        "value": "PlaceholderClock",
        "type": "JSXIdentifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "mockProps",
        "type": "Identifier"
      },
      {
        "value": "Nav",
        "type": "Identifier"
      },
      {
        "value": "MockNav",
        "type": "Identifier"
      },
      {
        "value": "Preview",
        "type": "Identifier"
      },
      {
        "value": "MockPreview",
        "type": "Identifier"
      },
      {
        "value": "Panel",
        "type": "Identifier"
      },
      {
        "value": "MockPanel",
        "type": "Identifier"
      },
      {
        "value": "Notifications",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "pages",
        "type": "Identifier"
      },
      {
        "value": "options",
        "type": "Identifier"
      },
      {
        "value": "isFullscreen",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "showNav",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "showPanel",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "panelPosition",
        "type": "Identifier"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "path",
        "type": "Identifier"
      },
      {
        "value": "'/story/UI-DesktopLayout-noNav'",
        "type": "String"
      },
      {
        "value": "viewMode",
        "type": "Identifier"
      },
      {
        "value": "'story'",
        "type": "String"
      },
      {
        "value": "storyId",
        "type": "Identifier"
      },
      {
        "value": "'UI-DesktopLayout-noNav'",
        "type": "String"
      },
      {
        "value": "panelCount",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "realProps",
        "type": "Identifier"
      },
      {
        "value": "Nav",
        "type": "Identifier"
      },
      {
        "value": "Sidebar",
        "type": "JSXIdentifier"
      },
      {
        "value": "realNavProps",
        "type": "Identifier"
      },
      {
        "value": "Preview",
        "type": "Identifier"
      },
      {
        "value": "Preview",
        "type": "JSXIdentifier"
      },
      {
        "value": "previewProps",
        "type": "Identifier"
      },
      {
        "value": "Notifications",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "Panel",
        "type": "Identifier"
      },
      {
        "value": "Panel",
        "type": "JSXIdentifier"
      },
      {
        "value": "panels",
        "type": "JSXIdentifier"
      },
      {
        "value": "panels",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "JSXIdentifier"
      },
      {
        "value": "onSelect",
        "type": "Identifier"
      },
      {
        "value": "toggleVisibility",
        "type": "Identifier"
      },
      {
        "value": "togglePosition",
        "type": "Identifier"
      },
      {
        "value": "selectedPanel",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"test2\"",
        "type": "JSXText"
      },
      {
        "value": "pages",
        "type": "Identifier"
      },
      {
        "value": "options",
        "type": "Identifier"
      },
      {
        "value": "isFullscreen",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "showNav",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "showPanel",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "panelPosition",
        "type": "Identifier"
      },
      {
        "value": "'right'",
        "type": "String"
      },
      {
        "value": "path",
        "type": "Identifier"
      },
      {
        "value": "'/story/UI-DesktopLayout-noNav'",
        "type": "String"
      },
      {
        "value": "viewMode",
        "type": "Identifier"
      },
      {
        "value": "'story'",
        "type": "String"
      },
      {
        "value": "storyId",
        "type": "Identifier"
      },
      {
        "value": "'UI-DesktopLayout-noNav'",
        "type": "String"
      },
      {
        "value": "panelCount",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "storiesOf",
        "type": "Identifier"
      },
      {
        "value": "'UI|Layout/Desktop'",
        "type": "String"
      },
      {
        "value": "module",
        "type": "Identifier"
      },
      {
        "value": "addParameters",
        "type": "Identifier"
      },
      {
        "value": "component",
        "type": "Identifier"
      },
      {
        "value": "Desktop",
        "type": "Identifier"
      },
      {
        "value": "addDecorator",
        "type": "Identifier"
      },
      {
        "value": "withKnobs",
        "type": "Identifier"
      },
      {
        "value": "addDecorator",
        "type": "Identifier"
      },
      {
        "value": "storyFn",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "mocked",
        "type": "Identifier"
      },
      {
        "value": "boolean",
        "type": "Identifier"
      },
      {
        "value": "'mock'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "number",
        "type": "Identifier"
      },
      {
        "value": "'height'",
        "type": "String"
      },
      {
        "value": "1200",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "number",
        "type": "Identifier"
      },
      {
        "value": "'width'",
        "type": "String"
      },
      {
        "value": "1200",
        "type": "Numeric"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "isChromatic",
        "type": "Identifier"
      },
      {
        "value": "store",
        "type": "Identifier"
      },
      {
        "value": "local",
        "type": "Identifier"
      },
      {
        "value": "set",
        "type": "Identifier"
      },
      {
        "value": "`storybook-layout`",
        "type": "Template"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "mocked",
        "type": "Identifier"
      },
      {
        "value": "mockProps",
        "type": "Identifier"
      },
      {
        "value": "realProps",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "style",
        "type": "JSXIdentifier"
      },
      {
        "value": "minHeight",
        "type": "Identifier"
      },
      {
        "value": "1200",
        "type": "Numeric"
      },
      {
        "value": "minWidth",
        "type": "Identifier"
      },
      {
        "value": "1200",
        "type": "Numeric"
      },
      {
        "value": "storyFn",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/zeit/next.js/blob/42736c061ad0e5610522de2517c928b2b8af0ed4/test/integration/basic/test/error-recovery.js",
    "commit": "42736c061ad0e5610522de2517c928b2b8af0ed4",
    "project_name": "next.js",
    "project_author": "vercel",
    "flaky_file": "/test/integration/basic/test/error-recovery.js",
    "start_line": 7,
    "end_line": 292,
    "test_code": "describe('Error Recovery', () => {\n  it('should have installed the react-overlay-editor editor handler', async () => {\n    let browser\n    const aboutPage = new File(join(__dirname, '../', 'pages', 'hmr', 'about.js'))\n    aboutPage.replace('</div>', 'div')\n\n    try {\n      browser = await webdriver(context.appPort, '/hmr/about')\n\n      // Wait for react-error-overlay\n      await browser.waitForElementByCss('iframe', 2000)\n\n      // react-error-overlay uses the following inline style if an editorHandler is installed\n      expect(await getReactErrorOverlayContent(browser)).toMatch(/style=\"cursor: pointer;\"/)\n\n      aboutPage.restore()\n\n      await check(\n        () => browser.elementByCss('body').text(),\n        /This is the about page/\n      )\n    } finally {\n      aboutPage.restore()\n\n      if (browser) {\n        browser.close()\n      }\n    }\n  })\n\n  it('should detect syntax errors and recover', async () => {\n    let browser\n    const aboutPage = new File(join(__dirname, '../', 'pages', 'hmr', 'about.js'))\n    try {\n      browser = await webdriver(context.appPort, '/hmr/about')\n      const text = await browser\n        .elementByCss('p').text()\n      expect(text).toBe('This is the about page.')\n\n      aboutPage.replace('</div>', 'div')\n\n      await waitFor(10000)\n\n      expect(await getReactErrorOverlayContent(browser)).toMatch(/Unterminated JSX contents/)\n\n      aboutPage.restore()\n\n      await check(\n        () => browser.elementByCss('body').text(),\n        /This is the about page/\n      )\n    } finally {\n      aboutPage.restore()\n\n      if (browser) {\n        browser.close()\n      }\n    }\n  })\n\n  it('should not show the default HMR error overlay', async () => {\n    let browser\n    const aboutPage = new File(join(__dirname, '../', 'pages', 'hmr', 'about.js'))\n    try {\n      browser = await webdriver(context.appPort, '/hmr/about')\n      const text = await browser\n        .elementByCss('p').text()\n      expect(text).toBe('This is the about page.')\n\n      aboutPage.replace('</div>', 'div')\n\n      await waitFor(10000)\n\n      expect(await getReactErrorOverlayContent(browser)).toMatch(/Unterminated JSX contents/)\n\n      await waitFor(10000)\n\n      // Check for the error overlay\n      const bodyHtml = await browser.elementByCss('body').getAttribute('innerHTML')\n      expect(bodyHtml.includes('webpack-hot-middleware-clientOverlay')).toBeFalsy()\n    } finally {\n      aboutPage.restore()\n      if (browser) {\n        browser.close()\n      }\n    }\n  })\n\n  it('should show the error on all pages', async () => {\n    const aboutPage = new File(join(__dirname, '../', 'pages', 'hmr', 'about.js'))\n    let browser\n    try {\n      aboutPage.replace('</div>', 'div')\n\n      browser = await webdriver(context.appPort, '/hmr/contact')\n\n      await waitFor(10000)\n\n      expect(await getReactErrorOverlayContent(browser)).toMatch(/Unterminated JSX contents/)\n\n      aboutPage.restore()\n\n      await check(\n        () => browser.elementByCss('body').text(),\n        /This is the contact page/\n      )\n    } finally {\n      aboutPage.restore()\n      if (browser) {\n        browser.close()\n      }\n    }\n  })\n\n  it('should detect runtime errors on the module scope', async () => {\n    let browser\n    const aboutPage = new File(join(__dirname, '../', 'pages', 'hmr', 'about.js'))\n    try {\n      browser = await webdriver(context.appPort, '/hmr/about')\n      const text = await browser\n        .elementByCss('p').text()\n      expect(text).toBe('This is the about page.')\n\n      aboutPage.replace('export', 'aa=20;\\nexport')\n\n      await waitFor(10000)\n\n      expect(await getReactErrorOverlayContent(browser)).toMatch(/aa is not defined/)\n\n      aboutPage.restore()\n\n      await check(\n        () => browser.elementByCss('body').text(),\n        /This is the about page/\n      )\n    } finally {\n      aboutPage.restore()\n      if (browser) {\n        browser.close()\n      }\n    }\n  })\n\n  it('should recover from errors in the render function', async () => {\n    const browser = await webdriver(context.appPort, '/hmr/about')\n    const text = await browser\n      .elementByCss('p').text()\n    expect(text).toBe('This is the about page.')\n\n    const aboutPage = new File(join(__dirname, '../', 'pages', 'hmr', 'about.js'))\n    aboutPage.replace('return', 'throw new Error(\"an-expected-error\");\\nreturn')\n\n    await waitFor(10000)\n\n    expect(await getReactErrorOverlayContent(browser)).toMatch(/an-expected-error/)\n\n    aboutPage.restore()\n\n    await check(\n      () => browser.elementByCss('body').text(),\n      /This is the about page/\n    )\n\n    browser.close()\n  })\n\n  it('should recover after exporting an invalid page', async () => {\n    const browser = await webdriver(context.appPort, '/hmr/about')\n    const text = await browser\n      .elementByCss('p').text()\n    expect(text).toBe('This is the about page.')\n\n    const aboutPage = new File(join(__dirname, '../', 'pages', 'hmr', 'about.js'))\n    aboutPage.replace('export default', 'export default \"not-a-page\"\\nexport const fn = ')\n\n    await waitFor(10000)\n\n    expect(await browser.elementByCss('body').text()).toMatch(/The default export is not a React Component/)\n\n    aboutPage.restore()\n\n    await check(\n      () => browser.elementByCss('body').text(),\n      /This is the about page/\n    )\n\n    browser.close()\n  })\n\n  it('should recover after a bad return from the render function', async () => {\n    const browser = await webdriver(context.appPort, '/hmr/about')\n    const text = await browser\n      .elementByCss('p').text()\n    expect(text).toBe('This is the about page.')\n\n    const aboutPage = new File(join(__dirname, '../', 'pages', 'hmr', 'about.js'))\n    aboutPage.replace('export default', 'export default () => /search/ \\nexport const fn = ')\n\n    await check(\n      () => browser.elementByCss('body').text(),\n      /Objects are not valid as a React child/\n    )\n\n    aboutPage.restore()\n\n    await check(\n      () => browser.elementByCss('body').text(),\n      /This is the about page/\n    )\n\n    browser.close()\n  })\n\n  it('should recover from errors in getInitialProps in client', async () => {\n    const browser = await webdriver(context.appPort, '/hmr')\n    await browser.elementByCss('#error-in-gip-link').click()\n\n    await waitFor(10000)\n\n    expect(await getReactErrorOverlayContent(browser)).toMatch(/an-expected-error-in-gip/)\n\n    const erroredPage = new File(join(__dirname, '../', 'pages', 'hmr', 'error-in-gip.js'))\n    erroredPage.replace('throw error', 'return {}')\n\n    await check(\n      () => browser.elementByCss('body').text(),\n      /Hello/\n    )\n\n    erroredPage.restore()\n    browser.close()\n  })\n\n  it('should recover after an error reported via SSR', async () => {\n    const browser = await webdriver(context.appPort, '/hmr/error-in-gip')\n\n    await waitFor(10000)\n\n    expect(await getReactErrorOverlayContent(browser)).toMatch(/an-expected-error-in-gip/)\n\n    const erroredPage = new File(join(__dirname, '../', 'pages', 'hmr', 'error-in-gip.js'))\n    erroredPage.replace('throw error', 'return {}')\n\n    await check(\n      () => browser.elementByCss('body').text(),\n      /Hello/\n    )\n\n    erroredPage.restore()\n    browser.close()\n  })\n\n  it('should recover from 404 after a page has been added', async () => {\n    let browser\n    let newPage\n    try {\n      browser = await webdriver(context.appPort, '/hmr/new-page')\n\n      expect(await browser.elementByCss('body').text()).toMatch(/This page could not be found/)\n\n      // Add the page\n      newPage = new File(join(__dirname, '../', 'pages', 'hmr', 'new-page.js'))\n      newPage.write('export default () => (<div id=\"new-page\">the-new-page</div>)')\n\n      await check(\n        () => {\n          if (!browser.hasElementById('new-page')) {\n            throw new Error('waiting')\n          }\n\n          return browser.elementByCss('body').text()\n        },\n        /the-new-page/\n      )\n\n      // expect(await browser.elementByCss('body').text()).toMatch(/the-new-page/)\n    } finally {\n      if (newPage) {\n        newPage.delete()\n      }\n      if (browser) {\n        browser.close()\n      }\n    }\n  })\n})\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'Error Recovery'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should have installed the react-overlay-editor editor handler'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "File",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "__dirname",
        "type": "Identifier"
      },
      {
        "value": "'../'",
        "type": "String"
      },
      {
        "value": "'pages'",
        "type": "String"
      },
      {
        "value": "'hmr'",
        "type": "String"
      },
      {
        "value": "'about.js'",
        "type": "String"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "replace",
        "type": "Identifier"
      },
      {
        "value": "'</div>'",
        "type": "String"
      },
      {
        "value": "'div'",
        "type": "String"
      },
      {
        "value": "try",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "webdriver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "appPort",
        "type": "Identifier"
      },
      {
        "value": "'/hmr/about'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "waitForElementByCss",
        "type": "Identifier"
      },
      {
        "value": "'iframe'",
        "type": "String"
      },
      {
        "value": "2000",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getReactErrorOverlayContent",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "toMatch",
        "type": "Identifier"
      },
      {
        "value": "/style=\"cursor: pointer;\"/",
        "type": "RegularExpression"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "check",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "/This is the about page/",
        "type": "RegularExpression"
      },
      {
        "value": "finally",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should detect syntax errors and recover'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "File",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "__dirname",
        "type": "Identifier"
      },
      {
        "value": "'../'",
        "type": "String"
      },
      {
        "value": "'pages'",
        "type": "String"
      },
      {
        "value": "'hmr'",
        "type": "String"
      },
      {
        "value": "'about.js'",
        "type": "String"
      },
      {
        "value": "try",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "webdriver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "appPort",
        "type": "Identifier"
      },
      {
        "value": "'/hmr/about'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'p'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'This is the about page.'",
        "type": "String"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "replace",
        "type": "Identifier"
      },
      {
        "value": "'</div>'",
        "type": "String"
      },
      {
        "value": "'div'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "10000",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getReactErrorOverlayContent",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "toMatch",
        "type": "Identifier"
      },
      {
        "value": "/Unterminated JSX contents/",
        "type": "RegularExpression"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "check",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "/This is the about page/",
        "type": "RegularExpression"
      },
      {
        "value": "finally",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should not show the default HMR error overlay'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "File",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "__dirname",
        "type": "Identifier"
      },
      {
        "value": "'../'",
        "type": "String"
      },
      {
        "value": "'pages'",
        "type": "String"
      },
      {
        "value": "'hmr'",
        "type": "String"
      },
      {
        "value": "'about.js'",
        "type": "String"
      },
      {
        "value": "try",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "webdriver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "appPort",
        "type": "Identifier"
      },
      {
        "value": "'/hmr/about'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'p'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'This is the about page.'",
        "type": "String"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "replace",
        "type": "Identifier"
      },
      {
        "value": "'</div>'",
        "type": "String"
      },
      {
        "value": "'div'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "10000",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getReactErrorOverlayContent",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "toMatch",
        "type": "Identifier"
      },
      {
        "value": "/Unterminated JSX contents/",
        "type": "RegularExpression"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "10000",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "bodyHtml",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "getAttribute",
        "type": "Identifier"
      },
      {
        "value": "'innerHTML'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "bodyHtml",
        "type": "Identifier"
      },
      {
        "value": "includes",
        "type": "Identifier"
      },
      {
        "value": "'webpack-hot-middleware-clientOverlay'",
        "type": "String"
      },
      {
        "value": "toBeFalsy",
        "type": "Identifier"
      },
      {
        "value": "finally",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should show the error on all pages'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "File",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "__dirname",
        "type": "Identifier"
      },
      {
        "value": "'../'",
        "type": "String"
      },
      {
        "value": "'pages'",
        "type": "String"
      },
      {
        "value": "'hmr'",
        "type": "String"
      },
      {
        "value": "'about.js'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "try",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "replace",
        "type": "Identifier"
      },
      {
        "value": "'</div>'",
        "type": "String"
      },
      {
        "value": "'div'",
        "type": "String"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "webdriver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "appPort",
        "type": "Identifier"
      },
      {
        "value": "'/hmr/contact'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "10000",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getReactErrorOverlayContent",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "toMatch",
        "type": "Identifier"
      },
      {
        "value": "/Unterminated JSX contents/",
        "type": "RegularExpression"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "check",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "/This is the contact page/",
        "type": "RegularExpression"
      },
      {
        "value": "finally",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should detect runtime errors on the module scope'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "File",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "__dirname",
        "type": "Identifier"
      },
      {
        "value": "'../'",
        "type": "String"
      },
      {
        "value": "'pages'",
        "type": "String"
      },
      {
        "value": "'hmr'",
        "type": "String"
      },
      {
        "value": "'about.js'",
        "type": "String"
      },
      {
        "value": "try",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "webdriver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "appPort",
        "type": "Identifier"
      },
      {
        "value": "'/hmr/about'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'p'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'This is the about page.'",
        "type": "String"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "replace",
        "type": "Identifier"
      },
      {
        "value": "'export'",
        "type": "String"
      },
      {
        "value": "'aa=20;\\nexport'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "10000",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getReactErrorOverlayContent",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "toMatch",
        "type": "Identifier"
      },
      {
        "value": "/aa is not defined/",
        "type": "RegularExpression"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "check",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "/This is the about page/",
        "type": "RegularExpression"
      },
      {
        "value": "finally",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should recover from errors in the render function'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "webdriver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "appPort",
        "type": "Identifier"
      },
      {
        "value": "'/hmr/about'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'p'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'This is the about page.'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "File",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "__dirname",
        "type": "Identifier"
      },
      {
        "value": "'../'",
        "type": "String"
      },
      {
        "value": "'pages'",
        "type": "String"
      },
      {
        "value": "'hmr'",
        "type": "String"
      },
      {
        "value": "'about.js'",
        "type": "String"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "replace",
        "type": "Identifier"
      },
      {
        "value": "'return'",
        "type": "String"
      },
      {
        "value": "'throw new Error(\"an-expected-error\");\\nreturn'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "10000",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getReactErrorOverlayContent",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "toMatch",
        "type": "Identifier"
      },
      {
        "value": "/an-expected-error/",
        "type": "RegularExpression"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "check",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "/This is the about page/",
        "type": "RegularExpression"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should recover after exporting an invalid page'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "webdriver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "appPort",
        "type": "Identifier"
      },
      {
        "value": "'/hmr/about'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'p'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'This is the about page.'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "File",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "__dirname",
        "type": "Identifier"
      },
      {
        "value": "'../'",
        "type": "String"
      },
      {
        "value": "'pages'",
        "type": "String"
      },
      {
        "value": "'hmr'",
        "type": "String"
      },
      {
        "value": "'about.js'",
        "type": "String"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "replace",
        "type": "Identifier"
      },
      {
        "value": "'export default'",
        "type": "String"
      },
      {
        "value": "'export default \"not-a-page\"\\nexport const fn = '",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "10000",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "toMatch",
        "type": "Identifier"
      },
      {
        "value": "/The default export is not a React Component/",
        "type": "RegularExpression"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "check",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "/This is the about page/",
        "type": "RegularExpression"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should recover after a bad return from the render function'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "webdriver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "appPort",
        "type": "Identifier"
      },
      {
        "value": "'/hmr/about'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'p'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'This is the about page.'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "File",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "__dirname",
        "type": "Identifier"
      },
      {
        "value": "'../'",
        "type": "String"
      },
      {
        "value": "'pages'",
        "type": "String"
      },
      {
        "value": "'hmr'",
        "type": "String"
      },
      {
        "value": "'about.js'",
        "type": "String"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "replace",
        "type": "Identifier"
      },
      {
        "value": "'export default'",
        "type": "String"
      },
      {
        "value": "'export default () => /search/ \\nexport const fn = '",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "check",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "/Objects are not valid as a React child/",
        "type": "RegularExpression"
      },
      {
        "value": "aboutPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "check",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "/This is the about page/",
        "type": "RegularExpression"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should recover from errors in getInitialProps in client'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "webdriver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "appPort",
        "type": "Identifier"
      },
      {
        "value": "'/hmr'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'#error-in-gip-link'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "10000",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getReactErrorOverlayContent",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "toMatch",
        "type": "Identifier"
      },
      {
        "value": "/an-expected-error-in-gip/",
        "type": "RegularExpression"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "erroredPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "File",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "__dirname",
        "type": "Identifier"
      },
      {
        "value": "'../'",
        "type": "String"
      },
      {
        "value": "'pages'",
        "type": "String"
      },
      {
        "value": "'hmr'",
        "type": "String"
      },
      {
        "value": "'error-in-gip.js'",
        "type": "String"
      },
      {
        "value": "erroredPage",
        "type": "Identifier"
      },
      {
        "value": "replace",
        "type": "Identifier"
      },
      {
        "value": "'throw error'",
        "type": "String"
      },
      {
        "value": "'return {}'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "check",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "/Hello/",
        "type": "RegularExpression"
      },
      {
        "value": "erroredPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should recover after an error reported via SSR'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "webdriver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "appPort",
        "type": "Identifier"
      },
      {
        "value": "'/hmr/error-in-gip'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "10000",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getReactErrorOverlayContent",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "toMatch",
        "type": "Identifier"
      },
      {
        "value": "/an-expected-error-in-gip/",
        "type": "RegularExpression"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "erroredPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "File",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "__dirname",
        "type": "Identifier"
      },
      {
        "value": "'../'",
        "type": "String"
      },
      {
        "value": "'pages'",
        "type": "String"
      },
      {
        "value": "'hmr'",
        "type": "String"
      },
      {
        "value": "'error-in-gip.js'",
        "type": "String"
      },
      {
        "value": "erroredPage",
        "type": "Identifier"
      },
      {
        "value": "replace",
        "type": "Identifier"
      },
      {
        "value": "'throw error'",
        "type": "String"
      },
      {
        "value": "'return {}'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "check",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "/Hello/",
        "type": "RegularExpression"
      },
      {
        "value": "erroredPage",
        "type": "Identifier"
      },
      {
        "value": "restore",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should recover from 404 after a page has been added'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "newPage",
        "type": "Identifier"
      },
      {
        "value": "try",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "webdriver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "appPort",
        "type": "Identifier"
      },
      {
        "value": "'/hmr/new-page'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "toMatch",
        "type": "Identifier"
      },
      {
        "value": "/This page could not be found/",
        "type": "RegularExpression"
      },
      {
        "value": "newPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "File",
        "type": "Identifier"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "__dirname",
        "type": "Identifier"
      },
      {
        "value": "'../'",
        "type": "String"
      },
      {
        "value": "'pages'",
        "type": "String"
      },
      {
        "value": "'hmr'",
        "type": "String"
      },
      {
        "value": "'new-page.js'",
        "type": "String"
      },
      {
        "value": "newPage",
        "type": "Identifier"
      },
      {
        "value": "write",
        "type": "Identifier"
      },
      {
        "value": "'export default () => (<div id=\"new-page\">the-new-page</div>)'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "check",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "hasElementById",
        "type": "Identifier"
      },
      {
        "value": "'new-page'",
        "type": "String"
      },
      {
        "value": "throw",
        "type": "Keyword"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Error",
        "type": "Identifier"
      },
      {
        "value": "'waiting'",
        "type": "String"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "elementByCss",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "/the-new-page/",
        "type": "RegularExpression"
      },
      {
        "value": "finally",
        "type": "Keyword"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "newPage",
        "type": "Identifier"
      },
      {
        "value": "newPage",
        "type": "Identifier"
      },
      {
        "value": "delete",
        "type": "Keyword"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/gatsbyjs/gatsby/blob/05e90da29ff965ec00ea9b8c226e081408903e9c/e2e-tests/production-runtime/cypress/integration/accessibility.js",
    "commit": "05e90da29ff965ec00ea9b8c226e081408903e9c",
    "project_name": "gatsby",
    "project_author": "gatsbyjs",
    "flaky_file": "/e2e-tests/production-runtime/cypress/integration/accessibility.js",
    "start_line": 2,
    "end_line": 9,
    "test_code": "it(`Focus router wrapper after navigation to regular page (from index)`, () => {\n  cy.visit(`/`).waitForAPIorTimeout(`onRouteUpdate`, { timeout: 10000 })\n\n  cy.changeFocus()\n  cy.assertRouterWrapperFocus(false)\n  cy.navigateAndWaitForRouteChange(`/page-2/`)\n  cy.assertRouterWrapperFocus(true)\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "`Focus router wrapper after navigation to regular page (from index)`",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "visit",
        "type": "Identifier"
      },
      {
        "value": "`/`",
        "type": "Template"
      },
      {
        "value": "waitForAPIorTimeout",
        "type": "Identifier"
      },
      {
        "value": "`onRouteUpdate`",
        "type": "Template"
      },
      {
        "value": "timeout",
        "type": "Identifier"
      },
      {
        "value": "10000",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "changeFocus",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "assertRouterWrapperFocus",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "navigateAndWaitForRouteChange",
        "type": "Identifier"
      },
      {
        "value": "`/page-2/`",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "assertRouterWrapperFocus",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/6fcf76b1da6bb28705a9d1513be550063ce09d50/debug/test/browser/devtools/renderer.test.js",
    "commit": "6fcf76b1da6bb28705a9d1513be550063ce09d50",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/debug/test/browser/devtools/renderer.test.js",
    "start_line": 121,
    "end_line": 137,
    "test_code": "flakeyIt('should unmount nodes', () => {\n\trender(\n\t\t<div>\n\t\t\t<span>foo</span>\n\t\t\t<span>bar</span>\n\t\t</div>,\n\t\tscratch\n\t);\n\trender(<div />, scratch);\n\n\texpect(toSnapshot(spy.args[1][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Update timings 2',\n\t\t'Remove 4',\n\t\t'Remove 3'\n\t]);\n});\n",
    "tokens": [
      {
        "value": "flakeyIt",
        "type": "Identifier"
      },
      {
        "value": "'should unmount nodes'",
        "type": "String"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "foo",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "bar",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Update timings 2'",
        "type": "String"
      },
      {
        "value": "'Remove 4'",
        "type": "String"
      },
      {
        "value": "'Remove 3'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/6fcf76b1da6bb28705a9d1513be550063ce09d50/debug/test/browser/devtools/renderer.test.js",
    "commit": "6fcf76b1da6bb28705a9d1513be550063ce09d50",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/debug/test/browser/devtools/renderer.test.js",
    "start_line": 156,
    "end_line": 186,
    "test_code": "flakeyIt('should mount after filtered update', () => {\n\trenderer.applyFilters({\n\t\tregex: [],\n\t\ttype: new Set(['dom'])\n\t});\n\n\tconst Foo = props => <div>{props.children}</div>;\n\tconst Bar = props => <span>{props.children}</span>;\n\n\trender(\n\t\t<div>\n\t\t\t<Foo />\n\t\t</div>,\n\t\tscratch\n\t);\n\trender(\n\t\t<div>\n\t\t\t<Foo>\n\t\t\t\t<Bar>bar</Bar>\n\t\t\t</Foo>\n\t\t</div>,\n\t\tscratch\n\t);\n\n\texpect(toSnapshot(spy.args[1][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Add 3 <Bar> to parent 2',\n\t\t'Update timings 1',\n\t\t'Update timings 2'\n\t]);\n});\n",
    "tokens": [
      {
        "value": "flakeyIt",
        "type": "Identifier"
      },
      {
        "value": "'should mount after filtered update'",
        "type": "String"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "applyFilters",
        "type": "Identifier"
      },
      {
        "value": "regex",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Set",
        "type": "Identifier"
      },
      {
        "value": "'dom'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "Foo",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "props",
        "type": "JSXIdentifier"
      },
      {
        "value": "children",
        "type": "JSXIdentifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "Bar",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "props",
        "type": "JSXIdentifier"
      },
      {
        "value": "children",
        "type": "JSXIdentifier"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Bar",
        "type": "JSXIdentifier"
      },
      {
        "value": "bar",
        "type": "JSXText"
      },
      {
        "value": "Bar",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Add 3 <Bar> to parent 2'",
        "type": "String"
      },
      {
        "value": "'Update timings 1'",
        "type": "String"
      },
      {
        "value": "'Update timings 2'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/6fcf76b1da6bb28705a9d1513be550063ce09d50/debug/test/browser/devtools/renderer.test.js",
    "commit": "6fcf76b1da6bb28705a9d1513be550063ce09d50",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/debug/test/browser/devtools/renderer.test.js",
    "start_line": 484,
    "end_line": 491,
    "test_code": "flakeyIt('should find filtered nodes', () => {\n\trenderer.applyFilters({\n\t\tregex: [],\n\t\ttype: new Set(['dom'])\n\t});\n\trender(<div />, scratch);\n\texpect(renderer.findVNodeIdForDom(scratch.firstChild)).to.equal(1);\n});\n",
    "tokens": [
      {
        "value": "flakeyIt",
        "type": "Identifier"
      },
      {
        "value": "'should find filtered nodes'",
        "type": "String"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "applyFilters",
        "type": "Identifier"
      },
      {
        "value": "regex",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Set",
        "type": "Identifier"
      },
      {
        "value": "'dom'",
        "type": "String"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "findVNodeIdForDom",
        "type": "Identifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "firstChild",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/6fcf76b1da6bb28705a9d1513be550063ce09d50/debug/test/browser/devtools/renderer.test.js",
    "commit": "6fcf76b1da6bb28705a9d1513be550063ce09d50",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/debug/test/browser/devtools/renderer.test.js",
    "start_line": 610,
    "end_line": 626,
    "test_code": "flakeyIt('should filter by dom type #1', () => {\n\trenderer.applyFilters({\n\t\tregex: [],\n\t\ttype: new Set(['dom'])\n\t});\n\trender(\n\t\t<div>\n\t\t\t<span>foo</span>\n\t\t\t<span>bar</span>\n\t\t</div>,\n\t\tscratch\n\t);\n\texpect(toSnapshot(spy.args[0][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Add 1 <Fragment> to parent 1'\n\t]);\n});\n",
    "tokens": [
      {
        "value": "flakeyIt",
        "type": "Identifier"
      },
      {
        "value": "'should filter by dom type #1'",
        "type": "String"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "applyFilters",
        "type": "Identifier"
      },
      {
        "value": "regex",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Set",
        "type": "Identifier"
      },
      {
        "value": "'dom'",
        "type": "String"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "foo",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "bar",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Add 1 <Fragment> to parent 1'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/6fcf76b1da6bb28705a9d1513be550063ce09d50/debug/test/browser/devtools/renderer.test.js",
    "commit": "6fcf76b1da6bb28705a9d1513be550063ce09d50",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/debug/test/browser/devtools/renderer.test.js",
    "start_line": 628,
    "end_line": 650,
    "test_code": "flakeyIt('should filter by dom type #2', () => {\n\trenderer.applyFilters({\n\t\tregex: [],\n\t\ttype: new Set(['dom'])\n\t});\n\n\tfunction Foo() {\n\t\treturn <div>foo</div>;\n\t}\n\trender(\n\t\t<div>\n\t\t\t<Foo />\n\t\t\t<span>foo</span>\n\t\t\t<span>bar</span>\n\t\t</div>,\n\t\tscratch\n\t);\n\texpect(toSnapshot(spy.args[0][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Add 1 <Fragment> to parent 1',\n\t\t'Add 2 <Foo> to parent 1'\n\t]);\n});\n",
    "tokens": [
      {
        "value": "flakeyIt",
        "type": "Identifier"
      },
      {
        "value": "'should filter by dom type #2'",
        "type": "String"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "applyFilters",
        "type": "Identifier"
      },
      {
        "value": "regex",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Set",
        "type": "Identifier"
      },
      {
        "value": "'dom'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "Foo",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "foo",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "foo",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "bar",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Add 1 <Fragment> to parent 1'",
        "type": "String"
      },
      {
        "value": "'Add 2 <Foo> to parent 1'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/6fcf76b1da6bb28705a9d1513be550063ce09d50/debug/test/browser/devtools/renderer.test.js",
    "commit": "6fcf76b1da6bb28705a9d1513be550063ce09d50",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/debug/test/browser/devtools/renderer.test.js",
    "start_line": 652,
    "end_line": 675,
    "test_code": "flakeyIt('should filter by fragment type', () => {\n\trenderer.applyFilters({\n\t\tregex: [],\n\t\ttype: new Set(['fragment'])\n\t});\n\n\tfunction Foo() {\n\t\treturn <div>foo</div>;\n\t}\n\trender(\n\t\t<div>\n\t\t\t<Foo />\n\t\t\t<Fragment>asdf</Fragment>\n\t\t</div>,\n\t\tscratch\n\t);\n\texpect(toSnapshot(spy.args[0][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Add 1 <Fragment> to parent 1',\n\t\t'Add 2 <div> to parent 1',\n\t\t'Add 3 <Foo> to parent 2',\n\t\t'Add 4 <div> to parent 3'\n\t]);\n});\n",
    "tokens": [
      {
        "value": "flakeyIt",
        "type": "Identifier"
      },
      {
        "value": "'should filter by fragment type'",
        "type": "String"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "applyFilters",
        "type": "Identifier"
      },
      {
        "value": "regex",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Set",
        "type": "Identifier"
      },
      {
        "value": "'fragment'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "Foo",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "foo",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Fragment",
        "type": "JSXIdentifier"
      },
      {
        "value": "asdf",
        "type": "JSXText"
      },
      {
        "value": "Fragment",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Add 1 <Fragment> to parent 1'",
        "type": "String"
      },
      {
        "value": "'Add 2 <div> to parent 1'",
        "type": "String"
      },
      {
        "value": "'Add 3 <Foo> to parent 2'",
        "type": "String"
      },
      {
        "value": "'Add 4 <div> to parent 3'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/6fcf76b1da6bb28705a9d1513be550063ce09d50/debug/test/browser/devtools/renderer.test.js",
    "commit": "6fcf76b1da6bb28705a9d1513be550063ce09d50",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/debug/test/browser/devtools/renderer.test.js",
    "start_line": 677,
    "end_line": 716,
    "test_code": "flakeyIt('should filter on update', () => {\n\trenderer.applyFilters({\n\t\tregex: [],\n\t\ttype: new Set(['dom'])\n\t});\n\n\tlet update;\n\tfunction Parent(props) {\n\t\tconst [i, setI] = useState(0);\n\t\tupdate = () => setI(i + 1);\n\t\treturn <div>{props.children}</div>;\n\t}\n\n\tconst Foo = () => <div />;\n\trender(\n\t\t<Parent>\n\t\t\t<div>\n\t\t\t\t<Foo />\n\t\t\t</div>\n\t\t</Parent>,\n\t\tscratch\n\t);\n\n\texpect(toSnapshot(spy.args[0][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Add 1 <Fragment> to parent 1',\n\t\t'Add 2 <Parent> to parent 1',\n\t\t'Add 3 <Foo> to parent 2'\n\t]);\n\n\tact(() => {\n\t\tupdate();\n\t});\n\n\texpect(toSnapshot(spy.args[1][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Update timings 2',\n\t\t'Update timings 3'\n\t]);\n});\n",
    "tokens": [
      {
        "value": "flakeyIt",
        "type": "Identifier"
      },
      {
        "value": "'should filter on update'",
        "type": "String"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "applyFilters",
        "type": "Identifier"
      },
      {
        "value": "regex",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Set",
        "type": "Identifier"
      },
      {
        "value": "'dom'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "update",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "Parent",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "setI",
        "type": "Identifier"
      },
      {
        "value": "useState",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "update",
        "type": "Identifier"
      },
      {
        "value": "setI",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "props",
        "type": "JSXIdentifier"
      },
      {
        "value": "children",
        "type": "JSXIdentifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "Foo",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "Parent",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t",
        "type": "JSXText"
      },
      {
        "value": "Parent",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Add 1 <Fragment> to parent 1'",
        "type": "String"
      },
      {
        "value": "'Add 2 <Parent> to parent 1'",
        "type": "String"
      },
      {
        "value": "'Add 3 <Foo> to parent 2'",
        "type": "String"
      },
      {
        "value": "act",
        "type": "Identifier"
      },
      {
        "value": "update",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Update timings 2'",
        "type": "String"
      },
      {
        "value": "'Update timings 3'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/6fcf76b1da6bb28705a9d1513be550063ce09d50/debug/test/browser/devtools/renderer.test.js",
    "commit": "6fcf76b1da6bb28705a9d1513be550063ce09d50",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/debug/test/browser/devtools/renderer.test.js",
    "start_line": 718,
    "end_line": 760,
    "test_code": "flakeyIt('should update filters after 1st render', () => {\n\trenderer.applyFilters({\n\t\tregex: [],\n\t\ttype: new Set(['dom'])\n\t});\n\n\tfunction Foo() {\n\t\treturn <div>foo</div>;\n\t}\n\trender(\n\t\t<div>\n\t\t\t<Foo />\n\t\t\t<span>foo</span>\n\t\t\t<span>bar</span>\n\t\t</div>,\n\t\tscratch\n\t);\n\texpect(toSnapshot(spy.args[0][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Add 1 <Fragment> to parent 1',\n\t\t'Add 2 <Foo> to parent 1'\n\t]);\n\n\trenderer.applyFilters({\n\t\tregex: [],\n\t\ttype: new Set()\n\t});\n\n\texpect(toSnapshot(spy.args[1][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Remove 2'\n\t]);\n\n\texpect(toSnapshot(spy.args[2][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Add 3 <div> to parent 1',\n\t\t'Add 4 <Foo> to parent 3',\n\t\t'Add 5 <div> to parent 4',\n\t\t'Add 6 <span> to parent 3',\n\t\t'Add 7 <span> to parent 3',\n\t\t'Update timings 1'\n\t]);\n});\n",
    "tokens": [
      {
        "value": "flakeyIt",
        "type": "Identifier"
      },
      {
        "value": "'should update filters after 1st render'",
        "type": "String"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "applyFilters",
        "type": "Identifier"
      },
      {
        "value": "regex",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Set",
        "type": "Identifier"
      },
      {
        "value": "'dom'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "Foo",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "foo",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "foo",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "bar",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Add 1 <Fragment> to parent 1'",
        "type": "String"
      },
      {
        "value": "'Add 2 <Foo> to parent 1'",
        "type": "String"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "applyFilters",
        "type": "Identifier"
      },
      {
        "value": "regex",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Set",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Remove 2'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Add 3 <div> to parent 1'",
        "type": "String"
      },
      {
        "value": "'Add 4 <Foo> to parent 3'",
        "type": "String"
      },
      {
        "value": "'Add 5 <div> to parent 4'",
        "type": "String"
      },
      {
        "value": "'Add 6 <span> to parent 3'",
        "type": "String"
      },
      {
        "value": "'Add 7 <span> to parent 3'",
        "type": "String"
      },
      {
        "value": "'Update timings 1'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/6fcf76b1da6bb28705a9d1513be550063ce09d50/debug/test/browser/devtools/renderer.test.js",
    "commit": "6fcf76b1da6bb28705a9d1513be550063ce09d50",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/debug/test/browser/devtools/renderer.test.js",
    "start_line": 762,
    "end_line": 831,
    "test_code": "flakeyIt('should update filters after 1st render with unmounts', () => {\n\trenderer.applyFilters({\n\t\tregex: [],\n\t\ttype: new Set(['dom'])\n\t});\n\n\tfunction Foo(props) {\n\t\treturn <div>{props.children}</div>;\n\t}\n\trender(\n\t\t<div>\n\t\t\t<Foo>\n\t\t\t\t<h1>\n\t\t\t\t\t<Foo>foo</Foo>\n\t\t\t\t</h1>\n\t\t\t</Foo>\n\t\t\t<span>foo</span>\n\t\t\t<span>bar</span>\n\t\t</div>,\n\t\tscratch\n\t);\n\texpect(toSnapshot(spy.args[0][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Add 1 <Fragment> to parent 1',\n\t\t'Add 2 <Foo> to parent 1',\n\t\t'Add 3 <Foo> to parent 2'\n\t]);\n\n\trenderer.applyFilters({\n\t\tregex: [],\n\t\ttype: new Set()\n\t});\n\n\texpect(toSnapshot(spy.args[1][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Remove 2'\n\t]);\n\texpect(toSnapshot(spy.args[2][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Add 4 <div> to parent 1',\n\t\t'Add 5 <Foo> to parent 4',\n\t\t'Add 6 <div> to parent 5',\n\t\t'Add 7 <h1> to parent 6',\n\t\t'Add 3 <Foo> to parent 7',\n\t\t'Add 8 <div> to parent 3',\n\t\t'Add 9 <span> to parent 4',\n\t\t'Add 10 <span> to parent 4',\n\t\t'Update timings 1'\n\t]);\n\n\trenderer.applyFilters({\n\t\tregex: [],\n\t\ttype: new Set(['dom'])\n\t});\n\n\texpect(toSnapshot(spy.args[3][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Remove 4',\n\t\t'Remove 5',\n\t\t'Remove 9',\n\t\t'Remove 10'\n\t]);\n\n\texpect(toSnapshot(spy.args[4][1])).to.deep.equal([\n\t\t'rootId: 1',\n\t\t'Add 11 <Foo> to parent 1',\n\t\t'Add 3 <Foo> to parent 11',\n\t\t'Update timings 1'\n\t]);\n});\n",
    "tokens": [
      {
        "value": "flakeyIt",
        "type": "Identifier"
      },
      {
        "value": "'should update filters after 1st render with unmounts'",
        "type": "String"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "applyFilters",
        "type": "Identifier"
      },
      {
        "value": "regex",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Set",
        "type": "Identifier"
      },
      {
        "value": "'dom'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "Foo",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "props",
        "type": "JSXIdentifier"
      },
      {
        "value": "children",
        "type": "JSXIdentifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "h1",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "foo",
        "type": "JSXText"
      },
      {
        "value": "Foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "h1",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "Foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "foo",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "bar",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Add 1 <Fragment> to parent 1'",
        "type": "String"
      },
      {
        "value": "'Add 2 <Foo> to parent 1'",
        "type": "String"
      },
      {
        "value": "'Add 3 <Foo> to parent 2'",
        "type": "String"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "applyFilters",
        "type": "Identifier"
      },
      {
        "value": "regex",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Set",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Remove 2'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Add 4 <div> to parent 1'",
        "type": "String"
      },
      {
        "value": "'Add 5 <Foo> to parent 4'",
        "type": "String"
      },
      {
        "value": "'Add 6 <div> to parent 5'",
        "type": "String"
      },
      {
        "value": "'Add 7 <h1> to parent 6'",
        "type": "String"
      },
      {
        "value": "'Add 3 <Foo> to parent 7'",
        "type": "String"
      },
      {
        "value": "'Add 8 <div> to parent 3'",
        "type": "String"
      },
      {
        "value": "'Add 9 <span> to parent 4'",
        "type": "String"
      },
      {
        "value": "'Add 10 <span> to parent 4'",
        "type": "String"
      },
      {
        "value": "'Update timings 1'",
        "type": "String"
      },
      {
        "value": "renderer",
        "type": "Identifier"
      },
      {
        "value": "applyFilters",
        "type": "Identifier"
      },
      {
        "value": "regex",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Set",
        "type": "Identifier"
      },
      {
        "value": "'dom'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Remove 4'",
        "type": "String"
      },
      {
        "value": "'Remove 5'",
        "type": "String"
      },
      {
        "value": "'Remove 9'",
        "type": "String"
      },
      {
        "value": "'Remove 10'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "toSnapshot",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "deep",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'rootId: 1'",
        "type": "String"
      },
      {
        "value": "'Add 11 <Foo> to parent 1'",
        "type": "String"
      },
      {
        "value": "'Add 3 <Foo> to parent 11'",
        "type": "String"
      },
      {
        "value": "'Update timings 1'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/f71089747102e50b2dc3bbdeefcabee1432ce9a9/test/browser/render.js",
    "commit": "f71089747102e50b2dc3bbdeefcabee1432ce9a9",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/test/browser/render.js",
    "start_line": 424,
    "end_line": 438,
    "test_code": "('HTMLDataListElement' in window ? it : xit)('should allow <input list /> to pass through as an attribute', () => {\n\trender((\n\t\t<div>\n\t\t\t<input type=\"range\" min=\"0\" max=\"100\" list=\"steplist\" />\n\t\t\t<datalist id=\"steplist\">\n\t\t\t\t<option>0</option>\n\t\t\t\t<option>50</option>\n\t\t\t\t<option>100</option>\n\t\t\t</datalist>\n\t\t</div>\n\t), scratch);\n\n\tlet html = scratch.firstElementChild.firstElementChild.outerHTML;\n\texpect(sortAttributes(html)).to.equal(sortAttributes('<input type=\"range\" min=\"0\" max=\"100\" list=\"steplist\">'));\n});\n",
    "tokens": [
      {
        "value": "'HTMLDataListElement'",
        "type": "String"
      },
      {
        "value": "in",
        "type": "Keyword"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "xit",
        "type": "Identifier"
      },
      {
        "value": "'should allow <input list /> to pass through as an attribute'",
        "type": "String"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "input",
        "type": "JSXIdentifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "\"range\"",
        "type": "JSXText"
      },
      {
        "value": "min",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"0\"",
        "type": "JSXText"
      },
      {
        "value": "max",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"100\"",
        "type": "JSXText"
      },
      {
        "value": "list",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"steplist\"",
        "type": "JSXText"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "datalist",
        "type": "JSXIdentifier"
      },
      {
        "value": "id",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"steplist\"",
        "type": "JSXText"
      },
      {
        "value": "\n\t\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "option",
        "type": "JSXIdentifier"
      },
      {
        "value": "0",
        "type": "JSXText"
      },
      {
        "value": "option",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "option",
        "type": "JSXIdentifier"
      },
      {
        "value": "50",
        "type": "JSXText"
      },
      {
        "value": "option",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "option",
        "type": "JSXIdentifier"
      },
      {
        "value": "100",
        "type": "JSXText"
      },
      {
        "value": "option",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t\t",
        "type": "JSXText"
      },
      {
        "value": "datalist",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n\t\t",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "html",
        "type": "Identifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "firstElementChild",
        "type": "Identifier"
      },
      {
        "value": "firstElementChild",
        "type": "Identifier"
      },
      {
        "value": "outerHTML",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "sortAttributes",
        "type": "Identifier"
      },
      {
        "value": "html",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "sortAttributes",
        "type": "Identifier"
      },
      {
        "value": "'<input type=\"range\" min=\"0\" max=\"100\" list=\"steplist\">'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/ba48cd3741bb1266dab6418db19783aa151c182b/test/browser/components.js",
    "commit": "ba48cd3741bb1266dab6418db19783aa151c182b",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/test/browser/components.js",
    "start_line": 288,
    "end_line": 407,
    "test_code": "it('should re-render nested components', () => {\n\tlet doRender = null,\n\t\talt = false;\n\n\tclass Outer extends Component {\n\t\tcomponentDidMount() {\n\t\t\tlet i = 1;\n\t\t\tdoRender = () => this.setState({ i: ++i });\n\t\t}\n\t\tcomponentWillUnmount() { }\n\t\trender(props, { i }) {\n\t\t\tif (alt) return <div is-alt />;\n\t\t\treturn <Inner i={i} {...props} />;\n\t\t}\n\t}\n\tsinon.spy(Outer.prototype, 'render');\n\tsinon.spy(Outer.prototype, 'componentDidMount');\n\tsinon.spy(Outer.prototype, 'componentWillUnmount');\n\n\tlet j = 0;\n\tclass Inner extends Component {\n\t\tconstructor(...args) {\n\t\t\tsuper();\n\t\t\tthis._constructor(...args);\n\t\t}\n\t\t_constructor() { }\n\t\tcomponentWillMount() { }\n\t\tcomponentDidMount() { }\n\t\tcomponentWillUnmount() { }\n\t\tcomponentDidUnmount() { }\n\t\trender(props) {\n\t\t\treturn <div j={++j} {...props}>inner</div>;\n\t\t}\n\t}\n\tsinon.spy(Inner.prototype, '_constructor');\n\tsinon.spy(Inner.prototype, 'render');\n\tsinon.spy(Inner.prototype, 'componentWillMount');\n\tsinon.spy(Inner.prototype, 'componentDidMount');\n\tsinon.spy(Inner.prototype, 'componentDidUnmount');\n\tsinon.spy(Inner.prototype, 'componentWillUnmount');\n\n\trender(<Outer foo=\"bar\" />, scratch);\n\n\texpect(Outer.prototype.componentDidMount).to.have.been.calledOnce;\n\n\t// update & flush\n\tdoRender();\n\trerender();\n\n\texpect(Outer.prototype.componentWillUnmount).not.to.have.been.called;\n\n\texpect(Inner.prototype._constructor).to.have.been.calledOnce;\n\texpect(Inner.prototype.componentWillUnmount).not.to.have.been.called;\n\texpect(Inner.prototype.componentDidUnmount).not.to.have.been.called;\n\texpect(Inner.prototype.componentWillMount).to.have.been.calledOnce;\n\texpect(Inner.prototype.componentDidMount).to.have.been.calledOnce;\n\texpect(Inner.prototype.render).to.have.been.calledTwice;\n\n\texpect(Inner.prototype.render.secondCall)\n\t\t.to.have.been.calledWith({ foo: 'bar', i: 2 })\n\t\t.and.to.have.returned(sinon.match({\n\t\t\tattributes: {\n\t\t\t\tj: 2,\n\t\t\t\ti: 2,\n\t\t\t\tfoo: 'bar'\n\t\t\t}\n\t\t}));\n\n\texpect(getAttributes(scratch.firstElementChild)).to.eql({\n\t\tj: '2',\n\t\ti: '2',\n\t\tfoo: 'bar'\n\t});\n\n\texpect(sortAttributes(scratch.innerHTML)).to.equal(sortAttributes('<div foo=\"bar\" j=\"2\" i=\"2\">inner</div>'));\n\n\t// update & flush\n\tdoRender();\n\trerender();\n\n\texpect(Inner.prototype.componentWillUnmount).not.to.have.been.called;\n\texpect(Inner.prototype.componentDidUnmount).not.to.have.been.called;\n\texpect(Inner.prototype.componentWillMount).to.have.been.calledOnce;\n\texpect(Inner.prototype.componentDidMount).to.have.been.calledOnce;\n\texpect(Inner.prototype.render).to.have.been.calledThrice;\n\n\texpect(Inner.prototype.render.thirdCall)\n\t\t.to.have.been.calledWith({ foo: 'bar', i: 3 })\n\t\t.and.to.have.returned(sinon.match({\n\t\t\tattributes: {\n\t\t\t\tj: 3,\n\t\t\t\ti: 3,\n\t\t\t\tfoo: 'bar'\n\t\t\t}\n\t\t}));\n\n\texpect(getAttributes(scratch.firstElementChild)).to.eql({\n\t\tj: '3',\n\t\ti: '3',\n\t\tfoo: 'bar'\n\t});\n\n\n\t// update & flush\n\talt = true;\n\tdoRender();\n\trerender();\n\n\texpect(Inner.prototype.componentWillUnmount).to.have.been.calledOnce;\n\texpect(Inner.prototype.componentDidUnmount).to.have.been.calledOnce;\n\n\texpect(scratch.innerHTML).to.equal('<div is-alt=\"true\"></div>');\n\n\t// update & flush\n\talt = false;\n\tdoRender();\n\trerender();\n\n\texpect(sortAttributes(scratch.innerHTML)).to.equal(sortAttributes('<div foo=\"bar\" j=\"4\" i=\"5\">inner</div>'));\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should re-render nested components'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "doRender",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "alt",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "class",
        "type": "Keyword"
      },
      {
        "value": "Outer",
        "type": "Identifier"
      },
      {
        "value": "extends",
        "type": "Keyword"
      },
      {
        "value": "Component",
        "type": "Identifier"
      },
      {
        "value": "componentDidMount",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "doRender",
        "type": "Identifier"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "setState",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "alt",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "is-alt",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Inner",
        "type": "JSXIdentifier"
      },
      {
        "value": "i",
        "type": "JSXIdentifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "Outer",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "'render'",
        "type": "String"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "Outer",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "'componentDidMount'",
        "type": "String"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "Outer",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "'componentWillUnmount'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "class",
        "type": "Keyword"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "extends",
        "type": "Keyword"
      },
      {
        "value": "Component",
        "type": "Identifier"
      },
      {
        "value": "constructor",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "super",
        "type": "Keyword"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "_constructor",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "_constructor",
        "type": "Identifier"
      },
      {
        "value": "componentWillMount",
        "type": "Identifier"
      },
      {
        "value": "componentDidMount",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "j",
        "type": "JSXIdentifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "inner",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "'_constructor'",
        "type": "String"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "'render'",
        "type": "String"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "'componentWillMount'",
        "type": "String"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "'componentDidMount'",
        "type": "String"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "'componentDidUnmount'",
        "type": "String"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "'componentWillUnmount'",
        "type": "String"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "Outer",
        "type": "JSXIdentifier"
      },
      {
        "value": "foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"bar\"",
        "type": "JSXText"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Outer",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentDidMount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "doRender",
        "type": "Identifier"
      },
      {
        "value": "rerender",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Outer",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "_constructor",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentWillMount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentDidMount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledTwice",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "secondCall",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledWith",
        "type": "Identifier"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "and",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "returned",
        "type": "Identifier"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "match",
        "type": "Identifier"
      },
      {
        "value": "attributes",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "getAttributes",
        "type": "Identifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "firstElementChild",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eql",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "'2'",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "'2'",
        "type": "String"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "sortAttributes",
        "type": "Identifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "innerHTML",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "sortAttributes",
        "type": "Identifier"
      },
      {
        "value": "'<div foo=\"bar\" j=\"2\" i=\"2\">inner</div>'",
        "type": "String"
      },
      {
        "value": "doRender",
        "type": "Identifier"
      },
      {
        "value": "rerender",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentWillMount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentDidMount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledThrice",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "thirdCall",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledWith",
        "type": "Identifier"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "and",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "returned",
        "type": "Identifier"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "match",
        "type": "Identifier"
      },
      {
        "value": "attributes",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "getAttributes",
        "type": "Identifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "firstElementChild",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eql",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "'3'",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "'3'",
        "type": "String"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "alt",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "doRender",
        "type": "Identifier"
      },
      {
        "value": "rerender",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "innerHTML",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "'<div is-alt=\"true\"></div>'",
        "type": "String"
      },
      {
        "value": "alt",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "doRender",
        "type": "Identifier"
      },
      {
        "value": "rerender",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "sortAttributes",
        "type": "Identifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "innerHTML",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "sortAttributes",
        "type": "Identifier"
      },
      {
        "value": "'<div foo=\"bar\" j=\"4\" i=\"5\">inner</div>'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/0efa8e8bffd8d72b38618d6e00c3058cf129cce0/test/browser/components.js",
    "commit": "0efa8e8bffd8d72b38618d6e00c3058cf129cce0",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/test/browser/components.js",
    "start_line": 362,
    "end_line": 362,
    "test_code": "expect(sortAttributes(scratch.innerHTML)).to.equal(sortAttributes('<div foo=\"bar\" j=\"2\" i=\"2\">inner</div>'));\n",
    "tokens": [
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "sortAttributes",
        "type": "Identifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "innerHTML",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "sortAttributes",
        "type": "Identifier"
      },
      {
        "value": "'<div foo=\"bar\" j=\"2\" i=\"2\">inner</div>'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/0efa8e8bffd8d72b38618d6e00c3058cf129cce0/test/browser/components.js",
    "commit": "0efa8e8bffd8d72b38618d6e00c3058cf129cce0",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/test/browser/components.js",
    "start_line": 218,
    "end_line": 286,
    "test_code": "it('should re-render nested functional components', () => {\n\tlet doRender = null;\n\tclass Outer extends Component {\n\t\tcomponentDidMount() {\n\t\t\tlet i = 1;\n\t\t\tdoRender = () => this.setState({ i: ++i });\n\t\t}\n\t\tcomponentWillUnmount() { }\n\t\trender(props, { i }) {\n\t\t\treturn <Inner i={i} {...props} />;\n\t\t}\n\t}\n\tsinon.spy(Outer.prototype, 'render');\n\tsinon.spy(Outer.prototype, 'componentWillUnmount');\n\n\tlet j = 0;\n\tconst Inner = sinon.spy(\n\t\tprops => <div j={++j} {...props}>inner</div>\n\t);\n\n\trender(<Outer foo=\"bar\" />, scratch);\n\n\t// update & flush\n\tdoRender();\n\trerender();\n\n\texpect(Outer.prototype.componentWillUnmount)\n\t\t.not.to.have.been.called;\n\n\texpect(Inner).to.have.been.calledTwice;\n\n\texpect(Inner.secondCall)\n\t\t.to.have.been.calledWith({ foo: 'bar', i: 2 })\n\t\t.and.to.have.returned(sinon.match({\n\t\t\tattributes: {\n\t\t\t\tj: 2,\n\t\t\t\ti: 2,\n\t\t\t\tfoo: 'bar'\n\t\t\t}\n\t\t}));\n\n\texpect(getAttributes(scratch.firstElementChild)).to.eql({\n\t\tj: '2',\n\t\ti: '2',\n\t\tfoo: 'bar'\n\t});\n\n\t// update & flush\n\tdoRender();\n\trerender();\n\n\texpect(Inner).to.have.been.calledThrice;\n\n\texpect(Inner.thirdCall)\n\t\t.to.have.been.calledWith({ foo: 'bar', i: 3 })\n\t\t.and.to.have.returned(sinon.match({\n\t\t\tattributes: {\n\t\t\t\tj: 3,\n\t\t\t\ti: 3,\n\t\t\t\tfoo: 'bar'\n\t\t\t}\n\t\t}));\n\n\texpect(getAttributes(scratch.firstElementChild)).to.eql({\n\t\tj: '3',\n\t\ti: '3',\n\t\tfoo: 'bar'\n\t});\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should re-render nested functional components'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "doRender",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "class",
        "type": "Keyword"
      },
      {
        "value": "Outer",
        "type": "Identifier"
      },
      {
        "value": "extends",
        "type": "Keyword"
      },
      {
        "value": "Component",
        "type": "Identifier"
      },
      {
        "value": "componentDidMount",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "doRender",
        "type": "Identifier"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "setState",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Inner",
        "type": "JSXIdentifier"
      },
      {
        "value": "i",
        "type": "JSXIdentifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "Outer",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "'render'",
        "type": "String"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "Outer",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "'componentWillUnmount'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "j",
        "type": "JSXIdentifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "inner",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "Outer",
        "type": "JSXIdentifier"
      },
      {
        "value": "foo",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"bar\"",
        "type": "JSXText"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "doRender",
        "type": "Identifier"
      },
      {
        "value": "rerender",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Outer",
        "type": "Identifier"
      },
      {
        "value": "prototype",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledTwice",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "secondCall",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledWith",
        "type": "Identifier"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "and",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "returned",
        "type": "Identifier"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "match",
        "type": "Identifier"
      },
      {
        "value": "attributes",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "getAttributes",
        "type": "Identifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "firstElementChild",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eql",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "'2'",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "'2'",
        "type": "String"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "doRender",
        "type": "Identifier"
      },
      {
        "value": "rerender",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledThrice",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Inner",
        "type": "Identifier"
      },
      {
        "value": "thirdCall",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledWith",
        "type": "Identifier"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "and",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "returned",
        "type": "Identifier"
      },
      {
        "value": "sinon",
        "type": "Identifier"
      },
      {
        "value": "match",
        "type": "Identifier"
      },
      {
        "value": "attributes",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "getAttributes",
        "type": "Identifier"
      },
      {
        "value": "scratch",
        "type": "Identifier"
      },
      {
        "value": "firstElementChild",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eql",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "'3'",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "'3'",
        "type": "String"
      },
      {
        "value": "foo",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/945afe30c537abce36482821ed12e2df5fd98560/test/browser/lifecycle.js",
    "commit": "945afe30c537abce36482821ed12e2df5fd98560",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/test/browser/lifecycle.js",
    "start_line": 256,
    "end_line": 264,
    "test_code": "it('should be invoked for components on unmount', () => {\n\treset();\n\tsetState({ show: false });\n\trerender();\n\n\texpect(proto.componentDidUnmount).to.have.been.called;\n\texpect(proto.componentWillUnmount).to.have.been.calledBefore(proto.componentDidUnmount);\n\texpect(proto.componentDidUnmount).to.have.been.called;\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should be invoked for components on unmount'",
        "type": "String"
      },
      {
        "value": "reset",
        "type": "Identifier"
      },
      {
        "value": "setState",
        "type": "Identifier"
      },
      {
        "value": "show",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "rerender",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledBefore",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/945afe30c537abce36482821ed12e2df5fd98560/test/browser/lifecycle.js",
    "commit": "945afe30c537abce36482821ed12e2df5fd98560",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/test/browser/lifecycle.js",
    "start_line": 334,
    "end_line": 342,
    "test_code": "\nit('should be invoked normally on unmount', () => {\n\tsetState({ show: false });\n\trerender();\n\n\texpect(proto.componentWillUnmount).to.have.been.called;\n\texpect(proto.componentWillUnmount).to.have.been.calledBefore(proto.componentDidUnmount);\n\texpect(proto.componentDidUnmount).to.have.been.called;\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should be invoked normally on unmount'",
        "type": "String"
      },
      {
        "value": "setState",
        "type": "Identifier"
      },
      {
        "value": "show",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "rerender",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledBefore",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/76b7c9a1d84682a9975dfac11bebb510e307f7d3/test/browser/lifecycle.js",
    "commit": "76b7c9a1d84682a9975dfac11bebb510e307f7d3",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/test/browser/lifecycle.js",
    "start_line": 255,
    "end_line": 263,
    "test_code": "flakeyIt('should be invoked for components on unmount', () => {\n\treset();\n\tsetState({ show: false });\n\trerender();\n\n\texpect(proto.componentDidUnmount).to.have.been.called;\n\texpect(proto.componentWillUnmount).to.have.been.calledBefore(proto.componentDidUnmount);\n\texpect(proto.componentDidUnmount).to.have.been.called;\n});\n",
    "tokens": [
      {
        "value": "flakeyIt",
        "type": "Identifier"
      },
      {
        "value": "'should be invoked for components on unmount'",
        "type": "String"
      },
      {
        "value": "reset",
        "type": "Identifier"
      },
      {
        "value": "setState",
        "type": "Identifier"
      },
      {
        "value": "show",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "rerender",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledBefore",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/preactjs/preact/blob/76b7c9a1d84682a9975dfac11bebb510e307f7d3/test/browser/lifecycle.js",
    "commit": "76b7c9a1d84682a9975dfac11bebb510e307f7d3",
    "project_name": "preact",
    "project_author": "preactjs",
    "flaky_file": "/test/browser/lifecycle.js",
    "start_line": 334,
    "end_line": 341,
    "test_code": "flakeyIt('should be invoked normally on unmount', () => {\n\tsetState({ show: false });\n\trerender();\n\n\texpect(proto.componentWillUnmount).to.have.been.called;\n\texpect(proto.componentWillUnmount).to.have.been.calledBefore(proto.componentDidUnmount);\n\texpect(proto.componentDidUnmount).to.have.been.called;\n});\n",
    "tokens": [
      {
        "value": "flakeyIt",
        "type": "Identifier"
      },
      {
        "value": "'should be invoked normally on unmount'",
        "type": "String"
      },
      {
        "value": "setState",
        "type": "Identifier"
      },
      {
        "value": "show",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "rerender",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentWillUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "calledBefore",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "proto",
        "type": "Identifier"
      },
      {
        "value": "componentDidUnmount",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "been",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/mobxjs/mobx/blob/8d63071ad2a7bba7f74aefccc57513ba7ed6f079/test/base/reaction.js",
    "commit": "8d63071ad2a7bba7f74aefccc57513ba7ed6f079",
    "project_name": "mobx",
    "project_author": "mobxjs",
    "flaky_file": "/test/base/reaction.js",
    "start_line": 66,
    "end_line": 107,
    "test_code": "test(\"effect debounce is honored\", () => {\n    expect.assertions(2)\n\n    return new Promise((resolve, reject) => {\n        var a = mobx.observable.box(1)\n        var values = []\n        var exprCount = 0\n\n        var d = reaction(\n            () => {\n                exprCount++\n                return a.get()\n            },\n            newValue => {\n                values.push(newValue)\n            },\n            {\n                delay: 150,\n                fireImmediately: false\n            }\n        )\n\n        setTimeout(() => a.set(2), 40)\n        setTimeout(() => a.set(3), 300) // should not be visible, combined with the next\n        setTimeout(() => a.set(4), 301)\n        setTimeout(() => a.set(5), 600)\n        setTimeout(() => {\n            d()\n            a.set(6)\n        }, 1000)\n\n        setTimeout(() => {\n            try {\n                expect(values).toEqual([2, 4, 5])\n                expect(exprCount).toBe(4)\n                resolve()\n            } catch (e) {\n                reject(e)\n            }\n        }, 1200)\n    })\n})\n",
    "tokens": [
      {
        "value": "test",
        "type": "Identifier"
      },
      {
        "value": "\"effect debounce is honored\"",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "assertions",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Promise",
        "type": "Identifier"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "reject",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "a",
        "type": "Identifier"
      },
      {
        "value": "mobx",
        "type": "Identifier"
      },
      {
        "value": "observable",
        "type": "Identifier"
      },
      {
        "value": "box",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "values",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "exprCount",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "d",
        "type": "Identifier"
      },
      {
        "value": "reaction",
        "type": "Identifier"
      },
      {
        "value": "exprCount",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "a",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "newValue",
        "type": "Identifier"
      },
      {
        "value": "values",
        "type": "Identifier"
      },
      {
        "value": "push",
        "type": "Identifier"
      },
      {
        "value": "newValue",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "fireImmediately",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "a",
        "type": "Identifier"
      },
      {
        "value": "set",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "40",
        "type": "Numeric"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "a",
        "type": "Identifier"
      },
      {
        "value": "set",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "a",
        "type": "Identifier"
      },
      {
        "value": "set",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "301",
        "type": "Numeric"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "a",
        "type": "Identifier"
      },
      {
        "value": "set",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "600",
        "type": "Numeric"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "d",
        "type": "Identifier"
      },
      {
        "value": "a",
        "type": "Identifier"
      },
      {
        "value": "set",
        "type": "Identifier"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "1000",
        "type": "Numeric"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "try",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "values",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "exprCount",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "e",
        "type": "Identifier"
      },
      {
        "value": "reject",
        "type": "Identifier"
      },
      {
        "value": "e",
        "type": "Identifier"
      },
      {
        "value": "1200",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/mobxjs/mobx/blob/03a087452ad7d6c1b5e2b13239bba5d95a0d7768/test/extras.js",
    "commit": "03a087452ad7d6c1b5e2b13239bba5d95a0d7768",
    "project_name": "mobx",
    "project_author": "mobxjs",
    "flaky_file": "/test/extras.js",
    "start_line": 301,
    "end_line": 320,
    "test_code": "test('strict mode checks', function (t) {\n    var x = mobx.observable(3);\n\n    mobx.extras.allowStateChanges(false, function () {\n        x.get();\n    });\n\n    mobx.extras.allowStateChanges(true, function () {\n        x.set(7);\n    });\n\n    t.throws(function () {\n        mobx.extras.allowStateChanges(false, function () {\n            x.set(4);\n        });\n    });\n\n    mobx.extras.resetGlobalState();\n    t.end();\n});\n",
    "tokens": [
      {
        "value": "test",
        "type": "Identifier"
      },
      {
        "value": "'strict mode checks'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "mobx",
        "type": "Identifier"
      },
      {
        "value": "observable",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "mobx",
        "type": "Identifier"
      },
      {
        "value": "extras",
        "type": "Identifier"
      },
      {
        "value": "allowStateChanges",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "mobx",
        "type": "Identifier"
      },
      {
        "value": "extras",
        "type": "Identifier"
      },
      {
        "value": "allowStateChanges",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "set",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "throws",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "mobx",
        "type": "Identifier"
      },
      {
        "value": "extras",
        "type": "Identifier"
      },
      {
        "value": "allowStateChanges",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "set",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "mobx",
        "type": "Identifier"
      },
      {
        "value": "extras",
        "type": "Identifier"
      },
      {
        "value": "resetGlobalState",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "end",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/enzymejs/enzyme/blob/b8289d02355882c57bf334ce001307807a674661/packages/enzyme-test-suite/test/shared/hooks/useEffect.jsx",
    "commit": "b8289d02355882c57bf334ce001307807a674661",
    "project_name": "enzyme",
    "project_author": "enzymejs",
    "flaky_file": "/packages/enzyme-test-suite/test/shared/hooks/useEffect.jsx",
    "start_line": 263,
    "end_line": 271,
    "test_code": "itIf.skip(is('> 16.8.3'), 'cleanup on unmount', () => {\n  const wrapper = Wrap(<FriendStatus friend={friend} />);\n\n  wrapper.unmount();\n\n  expect(ChatAPI.unsubscribeFromFriendStatus).to.have.property('callCount', 1);\n  const [[firstArg]] = ChatAPI.unsubscribeFromFriendStatus.args;\n  expect(firstArg).to.equal(friend.id);\n});\n",
    "tokens": [
      {
        "value": "itIf",
        "type": "Identifier"
      },
      {
        "value": "skip",
        "type": "Identifier"
      },
      {
        "value": "is",
        "type": "Identifier"
      },
      {
        "value": "'> 16.8.3'",
        "type": "String"
      },
      {
        "value": "'cleanup on unmount'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "Wrap",
        "type": "Identifier"
      },
      {
        "value": "FriendStatus",
        "type": "JSXIdentifier"
      },
      {
        "value": "friend",
        "type": "JSXIdentifier"
      },
      {
        "value": "friend",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "unmount",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "ChatAPI",
        "type": "Identifier"
      },
      {
        "value": "unsubscribeFromFriendStatus",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "property",
        "type": "Identifier"
      },
      {
        "value": "'callCount'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "firstArg",
        "type": "Identifier"
      },
      {
        "value": "ChatAPI",
        "type": "Identifier"
      },
      {
        "value": "unsubscribeFromFriendStatus",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "firstArg",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "friend",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/e0165303ed2d62d751222940dcde431b41895ca9/ui/cypress/e2e/explorer.test.ts ",
    "commit": "e0165303ed2d62d751222940dcde431b41895ca9",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/explorer.test.ts",
    "start_line": 365,
    "end_line": 376,
    "test_code": "it('enables the submit button when a query is typed', () => {\n  cy.getByTestID('time-machine-submit-button').should('be.disabled')\n\n  cy.getByTestID('flux-editor').within(() => {\n    cy.get('.react-monaco-editor-container')\n      .should('be.visible')\n      .click()\n      .focused()\n      .type('yo', { force: true, delay: TYPE_DELAY })\n    cy.getByTestID('time-machine-submit-button').should('not.be.disabled')\n  })\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'enables the submit button when a query is typed'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.disabled'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-editor'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.react-monaco-editor-container'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "focused",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'yo'",
        "type": "String"
      },
      {
        "value": "force",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "TYPE_DELAY",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'not.be.disabled'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/e0165303ed2d62d751222940dcde431b41895ca9/ui/cypress/e2e/explorer.test.ts ",
    "commit": "e0165303ed2d62d751222940dcde431b41895ca9",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/explorer.test.ts",
    "start_line": 378,
    "end_line": 396,
    "test_code": "it('disables submit when a query is deleted', () => {\n  cy.getByTestID('time-machine--bottom').then(() => {\n    cy.get('.react-monaco-editor-container')\n      .should('be.visible')\n      .click()\n      .focused()\n      .type('from(bucket: \"foo\")', { force: true, delay: TYPE_DELAY })\n\n    cy.getByTestID('time-machine-submit-button').should('not.be.disabled')\n\n    cy.get('.react-monaco-editor-container')\n      .should('be.visible')\n      .click()\n      .focused()\n      .type('{selectall} {backspace}', { force: true, delay: TYPE_DELAY })\n  })\n\n  cy.getByTestID('time-machine-submit-button').should('be.disabled')\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'disables submit when a query is deleted'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine--bottom'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.react-monaco-editor-container'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "focused",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'from(bucket: \"foo\")'",
        "type": "String"
      },
      {
        "value": "force",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "TYPE_DELAY",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'not.be.disabled'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.react-monaco-editor-container'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "focused",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'{selectall} {backspace}'",
        "type": "String"
      },
      {
        "value": "force",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "TYPE_DELAY",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.disabled'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/e0165303ed2d62d751222940dcde431b41895ca9/ui/cypress/e2e/explorer.test.ts ",
    "commit": "e0165303ed2d62d751222940dcde431b41895ca9",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/explorer.test.ts",
    "start_line": 459,
    "end_line": 475,
    "test_code": "it.skip('shows the empty state when the query returns no results', () => {\n  cy.getByTestID('time-machine--bottom').within(() => {\n    cy.get('.react-monaco-editor-container')\n      .should('be.visible')\n      .click()\n      .focused()\n      .type(\n        `from(bucket: \"defbuck\")\n  |> range(start: -10s)\n  |> filter(fn: (r) => r._measurement == \"no exist\")`,\n        { force: true, delay: TYPE_DELAY }\n      )\n    cy.getByTestID('time-machine-submit-button').click()\n  })\n\n  cy.getByTestID('empty-graph--no-results').should('exist')\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "skip",
        "type": "Identifier"
      },
      {
        "value": "'shows the empty state when the query returns no results'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine--bottom'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.react-monaco-editor-container'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "focused",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "`from(bucket: \"defbuck\")\n  |> range(start: -10s)\n  |> filter(fn: (r) => r._measurement == \"no exist\")`",
        "type": "Template"
      },
      {
        "value": "force",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "TYPE_DELAY",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'empty-graph--no-results'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/e0165303ed2d62d751222940dcde431b41895ca9/ui/cypress/e2e/explorer.test.ts ",
    "commit": "e0165303ed2d62d751222940dcde431b41895ca9",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/explorer.test.ts",
    "start_line": 477,
    "end_line": 514,
    "test_code": "it('can save query as task even when it has a variable', () => {\n  const taskName = 'tax'\n  // begin flux\n  cy.getByTestID('flux-editor').within(() => {\n    cy.get('.react-monaco-editor-container')\n      .should('be.visible')\n      .click()\n      .focused()\n      .type(\n        `from(bucket: \"defbuck\")\n  |> range(start: -15m, stop: now())\n  |> filter(fn: (r) => r._measurement == `,\n        { force: true, delay: TYPE_DELAY }\n      )\n  })\n\n  cy.getByTestID('toolbar-tab').click()\n  //insert variable name by clicking on variable\n  cy.get('.variables-toolbar--label').click()\n  // finish flux\n  cy.getByTestID('flux-editor').within(() => {\n    cy.get('.react-monaco-editor-container')\n      .should('exist')\n      .click()\n      .focused()\n      .type(`)`, { force: true, delay: TYPE_DELAY })\n  })\n\n  cy.getByTestID('save-query-as').click()\n  cy.getByTestID('task--radio-button').click()\n  cy.getByTestID('task-form-name').type(taskName)\n  cy.getByTestID('task-form-schedule-input').type('4h')\n  cy.getByTestID('task-form-save').click()\n\n  cy.getByTestID(`task-card`)\n    .should('exist')\n    .should('contain', taskName)\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can save query as task even when it has a variable'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "taskName",
        "type": "Identifier"
      },
      {
        "value": "'tax'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-editor'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.react-monaco-editor-container'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "focused",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "`from(bucket: \"defbuck\")\n  |> range(start: -15m, stop: now())\n  |> filter(fn: (r) => r._measurement == `",
        "type": "Template"
      },
      {
        "value": "force",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "TYPE_DELAY",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'toolbar-tab'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.variables-toolbar--label'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-editor'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.react-monaco-editor-container'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "focused",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "`)`",
        "type": "Template"
      },
      {
        "value": "force",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "TYPE_DELAY",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'save-query-as'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task--radio-button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-form-name'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "taskName",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-form-schedule-input'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'4h'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-form-save'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`task-card`",
        "type": "Template"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "taskName",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/5d4248e06517791510a515bf805570cb5e49785b/ui/cypress/e2e/onboarding.test.ts",
    "commit": "5d4248e06517791510a515bf805570cb5e49785b",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/onboarding.test.ts",
    "start_line": 20,
    "end_line": 127,
    "test_code": "describe('Onboarding', () => {\n  let user: TestUser\n\n  beforeEach(() => {\n    cy.flush()\n\n    cy.fixture('user').then(u => {\n      user = u\n    })\n\n    cy.visit('onboarding/0')\n  })\n\n  it('Can Onboard to Quick Start', () => {\n    cy.server()\n\n    //Will want to capture response from this\n    cy.route('POST', 'api/v2/setup').as('orgSetup')\n\n    //Check and visit splash page\n    cy.getByTestID('init-step--head-main').contains('Welcome to InfluxDB 2.0')\n    cy.getByTestID('credits').contains('Powered by')\n    cy.getByTestID('credits').contains('InfluxData')\n\n    //Continue\n    cy.getByTestID('onboarding-get-started').click()\n\n    cy.location('pathname').should('include', 'onboarding/1')\n\n    //Check navigation bar\n    cy.getByTestID('nav-step--welcome').click()\n\n    //Check splash page\n    cy.getByTestID('init-step--head-main').contains('Welcome to InfluxDB 2.0')\n    cy.getByTestID('credits').contains('Powered by')\n    cy.getByTestID('credits').contains('InfluxData')\n\n    //Continue\n    cy.getByTestID('onboarding-get-started').click()\n\n    //Check onboarding page - nav bar\n    cy.getByTestID('nav-step--welcome').contains('Welcome')\n    cy.getByTestID('nav-step--welcome')\n      .parent()\n      .children('span')\n      .should($span => {\n        expect($span).to.have.class('checkmark')\n      })\n\n    cy.getByTestID('nav-step--setup')\n      .contains('Initial User Setup')\n      .should('be.visible')\n    cy.getByTestID('nav-step--setup').should('have.class', 'current')\n\n    cy.getByTestID('nav-step--complete')\n      .parent()\n      .should($el => {\n        expect($el).to.have.class('unclickable')\n      })\n\n    //Check onboarding page headers and controls\n    cy.getByTestID('admin-step--head-main').contains('Setup Initial User')\n\n    cy.getByTestID('next').should('be.disabled')\n\n    cy.getByTestID('next')\n      .children('.cf-button--label')\n      .contains('Continue')\n\n    //Input fields\n    cy.getByTestID('input-field--username').type(user.username)\n    cy.getByTestID('input-field--password').type(user.password)\n    cy.getByTestID('input-field--password-chk').type(user.password)\n    cy.getByTestID('input-field--orgname').type(user.org)\n    cy.getByTestID('input-field--bucketname').type(user.bucket)\n\n    cy.getByTestID('next')\n      .children('.cf-button--label')\n      .contains('Continue')\n\n    cy.getByTestID('next')\n      .should('be.enabled')\n      .click()\n\n    cy.wait('@orgSetup')\n\n    cy.get('@orgSetup').then(xhr => {\n      const orgId: string = xhr.responseBody.org.id\n\n      //wait for new page to load\n      cy.location('pathname').should('include', 'onboarding/2')\n\n      //check navbar\n      cy.getByTestID('nav-step--complete').should('have.class', 'current')\n\n      cy.getByTestID('nav-step--welcome').should('have.class', 'checkmark')\n      cy.getByTestID('nav-step--setup').should('have.class', 'checkmark')\n\n      cy.getByTestID('button--advanced').should('be.visible')\n\n      cy.getByTestID('button--conf-later').should('be.visible')\n\n      //advance to Quick Start\n      cy.getByTestID('button--quick-start').click()\n\n      cy.location('pathname').should('equal', '/orgs/' + orgId)\n    })\n  })\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'Onboarding'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "TestUser",
        "type": "Identifier"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "flush",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "'user'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "u",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "u",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "visit",
        "type": "Identifier"
      },
      {
        "value": "'onboarding/0'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'Can Onboard to Quick Start'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "server",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "route",
        "type": "Identifier"
      },
      {
        "value": "'POST'",
        "type": "String"
      },
      {
        "value": "'api/v2/setup'",
        "type": "String"
      },
      {
        "value": "as",
        "type": "Identifier"
      },
      {
        "value": "'orgSetup'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'init-step--head-main'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Welcome to InfluxDB 2.0'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'credits'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Powered by'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'credits'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'InfluxData'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'onboarding-get-started'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "location",
        "type": "Identifier"
      },
      {
        "value": "'pathname'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'include'",
        "type": "String"
      },
      {
        "value": "'onboarding/1'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'nav-step--welcome'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'init-step--head-main'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Welcome to InfluxDB 2.0'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'credits'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Powered by'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'credits'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'InfluxData'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'onboarding-get-started'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'nav-step--welcome'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Welcome'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'nav-step--welcome'",
        "type": "String"
      },
      {
        "value": "parent",
        "type": "Identifier"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "'span'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "$span",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "$span",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "class",
        "type": "Keyword"
      },
      {
        "value": "'checkmark'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'nav-step--setup'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Initial User Setup'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'nav-step--setup'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.class'",
        "type": "String"
      },
      {
        "value": "'current'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'nav-step--complete'",
        "type": "String"
      },
      {
        "value": "parent",
        "type": "Identifier"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "$el",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "$el",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "have",
        "type": "Identifier"
      },
      {
        "value": "class",
        "type": "Keyword"
      },
      {
        "value": "'unclickable'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'admin-step--head-main'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Setup Initial User'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'next'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.disabled'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'next'",
        "type": "String"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "'.cf-button--label'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Continue'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--username'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "username",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--password'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "password",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--password-chk'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "password",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--orgname'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--bucketname'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "bucket",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'next'",
        "type": "String"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "'.cf-button--label'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Continue'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'next'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.enabled'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "'@orgSetup'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@orgSetup'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "xhr",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "orgId",
        "type": "Identifier"
      },
      {
        "value": "string",
        "type": "Identifier"
      },
      {
        "value": "xhr",
        "type": "Identifier"
      },
      {
        "value": "responseBody",
        "type": "Identifier"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "location",
        "type": "Identifier"
      },
      {
        "value": "'pathname'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'include'",
        "type": "String"
      },
      {
        "value": "'onboarding/2'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'nav-step--complete'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.class'",
        "type": "String"
      },
      {
        "value": "'current'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'nav-step--welcome'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.class'",
        "type": "String"
      },
      {
        "value": "'checkmark'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'nav-step--setup'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.class'",
        "type": "String"
      },
      {
        "value": "'checkmark'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'button--advanced'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'button--conf-later'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'button--quick-start'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "location",
        "type": "Identifier"
      },
      {
        "value": "'pathname'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'equal'",
        "type": "String"
      },
      {
        "value": "'/orgs/'",
        "type": "String"
      },
      {
        "value": "orgId",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/5d4248e06517791510a515bf805570cb5e49785b/ui/cypress/e2e/onboarding.test.ts",
    "commit": "5d4248e06517791510a515bf805570cb5e49785b",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/onboarding.test.ts",
    "start_line": 129,
    "end_line": 164,
    "test_code": "  it('Can onboard to advanced', () => {\n    cy.server()\n\n    cy.route('POST', 'api/v2/setup').as('orgSetup')\n\n    //Continue\n    cy.getByTestID('onboarding-get-started').click()\n    cy.location('pathname').should('include', 'onboarding/1')\n\n    //Input fields\n    cy.getByTestID('input-field--username').type(user.username)\n    cy.getByTestID('input-field--password').type(user.password)\n    cy.getByTestID('input-field--password-chk').type(user.password)\n    cy.getByTestID('input-field--orgname').type(user.org)\n    cy.getByTestID('input-field--bucketname').type(user.bucket)\n\n    cy.getByTestID('next').click()\n\n    cy.wait('@orgSetup')\n\n    cy.get('@orgSetup').then(xhr => {\n      const orgId: string = xhr.responseBody.org.id\n\n      //wait for new page to load\n      cy.location('pathname').should('include', 'onboarding/2')\n\n      //advance to Advanced\n      cy.getByTestID('button--advanced').click()\n\n      //wait for new page to load\n\n      cy.location('pathname').should('match', /orgs\\/.*\\/buckets/)\n\n      cy.location('pathname').should('include', orgId)\n    })\n  })\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'Can onboard to advanced'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "server",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "route",
        "type": "Identifier"
      },
      {
        "value": "'POST'",
        "type": "String"
      },
      {
        "value": "'api/v2/setup'",
        "type": "String"
      },
      {
        "value": "as",
        "type": "Identifier"
      },
      {
        "value": "'orgSetup'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'onboarding-get-started'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "location",
        "type": "Identifier"
      },
      {
        "value": "'pathname'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'include'",
        "type": "String"
      },
      {
        "value": "'onboarding/1'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--username'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "username",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--password'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "password",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--password-chk'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "password",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--orgname'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--bucketname'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "bucket",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'next'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "'@orgSetup'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@orgSetup'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "xhr",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "orgId",
        "type": "Identifier"
      },
      {
        "value": "string",
        "type": "Identifier"
      },
      {
        "value": "xhr",
        "type": "Identifier"
      },
      {
        "value": "responseBody",
        "type": "Identifier"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "location",
        "type": "Identifier"
      },
      {
        "value": "'pathname'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'include'",
        "type": "String"
      },
      {
        "value": "'onboarding/2'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'button--advanced'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "location",
        "type": "Identifier"
      },
      {
        "value": "'pathname'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'match'",
        "type": "String"
      },
      {
        "value": "/orgs\\/.*\\/buckets/",
        "type": "RegularExpression"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "location",
        "type": "Identifier"
      },
      {
        "value": "'pathname'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'include'",
        "type": "String"
      },
      {
        "value": "orgId",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/5d4248e06517791510a515bf805570cb5e49785b/ui/cypress/e2e/onboarding.test.ts",
    "commit": "5d4248e06517791510a515bf805570cb5e49785b",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/onboarding.test.ts",
    "start_line": 166,
    "end_line": 197,
    "test_code": "  it('Can onboard to configure later', () => {\n    cy.server()\n\n    cy.route('POST', 'api/v2/setup').as('orgSetup')\n\n    //Continue\n    cy.getByTestID('onboarding-get-started').click()\n    cy.location('pathname').should('include', 'onboarding/1')\n\n    //Input fields\n    cy.getByTestID('input-field--username').type(user.username)\n    cy.getByTestID('input-field--password').type(user.password)\n    cy.getByTestID('input-field--password-chk').type(user.password)\n    cy.getByTestID('input-field--orgname').type(user.org)\n    cy.getByTestID('input-field--bucketname').type(user.bucket)\n\n    cy.getByTestID('next').click()\n\n    cy.wait('@orgSetup')\n\n    cy.get('@orgSetup').then(xhr => {\n      const orgId: string = xhr.responseBody.org.id\n      //wait for new page to load\n\n      cy.location('pathname').should('include', 'onboarding/2')\n\n      //advance to Advanced\n      cy.getByTestID('button--conf-later').click()\n\n      cy.location('pathname').should('include', orgId)\n    })\n  })\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'Can onboard to configure later'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "server",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "route",
        "type": "Identifier"
      },
      {
        "value": "'POST'",
        "type": "String"
      },
      {
        "value": "'api/v2/setup'",
        "type": "String"
      },
      {
        "value": "as",
        "type": "Identifier"
      },
      {
        "value": "'orgSetup'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'onboarding-get-started'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "location",
        "type": "Identifier"
      },
      {
        "value": "'pathname'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'include'",
        "type": "String"
      },
      {
        "value": "'onboarding/1'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--username'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "username",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--password'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "password",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--password-chk'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "password",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--orgname'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'input-field--bucketname'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "bucket",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'next'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "'@orgSetup'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@orgSetup'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "xhr",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "orgId",
        "type": "Identifier"
      },
      {
        "value": "string",
        "type": "Identifier"
      },
      {
        "value": "xhr",
        "type": "Identifier"
      },
      {
        "value": "responseBody",
        "type": "Identifier"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "location",
        "type": "Identifier"
      },
      {
        "value": "'pathname'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'include'",
        "type": "String"
      },
      {
        "value": "'onboarding/2'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'button--conf-later'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "location",
        "type": "Identifier"
      },
      {
        "value": "'pathname'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'include'",
        "type": "String"
      },
      {
        "value": "orgId",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/138caab0a2a9175763be47e6b37d8ddc53eb4ae4/ui/cypress/e2e/explorer.test.ts",
    "commit": "138caab0a2a9175763be47e6b37d8ddc53eb4ae4",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/explorer.test.ts",
    "start_line": 352,
    "end_line": 492,
    "test_code": "describe('raw script editing', () => {\n  beforeEach(() => {\n    cy.getByTestID('switch-to-script-editor').click()\n  })\n\n  it('enables the submit button when a query is typed', () => {\n    cy.getByTestID('time-machine-submit-button').should('be.disabled')\n\n    cy.getByTestID('flux-editor').within(() => {\n      cy.get('.CodeMirror').type('yo')\n      cy.getByTestID('time-machine-submit-button').should('not.be.disabled')\n    })\n  })\n\n  it('disables submit when a query is deleted', () => {\n    cy.getByTestID('time-machine--bottom').then(() => {\n      cy.get('.CodeMirror').type('from(bucket: \"foo\")')\n      cy.getByTestID('time-machine-submit-button').should('not.be.disabled')\n      cy.get('.CodeMirror').type('{selectall} {backspace}')\n    })\n\n    cy.getByTestID('time-machine-submit-button').should('be.disabled')\n  })\n\n  it('imports the appropriate packages to build a query', () => {\n    cy.getByTestID('functions-toolbar-tab').click()\n\n    cy.get<$CM>('.CodeMirror').then($cm => {\n      const cm = $cm[0].CodeMirror\n      cy.wrap(cm.doc).as('flux')\n      expect(cm.doc.getValue()).to.eq('')\n    })\n\n    cy.getByTestID('flux-function from').click()\n    cy.getByTestID('flux-function range').click()\n    cy.getByTestID('flux-function math.abs').click()\n    cy.getByTestID('flux-function math.floor').click()\n    cy.getByTestID('flux-function strings.title').click()\n    cy.getByTestID('flux-function strings.trim').click()\n\n    cy.get<Doc>('@flux').then(doc => {\n      const actual = doc.getValue()\n      const expected = `\n        import\"${STRINGS_TITLE.package}\"\n        import\"${MATH_ABS.package}\"\n        ${FROM.example}|>\n        ${RANGE.example}|>\n        ${MATH_ABS.example}|>\n        ${MATH_FLOOR.example}|>\n        ${STRINGS_TITLE.example}|>\n        ${STRINGS_TRIM.example}`\n\n      cy.fluxEqual(actual, expected).should('be.true')\n    })\n  })\n\n  it('can use the function selector to build a query', () => {\n    cy.getByTestID('functions-toolbar-tab').click()\n\n    cy.get<$CM>('.CodeMirror').then($cm => {\n      const cm = $cm[0].CodeMirror\n      cy.wrap(cm.doc).as('flux')\n      expect(cm.doc.getValue()).to.eq('')\n    })\n\n    cy.getByTestID('flux-function from').click()\n\n    cy.get<Doc>('@flux').then(doc => {\n      const actual = doc.getValue()\n      const expected = FROM.example\n\n      cy.fluxEqual(actual, expected).should('be.true')\n    })\n\n    cy.getByTestID('flux-function range').click()\n\n    cy.get<Doc>('@flux').then(doc => {\n      const actual = doc.getValue()\n      const expected = `${FROM.example}|>${RANGE.example}`\n\n      cy.fluxEqual(actual, expected).should('be.true')\n    })\n\n    cy.getByTestID('flux-function mean').click()\n\n    cy.get<Doc>('@flux').then(doc => {\n      const actual = doc.getValue()\n      const expected = `${FROM.example}|>${RANGE.example}|>${MEAN.example}`\n\n      cy.fluxEqual(actual, expected).should('be.true')\n    })\n  })\n\n  it('can filter aggregation functions by name from script editor mode', () => {\n    cy.get('.cf-input-field').type('covariance')\n    cy.getByTestID('toolbar-function').should('have.length', 1)\n  })\n\n  it('shows the empty state when the query returns no results', () => {\n    cy.getByTestID('time-machine--bottom').within(() => {\n      cy.get('.CodeMirror').type(\n        `from(bucket: \"defbuck\")\n  |> range(start: -10s)\n  |> filter(fn: (r) => r._measurement == \"no exist\")`\n      )\n      cy.getByTestID('time-machine-submit-button').click()\n    })\n\n    cy.getByTestID('empty-graph--no-results').should('exist')\n  })\n\n  it('can save query as task even when it has a variable', () => {\n    const taskName = 'tax'\n    // begin flux\n    cy.getByTestID('flux-editor').within(() => {\n      cy.get('.CodeMirror').type(\n        `from(bucket: \"defbuck\")\n  |> range(start: -15m, stop: now())\n  |> filter(fn: (r) => r._measurement == `\n      )\n    })\n\n    cy.getByTestID('toolbar-tab').click()\n    //insert variable name by clicking on variable\n    cy.get('.variables-toolbar--label').click()\n    // finish flux\n    cy.getByTestID('flux-editor').within(() => {\n      cy.get('.CodeMirror').type(`)`)\n    })\n\n    cy.getByTestID('save-query-as').click()\n    cy.getByTestID('task--radio-button').click()\n    cy.getByTestID('task-form-name').type(taskName)\n    cy.getByTestID('task-form-schedule-input').type('4h')\n    cy.getByTestID('task-form-save').click()\n\n    cy.getByTestID(`task-card`)\n      .should('exist')\n      .should('contain', taskName)\n  })\n})\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'raw script editing'",
        "type": "String"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'switch-to-script-editor'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'enables the submit button when a query is typed'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.disabled'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-editor'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.CodeMirror'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'yo'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'not.be.disabled'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'disables submit when a query is deleted'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine--bottom'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.CodeMirror'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'from(bucket: \"foo\")'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'not.be.disabled'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.CodeMirror'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'{selectall} {backspace}'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.disabled'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'imports the appropriate packages to build a query'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'functions-toolbar-tab'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "$CM",
        "type": "Identifier"
      },
      {
        "value": "'.CodeMirror'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "$cm",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "cm",
        "type": "Identifier"
      },
      {
        "value": "$cm",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "CodeMirror",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "wrap",
        "type": "Identifier"
      },
      {
        "value": "cm",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "as",
        "type": "Identifier"
      },
      {
        "value": "'flux'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "cm",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "getValue",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eq",
        "type": "Identifier"
      },
      {
        "value": "''",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-function from'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-function range'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-function math.abs'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-function math.floor'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-function strings.title'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-function strings.trim'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "Doc",
        "type": "Identifier"
      },
      {
        "value": "'@flux'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "getValue",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "`\n        import\"${",
        "type": "Template"
      },
      {
        "value": "STRINGS_TITLE",
        "type": "Identifier"
      },
      {
        "value": "package",
        "type": "Identifier"
      },
      {
        "value": "}\"\n        import\"${",
        "type": "Template"
      },
      {
        "value": "MATH_ABS",
        "type": "Identifier"
      },
      {
        "value": "package",
        "type": "Identifier"
      },
      {
        "value": "}\"\n        ${",
        "type": "Template"
      },
      {
        "value": "FROM",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "}|>\n        ${",
        "type": "Template"
      },
      {
        "value": "RANGE",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "}|>\n        ${",
        "type": "Template"
      },
      {
        "value": "MATH_ABS",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "}|>\n        ${",
        "type": "Template"
      },
      {
        "value": "MATH_FLOOR",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "}|>\n        ${",
        "type": "Template"
      },
      {
        "value": "STRINGS_TITLE",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "}|>\n        ${",
        "type": "Template"
      },
      {
        "value": "STRINGS_TRIM",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "fluxEqual",
        "type": "Identifier"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.true'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can use the function selector to build a query'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'functions-toolbar-tab'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "$CM",
        "type": "Identifier"
      },
      {
        "value": "'.CodeMirror'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "$cm",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "cm",
        "type": "Identifier"
      },
      {
        "value": "$cm",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "CodeMirror",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "wrap",
        "type": "Identifier"
      },
      {
        "value": "cm",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "as",
        "type": "Identifier"
      },
      {
        "value": "'flux'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "cm",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "getValue",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eq",
        "type": "Identifier"
      },
      {
        "value": "''",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-function from'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "Doc",
        "type": "Identifier"
      },
      {
        "value": "'@flux'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "getValue",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "FROM",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "fluxEqual",
        "type": "Identifier"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.true'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-function range'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "Doc",
        "type": "Identifier"
      },
      {
        "value": "'@flux'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "getValue",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "FROM",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "}|>${",
        "type": "Template"
      },
      {
        "value": "RANGE",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "fluxEqual",
        "type": "Identifier"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.true'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-function mean'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "Doc",
        "type": "Identifier"
      },
      {
        "value": "'@flux'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "doc",
        "type": "Identifier"
      },
      {
        "value": "getValue",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "FROM",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "}|>${",
        "type": "Template"
      },
      {
        "value": "RANGE",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "}|>${",
        "type": "Template"
      },
      {
        "value": "MEAN",
        "type": "Identifier"
      },
      {
        "value": "example",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "fluxEqual",
        "type": "Identifier"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.true'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can filter aggregation functions by name from script editor mode'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.cf-input-field'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'covariance'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'toolbar-function'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'shows the empty state when the query returns no results'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine--bottom'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.CodeMirror'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "`from(bucket: \"defbuck\")\n  |> range(start: -10s)\n  |> filter(fn: (r) => r._measurement == \"no exist\")`",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'empty-graph--no-results'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can save query as task even when it has a variable'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "taskName",
        "type": "Identifier"
      },
      {
        "value": "'tax'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-editor'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.CodeMirror'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "`from(bucket: \"defbuck\")\n  |> range(start: -15m, stop: now())\n  |> filter(fn: (r) => r._measurement == `",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'toolbar-tab'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.variables-toolbar--label'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'flux-editor'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.CodeMirror'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "`)`",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'save-query-as'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task--radio-button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-form-name'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "taskName",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-form-schedule-input'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'4h'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-form-save'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`task-card`",
        "type": "Template"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "taskName",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/63b81291887f87e821ba6e8c250f1efaf920d57b/ui/cypress/e2e/explorer.test.ts",
    "commit": "63b81291887f87e821ba6e8c250f1efaf920d57b",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/explorer.test.ts",
    "start_line": 553,
    "end_line": 633,
    "test_code": "describe('visualize with 360 lines', () => {\n  const numLines = 360\n  beforeEach(() => {\n    // POST 360 lines to the server\n    cy.writeData(lines(numLines))\n  })\n\n  it('can view time-series data', () => {\n    // build the query to return data from beforeEach\n    cy.getByTestID(`selector-list m`).click()\n    cy.getByTestID('selector-list v').click()\n    cy.getByTestID(`selector-list tv1`).click()\n    cy.getByTestID('selector-list max').click()\n\n    cy.getByTestID('time-machine-submit-button').click()\n\n    // cycle through all the visualizations of the data\n    VIS_TYPES.forEach(({ type }) => {\n      cy.getByTestID('view-type--dropdown').click()\n      cy.getByTestID(`view-type--${type}`).click()\n      cy.getByTestID(`vis-graphic--${type}`).should('exist')\n      if (type.includes('single-stat')) {\n        cy.getByTestID('single-stat--text').should('contain', `${numLines}`)\n      }\n    })\n\n    // view raw data table\n    cy.getByTestID('raw-data--toggle').click()\n    cy.getByTestID('raw-data-table').should('exist')\n    cy.getByTestID('raw-data--toggle').click()\n  })\n\n  it('can view table data & sort values numerically', () => {\n    // build the query to return data from beforeEach\n    cy.getByTestID(`selector-list m`).click()\n    cy.getByTestID('selector-list v').click()\n    cy.getByTestID(`selector-list tv1`).click()\n    cy.getByTestID('selector-list sort').click()\n\n    cy.getByTestID('time-machine-submit-button').click()\n\n    cy.getByTestID('view-type--dropdown').click()\n    cy.getByTestID(`view-type--table`).click()\n    // check to see that the FE rows are NOT sorted with flux sort\n    cy.get('.table-graph-cell__sort-asc').should('not.exist')\n    cy.get('.table-graph-cell__sort-desc').should('not.exist')\n    cy.getByTestID('_value-table-header')\n      .should('exist')\n      .then(el => {\n        // get the column index\n        const columnIndex = el[0].getAttribute('data-column-index')\n        let prev = -Infinity\n        // get all the column values for that one and see if they are in order\n        cy.get(`[data-column-index=\"${columnIndex}\"]`).each(val => {\n          const num = Number(val.text())\n          if (isNaN(num) === false) {\n            expect(num > prev).to.equal(true)\n            prev = num\n          }\n        })\n      })\n    cy.getByTestID('_value-table-header').click()\n    cy.get('.table-graph-cell__sort-asc').should('exist')\n    cy.getByTestID('_value-table-header').click()\n    cy.get('.table-graph-cell__sort-desc').should('exist')\n    cy.getByTestID('_value-table-header').then(el => {\n      // get the column index\n      const columnIndex = el[0].getAttribute('data-column-index')\n      let prev = Infinity\n      // get all the column values for that one and see if they are in order\n      cy.get(`[data-column-index=\"${columnIndex}\"]`).each(val => {\n        const num = Number(val.text())\n        if (isNaN(num) === false) {\n          expect(num < prev).to.equal(true)\n          prev = num\n        }\n      })\n    })\n  })\n})\n  })\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'visualize with 360 lines'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "numLines",
        "type": "Identifier"
      },
      {
        "value": "360",
        "type": "Numeric"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "writeData",
        "type": "Identifier"
      },
      {
        "value": "lines",
        "type": "Identifier"
      },
      {
        "value": "numLines",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can view time-series data'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`selector-list m`",
        "type": "Template"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'selector-list v'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`selector-list tv1`",
        "type": "Template"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'selector-list max'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "VIS_TYPES",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'view-type--dropdown'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`view-type--${",
        "type": "Template"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`vis-graphic--${",
        "type": "Template"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "includes",
        "type": "Identifier"
      },
      {
        "value": "'single-stat'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'single-stat--text'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "numLines",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'raw-data--toggle'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'raw-data-table'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'raw-data--toggle'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can view table data & sort values numerically'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`selector-list m`",
        "type": "Template"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'selector-list v'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`selector-list tv1`",
        "type": "Template"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'selector-list sort'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'view-type--dropdown'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`view-type--table`",
        "type": "Template"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.table-graph-cell__sort-asc'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'not.exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.table-graph-cell__sort-desc'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'not.exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'_value-table-header'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "el",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "columnIndex",
        "type": "Identifier"
      },
      {
        "value": "el",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "getAttribute",
        "type": "Identifier"
      },
      {
        "value": "'data-column-index'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "Infinity",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "`[data-column-index=\\\"${",
        "type": "Template"
      },
      {
        "value": "columnIndex",
        "type": "Identifier"
      },
      {
        "value": "}\\\"]`",
        "type": "Template"
      },
      {
        "value": "each",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "Number",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "isNaN",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'_value-table-header'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.table-graph-cell__sort-asc'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'_value-table-header'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.table-graph-cell__sort-desc'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'_value-table-header'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "el",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "columnIndex",
        "type": "Identifier"
      },
      {
        "value": "el",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "getAttribute",
        "type": "Identifier"
      },
      {
        "value": "'data-column-index'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "Infinity",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "`[data-column-index=\\\"${",
        "type": "Template"
      },
      {
        "value": "columnIndex",
        "type": "Identifier"
      },
      {
        "value": "}\\\"]`",
        "type": "Template"
      },
      {
        "value": "each",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "Number",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "isNaN",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/63b81291887f87e821ba6e8c250f1efaf920d57b/ui/cypress/e2e/explorer.test.ts",
    "commit": "63b81291887f87e821ba6e8c250f1efaf920d57b",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/explorer.test.ts",
    "start_line": 653,
    "end_line": 679,
    "test_code": "it('should set the default bucket in the dropdown to the selected bucket', () => {\n  cy.get('.cf-overlay--dismiss').click()\n  cy.getByTestID('selector-list defbuck').click()\n  cy.getByTestID('delete-data-predicate')\n    .click()\n    .then(() => {\n      cy.getByTestID('dropdown--button').contains('defbuck')\n      cy.get('.cf-overlay--dismiss').click()\n    })\n    .then(() => {\n      cy.getByTestID('selector-list _monitoring').click()\n      cy.getByTestID('delete-data-predicate')\n        .click()\n        .then(() => {\n          cy.getByTestID('dropdown--button').contains('_monitoring')\n          cy.get('.cf-overlay--dismiss').click()\n        })\n    })\n    .then(() => {\n      cy.getByTestID('selector-list _tasks').click()\n      cy.getByTestID('delete-data-predicate')\n        .click()\n        .then(() => {\n          cy.getByTestID('dropdown--button').contains('_tasks')\n        })\n    })\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should set the default bucket in the dropdown to the selected bucket'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.cf-overlay--dismiss'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'selector-list defbuck'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'delete-data-predicate'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'dropdown--button'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'defbuck'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.cf-overlay--dismiss'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'selector-list _monitoring'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'delete-data-predicate'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'dropdown--button'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'_monitoring'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.cf-overlay--dismiss'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'selector-list _tasks'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'delete-data-predicate'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'dropdown--button'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'_tasks'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/bba04e20b44dd0f8fd049d80f270424eb266533f/ui/cypress/e2e/explorer.test.ts",
    "commit": "bba04e20b44dd0f8fd049d80f270424eb266533f",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/explorer.test.ts",
    "start_line": 604,
    "end_line": 677,
    "test_code": "describe.skip('visualize tables', () => {\n  const numLines = 360\n\n  beforeEach(() => {\n    cy.flush()\n\n    cy.signin().then(({ body }) => {\n      const {\n        org: { id },\n        bucket,\n      } = body\n      cy.wrap(body.org).as('org')\n      cy.wrap(bucket).as('bucket')\n\n      // POST 360 lines to the server\n      cy.writeData(lines(numLines))\n\n      // start at the data explorer\n      cy.fixture('routes').then(({ orgs, explorer }) => {\n        cy.visit(`${orgs}/${id}${explorer}`)\n      })\n    })\n  })\n\n  it('can view table data & sort values numerically', () => {\n    // build the query to return data from beforeEach\n    cy.getByTestID(`selector-list m`).click()\n    cy.getByTestID('selector-list v').click()\n    cy.getByTestID(`selector-list tv1`).click()\n    cy.getByTestID('selector-list sort').click()\n\n    cy.getByTestID('time-machine-submit-button').click()\n\n    cy.getByTestID('view-type--dropdown').click()\n    cy.getByTestID(`view-type--table`).click()\n    // check to see that the FE rows are NOT sorted with flux sort\n    cy.get('.table-graph-cell__sort-asc').should('not.exist')\n    cy.get('.table-graph-cell__sort-desc').should('not.exist')\n    cy.getByTestID('_value-table-header')\n      .should('exist')\n      .then(el => {\n        // get the column index\n        const columnIndex = el[0].getAttribute('data-column-index')\n        let prev = -Infinity\n        // get all the column values for that one and see if they are in order\n        cy.get(`[data-column-index=\"${columnIndex}\"]`).each(val => {\n          const num = Number(val.text())\n          if (isNaN(num) === false) {\n            expect(num > prev).to.equal(true)\n            prev = num\n          }\n        })\n      })\n    cy.getByTestID('_value-table-header').click()\n    cy.get('.table-graph-cell__sort-asc').should('exist')\n    cy.getByTestID('_value-table-header').click()\n    cy.get('.table-graph-cell__sort-desc').should('exist')\n    cy.getByTestID('_value-table-header')\n      .should('exist')\n      .then(el => {\n        // get the column index\n        const columnIndex = el[0].getAttribute('data-column-index')\n        let prev = Infinity\n        // get all the column values for that one and see if they are in order\n        cy.get(`[data-column-index=\"${columnIndex}\"]`).each(val => {\n          const num = Number(val.text())\n          if (isNaN(num) === false) {\n            expect(num < prev).to.equal(true)\n            prev = num\n          }\n        })\n      })\n  })\n})\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "skip",
        "type": "Identifier"
      },
      {
        "value": "'visualize tables'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "numLines",
        "type": "Identifier"
      },
      {
        "value": "360",
        "type": "Numeric"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "flush",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "signin",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "bucket",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "wrap",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "as",
        "type": "Identifier"
      },
      {
        "value": "'org'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "wrap",
        "type": "Identifier"
      },
      {
        "value": "bucket",
        "type": "Identifier"
      },
      {
        "value": "as",
        "type": "Identifier"
      },
      {
        "value": "'bucket'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "writeData",
        "type": "Identifier"
      },
      {
        "value": "lines",
        "type": "Identifier"
      },
      {
        "value": "numLines",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "'routes'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "orgs",
        "type": "Identifier"
      },
      {
        "value": "explorer",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "visit",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "orgs",
        "type": "Identifier"
      },
      {
        "value": "}/${",
        "type": "Template"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "}${",
        "type": "Template"
      },
      {
        "value": "explorer",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can view table data & sort values numerically'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`selector-list m`",
        "type": "Template"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'selector-list v'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`selector-list tv1`",
        "type": "Template"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'selector-list sort'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'time-machine-submit-button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'view-type--dropdown'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`view-type--table`",
        "type": "Template"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.table-graph-cell__sort-asc'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'not.exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.table-graph-cell__sort-desc'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'not.exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'_value-table-header'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "el",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "columnIndex",
        "type": "Identifier"
      },
      {
        "value": "el",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "getAttribute",
        "type": "Identifier"
      },
      {
        "value": "'data-column-index'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "Infinity",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "`[data-column-index=\"${",
        "type": "Template"
      },
      {
        "value": "columnIndex",
        "type": "Identifier"
      },
      {
        "value": "}\"]`",
        "type": "Template"
      },
      {
        "value": "each",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "Number",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "isNaN",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'_value-table-header'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.table-graph-cell__sort-asc'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'_value-table-header'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.table-graph-cell__sort-desc'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'_value-table-header'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "el",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "columnIndex",
        "type": "Identifier"
      },
      {
        "value": "el",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "getAttribute",
        "type": "Identifier"
      },
      {
        "value": "'data-column-index'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "Infinity",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "`[data-column-index=\"${",
        "type": "Template"
      },
      {
        "value": "columnIndex",
        "type": "Identifier"
      },
      {
        "value": "}\"]`",
        "type": "Template"
      },
      {
        "value": "each",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "Number",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "isNaN",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "prev",
        "type": "Identifier"
      },
      {
        "value": "num",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/4f5ff962d69a84f7a6970b02f9e79b09dbad21fe/ui/cypress/e2e/labels.test.ts ",
    "commit": "4f5ff962d69a84f7a6970b02f9e79b09dbad21fe",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/labels.test.ts",
    "start_line": 163,
    "end_line": 251,
    "test_code": "describe('updating', () => {\n  const oldLabelName = 'attributum (атрибут)'\n  const oldLabelDescription =\n    '(\\u03944) Per attributum intelligo id quod intellectus de substantia percipit tanquam ejusdem essentiam constituens. '\n  const oldLabelColor = '#D0D0F8'\n\n  const newLabelName = 'attribut (атрибут)'\n  const newLabelDescription =\n    \"(\\u03944) J'entends par attribut ce que l'entendement perçoit d'une substance comme constituant son essence. \"\n  const newLabelColor = '#B0D0FF'\n\n  beforeEach(() => {\n    // create label\n    cy.get<Organization>('@org').then(({ id }) => {\n      cy.createLabel(oldLabelName, id, {\n        description: oldLabelDescription,\n        color: oldLabelColor,\n      })\n    })\n\n    cy.get<Organization>('@org').then(({ id }) => {\n      cy.visit(`orgs/${id}/settings/labels`)\n    })\n  })\n\n  it('can update a label', () => {\n    // verify name, descr, color\n    cy.getByTestID('label-card').should('have.length', 1)\n    cy.getByTestID('label-card')\n      .contains(oldLabelName)\n      .should('be.visible')\n\n    cy.getByTestID('label-card')\n      .contains(oldLabelDescription)\n      .should('be.visible')\n\n    cy.getByTestID('label-card')\n      .children('div.cf-resource-card--contents')\n      .children('div.cf-resource-card--row')\n      .children('div.cf-label')\n      .invoke('attr', 'style')\n      .should('contain', hex2BgColor(oldLabelColor))\n\n    cy.getByTestID('label-card')\n      .contains(oldLabelName)\n      .click()\n\n    cy.getByTestID('overlay--header')\n      .children('div')\n      .invoke('text')\n      .should('equal', 'Edit Label')\n\n    // dismiss\n    cy.getByTestID('overlay--header')\n      .children('button')\n      .click()\n\n    // modify\n    cy.getByTestID('label-card')\n      .contains(oldLabelName)\n      .click()\n    cy.getByTestID('overlay--container').should('be.visible')\n    cy.getByTestID('create-label-form--name')\n      .clear()\n      .type(newLabelName)\n    cy.getByTestID('create-label-form--description')\n      .clear()\n      .type(newLabelDescription)\n    cy.getByTestID('color-picker--input')\n      .clear()\n      .type(newLabelColor)\n    cy.getByTestID('create-label-form--submit').click()\n\n    // verify name, descr, color\n    cy.getByTestID('label-card').should('have.length', 1)\n    cy.getByTestID('label-card')\n      .contains(newLabelName)\n      .should('be.visible')\n    cy.getByTestID('label-card')\n      .contains(newLabelDescription)\n      .should('be.visible')\n    cy.getByTestID('label-card')\n      .children('div.cf-resource-card--contents')\n      .children('div.cf-resource-card--row')\n      .children('div.cf-label')\n      .invoke('attr', 'style')\n      .should('contain', hex2BgColor(newLabelColor))\n  })\n})\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'updating'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "oldLabelName",
        "type": "Identifier"
      },
      {
        "value": "'attributum (атрибут)'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "oldLabelDescription",
        "type": "Identifier"
      },
      {
        "value": "'(\\u03944) Per attributum intelligo id quod intellectus de substantia percipit tanquam ejusdem essentiam constituens. '",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "oldLabelColor",
        "type": "Identifier"
      },
      {
        "value": "'#D0D0F8'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "newLabelName",
        "type": "Identifier"
      },
      {
        "value": "'attribut (атрибут)'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "newLabelDescription",
        "type": "Identifier"
      },
      {
        "value": "\"(\\u03944) J'entends par attribut ce que l'entendement perçoit d'une substance comme constituant son essence. \"",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "newLabelColor",
        "type": "Identifier"
      },
      {
        "value": "'#B0D0FF'",
        "type": "String"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "Organization",
        "type": "Identifier"
      },
      {
        "value": "'@org'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createLabel",
        "type": "Identifier"
      },
      {
        "value": "oldLabelName",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "description",
        "type": "Identifier"
      },
      {
        "value": "oldLabelDescription",
        "type": "Identifier"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "oldLabelColor",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "Organization",
        "type": "Identifier"
      },
      {
        "value": "'@org'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "visit",
        "type": "Identifier"
      },
      {
        "value": "`orgs/${",
        "type": "Template"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "}/settings/labels`",
        "type": "Template"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can update a label'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'label-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'label-card'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "oldLabelName",
        "type": "Identifier"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'label-card'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "oldLabelDescription",
        "type": "Identifier"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'label-card'",
        "type": "String"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "'div.cf-resource-card--contents'",
        "type": "String"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "'div.cf-resource-card--row'",
        "type": "String"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "'div.cf-label'",
        "type": "String"
      },
      {
        "value": "invoke",
        "type": "Identifier"
      },
      {
        "value": "'attr'",
        "type": "String"
      },
      {
        "value": "'style'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "hex2BgColor",
        "type": "Identifier"
      },
      {
        "value": "oldLabelColor",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'label-card'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "oldLabelName",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'overlay--header'",
        "type": "String"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "'div'",
        "type": "String"
      },
      {
        "value": "invoke",
        "type": "Identifier"
      },
      {
        "value": "'text'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'equal'",
        "type": "String"
      },
      {
        "value": "'Edit Label'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'overlay--header'",
        "type": "String"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "'button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'label-card'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "oldLabelName",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'overlay--container'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'create-label-form--name'",
        "type": "String"
      },
      {
        "value": "clear",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "newLabelName",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'create-label-form--description'",
        "type": "String"
      },
      {
        "value": "clear",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "newLabelDescription",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'color-picker--input'",
        "type": "String"
      },
      {
        "value": "clear",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "newLabelColor",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'create-label-form--submit'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'label-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'label-card'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "newLabelName",
        "type": "Identifier"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'label-card'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "newLabelDescription",
        "type": "Identifier"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'be.visible'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'label-card'",
        "type": "String"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "'div.cf-resource-card--contents'",
        "type": "String"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "'div.cf-resource-card--row'",
        "type": "String"
      },
      {
        "value": "children",
        "type": "Identifier"
      },
      {
        "value": "'div.cf-label'",
        "type": "String"
      },
      {
        "value": "invoke",
        "type": "Identifier"
      },
      {
        "value": "'attr'",
        "type": "String"
      },
      {
        "value": "'style'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "hex2BgColor",
        "type": "Identifier"
      },
      {
        "value": "newLabelColor",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/4f5ff962d69a84f7a6970b02f9e79b09dbad21fe/ui/cypress/e2e/queryBuilder.test.ts",
    "commit": "4f5ff962d69a84f7a6970b02f9e79b09dbad21fe",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/queryBuilder.test.ts",
    "start_line": 91,
    "end_line": 146,
    "test_code": "describe('from the Dashboard view', () => {\n  beforeEach(() => {\n    cy.get('@org').then((org: Organization) => {\n      cy.createDashboard(org.id).then(({ body }) => {\n        cy.createCell(body.id).then(cellResp => {\n          const dbID = body.id\n          const orgID = org.id\n          const cellID = cellResp.body.id\n          cy.createView(dbID, cellID)\n          cy.wrap({ orgID, dbID, cellID }).as('resourceIDs')\n        })\n      })\n    })\n  })\n\n  it(\"creates a query, edits the query, edits the cell's default name, edits it again, submits with the keyboard, then chills\", () => {\n    cy.get<ResourceIDs>('@resourceIDs').then(({ orgID, dbID, cellID }) => {\n      cy.visit(`orgs/${orgID}/dashboards/${dbID}/cells/${cellID}/edit`)\n    })\n\n    // build query\n    cy.contains('mem').click('topLeft') // users sometimes click in random spots\n    cy.contains('cached').click('bottomLeft')\n    cy.contains('thrillbo-swaggins').click('left')\n    cy.contains('sum').click()\n\n    cy.getByTestID('empty-graph--no-queries').should('exist')\n    cy.contains('Submit').click()\n    cy.getByTestID('giraffe-layer-line').should('exist')\n    cy.getByTestID('overlay')\n      .contains('Name this Cell')\n      .click()\n    cy.get('[placeholder=\"Name this Cell\"]').type('A better name!')\n    cy.get('.veo-contents').click() // click out of inline editor\n    cy.getByTestID('save-cell--button').click()\n\n    // A race condition exists between saving the cell's updated name and re-opening the cell.\n    // Will replace this with a cy.wait(@updateCell) when Cypress supports\n    // waiting on window.fetch responses: https://github.com/cypress-io/cypress/issues/95\n    // resolves: https://github.com/influxdata/influxdb/issues/16141\n\n    cy.get<ResourceIDs>('@resourceIDs').then(({ orgID, dbID, cellID }) => {\n      cy.visit(`orgs/${orgID}/dashboards/${dbID}/cells/${cellID}/edit`)\n    })\n\n    cy.getByTestID('giraffe-layer-line').should('exist')\n    cy.getByTestID('overlay')\n      .contains('A better name!')\n      .click()\n\n    cy.get('[placeholder=\"Name this Cell\"]').type(\n      \"Uncle Moe's Family Feedbag{enter}\"\n    )\n    cy.getByTestID('save-cell--button').click()\n  })\n})\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'from the Dashboard view'",
        "type": "String"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@org'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "Organization",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createDashboard",
        "type": "Identifier"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createCell",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cellResp",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "dbID",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "orgID",
        "type": "Identifier"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "cellID",
        "type": "Identifier"
      },
      {
        "value": "cellResp",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createView",
        "type": "Identifier"
      },
      {
        "value": "dbID",
        "type": "Identifier"
      },
      {
        "value": "cellID",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "wrap",
        "type": "Identifier"
      },
      {
        "value": "orgID",
        "type": "Identifier"
      },
      {
        "value": "dbID",
        "type": "Identifier"
      },
      {
        "value": "cellID",
        "type": "Identifier"
      },
      {
        "value": "as",
        "type": "Identifier"
      },
      {
        "value": "'resourceIDs'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"creates a query, edits the query, edits the cell's default name, edits it again, submits with the keyboard, then chills\"",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "ResourceIDs",
        "type": "Identifier"
      },
      {
        "value": "'@resourceIDs'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "orgID",
        "type": "Identifier"
      },
      {
        "value": "dbID",
        "type": "Identifier"
      },
      {
        "value": "cellID",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "visit",
        "type": "Identifier"
      },
      {
        "value": "`orgs/${",
        "type": "Template"
      },
      {
        "value": "orgID",
        "type": "Identifier"
      },
      {
        "value": "}/dashboards/${",
        "type": "Template"
      },
      {
        "value": "dbID",
        "type": "Identifier"
      },
      {
        "value": "}/cells/${",
        "type": "Template"
      },
      {
        "value": "cellID",
        "type": "Identifier"
      },
      {
        "value": "}/edit`",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'mem'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'topLeft'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'cached'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'bottomLeft'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'thrillbo-swaggins'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'sum'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'empty-graph--no-queries'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Submit'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'giraffe-layer-line'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'overlay'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Name this Cell'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'[placeholder=\"Name this Cell\"]'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'A better name!'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.veo-contents'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'save-cell--button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "ResourceIDs",
        "type": "Identifier"
      },
      {
        "value": "'@resourceIDs'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "orgID",
        "type": "Identifier"
      },
      {
        "value": "dbID",
        "type": "Identifier"
      },
      {
        "value": "cellID",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "visit",
        "type": "Identifier"
      },
      {
        "value": "`orgs/${",
        "type": "Template"
      },
      {
        "value": "orgID",
        "type": "Identifier"
      },
      {
        "value": "}/dashboards/${",
        "type": "Template"
      },
      {
        "value": "dbID",
        "type": "Identifier"
      },
      {
        "value": "}/cells/${",
        "type": "Template"
      },
      {
        "value": "cellID",
        "type": "Identifier"
      },
      {
        "value": "}/edit`",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'giraffe-layer-line'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'overlay'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'A better name!'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'[placeholder=\"Name this Cell\"]'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "\"Uncle Moe's Family Feedbag{enter}\"",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'save-cell--button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/5ba9142f2f3dfef7731e95a12b6cc93dac9c34b7/ui/src/buckets/selectors/index.test.ts",
    "commit": "5ba9142f2f3dfef7731e95a12b6cc93dac9c34b7",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/src/buckets/selectors/index.test.ts",
    "start_line": 16,
    "end_line": 174,
    "test_code": "it('should sort the bucket names alphabetically', () => {\n  const buckets: Bucket[] = [\n    {\n      id: '7902bd683453c00c',\n      orgID: 'e483753c9bdb47bf',\n      type: 'user',\n      name: 'alpha',\n      retentionRules: [],\n      createdAt: '2019-11-05T08:57:54.459819-08:00',\n      updatedAt: '2019-11-05T08:58:09.593805-08:00',\n      links: {\n        labels: '/api/v2/buckets/7902bd683453c00c/labels',\n        logs: '/api/v2/buckets/7902bd683453c00c/logs',\n        members: '/api/v2/buckets/7902bd683453c00c/members',\n        org: '/api/v2/orgs/e483753c9bdb47bf',\n        owners: '/api/v2/buckets/7902bd683453c00c/owners',\n        self: '/api/v2/buckets/7902bd683453c00c',\n        write: '/api/v2/write?org=e483753c9bdb47bf&bucket=7902bd683453c00c',\n      },\n      labels: [],\n    },\n    {\n      id: '7f44462ac794c7c1',\n      orgID: 'e483753c9bdb47bf',\n      type: 'user',\n      name: 'bucket1',\n      retentionRules: [],\n      createdAt: '2019-10-15T11:10:27.970567-07:00',\n      updatedAt: '2019-10-15T11:10:27.970567-07:00',\n      links: {\n        labels: '/api/v2/buckets/7f44462ac794c7c1/labels',\n        logs: '/api/v2/buckets/7f44462ac794c7c1/logs',\n        members: '/api/v2/buckets/7f44462ac794c7c1/members',\n        org: '/api/v2/orgs/e483753c9bdb47bf',\n        owners: '/api/v2/buckets/7f44462ac794c7c1/owners',\n        self: '/api/v2/buckets/7f44462ac794c7c1',\n        write: '/api/v2/write?org=e483753c9bdb47bf&bucket=7f44462ac794c7c1',\n      },\n      labels: [],\n    },\n    {\n      id: 'a8fee6b433c16f86',\n      orgID: 'e483753c9bdb47bf',\n      type: 'user',\n      name: 'zebra',\n      retentionRules: [],\n      createdAt: '2019-11-05T08:57:59.280485-08:00',\n      updatedAt: '2019-11-05T08:57:59.280486-08:00',\n      links: {\n        labels: '/api/v2/buckets/a8fee6b433c16f86/labels',\n        logs: '/api/v2/buckets/a8fee6b433c16f86/logs',\n        members: '/api/v2/buckets/a8fee6b433c16f86/members',\n        org: '/api/v2/orgs/e483753c9bdb47bf',\n        owners: '/api/v2/buckets/a8fee6b433c16f86/owners',\n        self: '/api/v2/buckets/a8fee6b433c16f86',\n        write: '/api/v2/write?org=e483753c9bdb47bf&bucket=a8fee6b433c16f86',\n      },\n      labels: [],\n    },\n    {\n      id: 'adbb0107da2d7d38',\n      orgID: 'e483753c9bdb47bf',\n      type: 'user',\n      name: 'buck2',\n      retentionRules: [],\n      createdAt: '2019-10-18T14:05:24.838291-07:00',\n      updatedAt: '2019-10-18T14:05:24.838292-07:00',\n      links: {\n        labels: '/api/v2/buckets/adbb0107da2d7d38/labels',\n        logs: '/api/v2/buckets/adbb0107da2d7d38/logs',\n        members: '/api/v2/buckets/adbb0107da2d7d38/members',\n        org: '/api/v2/orgs/e483753c9bdb47bf',\n        owners: '/api/v2/buckets/adbb0107da2d7d38/owners',\n        self: '/api/v2/buckets/adbb0107da2d7d38',\n        write: '/api/v2/write?org=e483753c9bdb47bf&bucket=adbb0107da2d7d38',\n      },\n      labels: [],\n    },\n    {\n      id: 'e2871ad8f92e752a',\n      orgID: 'e483753c9bdb47bf',\n      type: 'user',\n      name: 'disco inferno',\n      retentionRules: [],\n      createdAt: '2019-11-05T08:58:16.873502-08:00',\n      updatedAt: '2019-11-05T08:58:16.873502-08:00',\n      links: {\n        labels: '/api/v2/buckets/e2871ad8f92e752a/labels',\n        logs: '/api/v2/buckets/e2871ad8f92e752a/logs',\n        members: '/api/v2/buckets/e2871ad8f92e752a/members',\n        org: '/api/v2/orgs/e483753c9bdb47bf',\n        owners: '/api/v2/buckets/e2871ad8f92e752a/owners',\n        self: '/api/v2/buckets/e2871ad8f92e752a',\n        write: '/api/v2/write?org=e483753c9bdb47bf&bucket=e2871ad8f92e752a',\n      },\n      labels: [],\n    },\n    {\n      id: '000000000000000a',\n      type: 'system',\n      description: 'System bucket for task logs',\n      name: '_tasks',\n      retentionRules: [\n        {\n          type: 'expire',\n          everySeconds: 259200,\n        },\n      ],\n      createdAt: '0001-01-01T00:00:00Z',\n      updatedAt: '0001-01-01T00:00:00Z',\n      links: {\n        labels: '/api/v2/buckets/000000000000000a/labels',\n        logs: '/api/v2/buckets/000000000000000a/logs',\n        members: '/api/v2/buckets/000000000000000a/members',\n        org: '/api/v2/orgs/',\n        owners: '/api/v2/buckets/000000000000000a/owners',\n        self: '/api/v2/buckets/000000000000000a',\n        write: '/api/v2/write?org=&bucket=000000000000000a',\n      },\n      labels: [],\n    },\n    {\n      id: '000000000000000b',\n      type: 'system',\n      description: 'System bucket for monitoring logs',\n      name: '_monitoring',\n      retentionRules: [\n        {\n          type: 'expire',\n          everySeconds: 604800,\n        },\n      ],\n      createdAt: '0001-01-01T00:00:00Z',\n      updatedAt: '0001-01-01T00:00:00Z',\n      links: {\n        labels: '/api/v2/buckets/000000000000000b/labels',\n        logs: '/api/v2/buckets/000000000000000b/logs',\n        members: '/api/v2/buckets/000000000000000b/members',\n        org: '/api/v2/orgs/',\n        owners: '/api/v2/buckets/000000000000000b/owners',\n        self: '/api/v2/buckets/000000000000000b',\n        write: '/api/v2/write?org=&bucket=000000000000000b',\n      },\n      labels: [],\n    },\n  ]\n\n  const results = getSortedBucketNames(buckets)\n  const expectedResult = [\n    'alpha',\n    'buck2',\n    'bucket1',\n    'disco inferno',\n    'zebra',\n    '_monitoring',\n    '_tasks',\n  ]\n  expect(results).toEqual(expectedResult)\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should sort the bucket names alphabetically'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "buckets",
        "type": "Identifier"
      },
      {
        "value": "Bucket",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'7902bd683453c00c'",
        "type": "String"
      },
      {
        "value": "orgID",
        "type": "Identifier"
      },
      {
        "value": "'e483753c9bdb47bf'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'user'",
        "type": "String"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "'alpha'",
        "type": "String"
      },
      {
        "value": "retentionRules",
        "type": "Identifier"
      },
      {
        "value": "createdAt",
        "type": "Identifier"
      },
      {
        "value": "'2019-11-05T08:57:54.459819-08:00'",
        "type": "String"
      },
      {
        "value": "updatedAt",
        "type": "Identifier"
      },
      {
        "value": "'2019-11-05T08:58:09.593805-08:00'",
        "type": "String"
      },
      {
        "value": "links",
        "type": "Identifier"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/7902bd683453c00c/labels'",
        "type": "String"
      },
      {
        "value": "logs",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/7902bd683453c00c/logs'",
        "type": "String"
      },
      {
        "value": "members",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/7902bd683453c00c/members'",
        "type": "String"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/orgs/e483753c9bdb47bf'",
        "type": "String"
      },
      {
        "value": "owners",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/7902bd683453c00c/owners'",
        "type": "String"
      },
      {
        "value": "self",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/7902bd683453c00c'",
        "type": "String"
      },
      {
        "value": "write",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/write?org=e483753c9bdb47bf&bucket=7902bd683453c00c'",
        "type": "String"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'7f44462ac794c7c1'",
        "type": "String"
      },
      {
        "value": "orgID",
        "type": "Identifier"
      },
      {
        "value": "'e483753c9bdb47bf'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'user'",
        "type": "String"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "'bucket1'",
        "type": "String"
      },
      {
        "value": "retentionRules",
        "type": "Identifier"
      },
      {
        "value": "createdAt",
        "type": "Identifier"
      },
      {
        "value": "'2019-10-15T11:10:27.970567-07:00'",
        "type": "String"
      },
      {
        "value": "updatedAt",
        "type": "Identifier"
      },
      {
        "value": "'2019-10-15T11:10:27.970567-07:00'",
        "type": "String"
      },
      {
        "value": "links",
        "type": "Identifier"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/7f44462ac794c7c1/labels'",
        "type": "String"
      },
      {
        "value": "logs",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/7f44462ac794c7c1/logs'",
        "type": "String"
      },
      {
        "value": "members",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/7f44462ac794c7c1/members'",
        "type": "String"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/orgs/e483753c9bdb47bf'",
        "type": "String"
      },
      {
        "value": "owners",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/7f44462ac794c7c1/owners'",
        "type": "String"
      },
      {
        "value": "self",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/7f44462ac794c7c1'",
        "type": "String"
      },
      {
        "value": "write",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/write?org=e483753c9bdb47bf&bucket=7f44462ac794c7c1'",
        "type": "String"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'a8fee6b433c16f86'",
        "type": "String"
      },
      {
        "value": "orgID",
        "type": "Identifier"
      },
      {
        "value": "'e483753c9bdb47bf'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'user'",
        "type": "String"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "'zebra'",
        "type": "String"
      },
      {
        "value": "retentionRules",
        "type": "Identifier"
      },
      {
        "value": "createdAt",
        "type": "Identifier"
      },
      {
        "value": "'2019-11-05T08:57:59.280485-08:00'",
        "type": "String"
      },
      {
        "value": "updatedAt",
        "type": "Identifier"
      },
      {
        "value": "'2019-11-05T08:57:59.280486-08:00'",
        "type": "String"
      },
      {
        "value": "links",
        "type": "Identifier"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/a8fee6b433c16f86/labels'",
        "type": "String"
      },
      {
        "value": "logs",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/a8fee6b433c16f86/logs'",
        "type": "String"
      },
      {
        "value": "members",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/a8fee6b433c16f86/members'",
        "type": "String"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/orgs/e483753c9bdb47bf'",
        "type": "String"
      },
      {
        "value": "owners",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/a8fee6b433c16f86/owners'",
        "type": "String"
      },
      {
        "value": "self",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/a8fee6b433c16f86'",
        "type": "String"
      },
      {
        "value": "write",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/write?org=e483753c9bdb47bf&bucket=a8fee6b433c16f86'",
        "type": "String"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'adbb0107da2d7d38'",
        "type": "String"
      },
      {
        "value": "orgID",
        "type": "Identifier"
      },
      {
        "value": "'e483753c9bdb47bf'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'user'",
        "type": "String"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "'buck2'",
        "type": "String"
      },
      {
        "value": "retentionRules",
        "type": "Identifier"
      },
      {
        "value": "createdAt",
        "type": "Identifier"
      },
      {
        "value": "'2019-10-18T14:05:24.838291-07:00'",
        "type": "String"
      },
      {
        "value": "updatedAt",
        "type": "Identifier"
      },
      {
        "value": "'2019-10-18T14:05:24.838292-07:00'",
        "type": "String"
      },
      {
        "value": "links",
        "type": "Identifier"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/adbb0107da2d7d38/labels'",
        "type": "String"
      },
      {
        "value": "logs",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/adbb0107da2d7d38/logs'",
        "type": "String"
      },
      {
        "value": "members",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/adbb0107da2d7d38/members'",
        "type": "String"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/orgs/e483753c9bdb47bf'",
        "type": "String"
      },
      {
        "value": "owners",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/adbb0107da2d7d38/owners'",
        "type": "String"
      },
      {
        "value": "self",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/adbb0107da2d7d38'",
        "type": "String"
      },
      {
        "value": "write",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/write?org=e483753c9bdb47bf&bucket=adbb0107da2d7d38'",
        "type": "String"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'e2871ad8f92e752a'",
        "type": "String"
      },
      {
        "value": "orgID",
        "type": "Identifier"
      },
      {
        "value": "'e483753c9bdb47bf'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'user'",
        "type": "String"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "'disco inferno'",
        "type": "String"
      },
      {
        "value": "retentionRules",
        "type": "Identifier"
      },
      {
        "value": "createdAt",
        "type": "Identifier"
      },
      {
        "value": "'2019-11-05T08:58:16.873502-08:00'",
        "type": "String"
      },
      {
        "value": "updatedAt",
        "type": "Identifier"
      },
      {
        "value": "'2019-11-05T08:58:16.873502-08:00'",
        "type": "String"
      },
      {
        "value": "links",
        "type": "Identifier"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/e2871ad8f92e752a/labels'",
        "type": "String"
      },
      {
        "value": "logs",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/e2871ad8f92e752a/logs'",
        "type": "String"
      },
      {
        "value": "members",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/e2871ad8f92e752a/members'",
        "type": "String"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/orgs/e483753c9bdb47bf'",
        "type": "String"
      },
      {
        "value": "owners",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/e2871ad8f92e752a/owners'",
        "type": "String"
      },
      {
        "value": "self",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/e2871ad8f92e752a'",
        "type": "String"
      },
      {
        "value": "write",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/write?org=e483753c9bdb47bf&bucket=e2871ad8f92e752a'",
        "type": "String"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'000000000000000a'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'system'",
        "type": "String"
      },
      {
        "value": "description",
        "type": "Identifier"
      },
      {
        "value": "'System bucket for task logs'",
        "type": "String"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "'_tasks'",
        "type": "String"
      },
      {
        "value": "retentionRules",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'expire'",
        "type": "String"
      },
      {
        "value": "everySeconds",
        "type": "Identifier"
      },
      {
        "value": "259200",
        "type": "Numeric"
      },
      {
        "value": "createdAt",
        "type": "Identifier"
      },
      {
        "value": "'0001-01-01T00:00:00Z'",
        "type": "String"
      },
      {
        "value": "updatedAt",
        "type": "Identifier"
      },
      {
        "value": "'0001-01-01T00:00:00Z'",
        "type": "String"
      },
      {
        "value": "links",
        "type": "Identifier"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/000000000000000a/labels'",
        "type": "String"
      },
      {
        "value": "logs",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/000000000000000a/logs'",
        "type": "String"
      },
      {
        "value": "members",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/000000000000000a/members'",
        "type": "String"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/orgs/'",
        "type": "String"
      },
      {
        "value": "owners",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/000000000000000a/owners'",
        "type": "String"
      },
      {
        "value": "self",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/000000000000000a'",
        "type": "String"
      },
      {
        "value": "write",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/write?org=&bucket=000000000000000a'",
        "type": "String"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'000000000000000b'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'system'",
        "type": "String"
      },
      {
        "value": "description",
        "type": "Identifier"
      },
      {
        "value": "'System bucket for monitoring logs'",
        "type": "String"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "'_monitoring'",
        "type": "String"
      },
      {
        "value": "retentionRules",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'expire'",
        "type": "String"
      },
      {
        "value": "everySeconds",
        "type": "Identifier"
      },
      {
        "value": "604800",
        "type": "Numeric"
      },
      {
        "value": "createdAt",
        "type": "Identifier"
      },
      {
        "value": "'0001-01-01T00:00:00Z'",
        "type": "String"
      },
      {
        "value": "updatedAt",
        "type": "Identifier"
      },
      {
        "value": "'0001-01-01T00:00:00Z'",
        "type": "String"
      },
      {
        "value": "links",
        "type": "Identifier"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/000000000000000b/labels'",
        "type": "String"
      },
      {
        "value": "logs",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/000000000000000b/logs'",
        "type": "String"
      },
      {
        "value": "members",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/000000000000000b/members'",
        "type": "String"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/orgs/'",
        "type": "String"
      },
      {
        "value": "owners",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/000000000000000b/owners'",
        "type": "String"
      },
      {
        "value": "self",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/buckets/000000000000000b'",
        "type": "String"
      },
      {
        "value": "write",
        "type": "Identifier"
      },
      {
        "value": "'/api/v2/write?org=&bucket=000000000000000b'",
        "type": "String"
      },
      {
        "value": "labels",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "results",
        "type": "Identifier"
      },
      {
        "value": "getSortedBucketNames",
        "type": "Identifier"
      },
      {
        "value": "buckets",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "expectedResult",
        "type": "Identifier"
      },
      {
        "value": "'alpha'",
        "type": "String"
      },
      {
        "value": "'buck2'",
        "type": "String"
      },
      {
        "value": "'bucket1'",
        "type": "String"
      },
      {
        "value": "'disco inferno'",
        "type": "String"
      },
      {
        "value": "'zebra'",
        "type": "String"
      },
      {
        "value": "'_monitoring'",
        "type": "String"
      },
      {
        "value": "'_tasks'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "results",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "expectedResult",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/f37ea3bfb8684ebdfa066ddf4d1cc1663a1e64cc/ui/cypress/e2e/buckets.test.ts",
    "commit": "f37ea3bfb8684ebdfa066ddf4d1cc1663a1e64cc",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/buckets.test.ts",
    "start_line": 63,
    "end_line": 66,
    "test_code": "it('Searching buckets', () => {\n  cy.getByTestID('search-widget').type('tasks')\n  cy.getByTestID('bucket-card').should('have.length', 1)\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'Searching buckets'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'search-widget'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'tasks'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'bucket-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/f37ea3bfb8684ebdfa066ddf4d1cc1663a1e64cc/ui/cypress/e2e/buckets.test.ts",
    "commit": "f37ea3bfb8684ebdfa066ddf4d1cc1663a1e64cc",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/buckets.test.ts",
    "start_line": 80,
    "end_line": 90,
    "test_code": "it('Sorting by Retention', () => {\n  cy.getByTestID('retention-sorter').click()\n  cy.getByTestID('bucket-card')\n    .first()\n    .contains('_tasks')\n\n  cy.getByTestID('retention-sorter').click()\n  cy.getByTestID('bucket-card')\n    .first()\n    .contains('defbuck')\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'Sorting by Retention'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'retention-sorter'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'bucket-card'",
        "type": "String"
      },
      {
        "value": "first",
        "type": "Identifier"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'_tasks'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'retention-sorter'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'bucket-card'",
        "type": "String"
      },
      {
        "value": "first",
        "type": "Identifier"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'defbuck'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/dc8904928fb0c7e126e50804507e77fcd5e5e0f0/ui/cypress/e2e/collectors.test.ts ",
    "commit": "dc8904928fb0c7e126e50804507e77fcd5e5e0f0",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/collectors.test.ts",
    "start_line": 3,
    "end_line": 256,
    "test_code": "describe('Collectors', () => {\n  beforeEach(() => {\n    cy.flush()\n\n    cy.signin().then(({ body }) => {\n      const {\n        org: { id },\n      } = body\n      cy.wrap(body.org).as('org')\n\n      cy.fixture('routes').then(({ orgs }) => {\n        cy.visit(`${orgs}/${id}/load-data/telegrafs`)\n      })\n    })\n  })\n\n  describe('from the org view', () => {\n    it('can create a telegraf config', () => {\n      const newConfig = 'New Config'\n      const configDescription = 'This is a new config testing'\n\n      cy.getByTestID('table-row')\n        .should('have.length', 0)\n        .then(() => {\n          cy.contains('Create Configuration')\n            .click()\n            .then(() => {\n              cy.getByTestID('overlay--container').within(() => {\n                cy.getByTestID('telegraf-plugins--System')\n                  .click()\n                  .then(() => {\n                    cy.getByTestID('next')\n                      .click()\n                      .then(() => {\n                        cy.getByInputName('name')\n                          .clear()\n                          .type(newConfig)\n                        cy.getByInputName('description')\n                          .clear()\n                          .type(configDescription)\n                        cy.get('.cf-button')\n                          .contains('Create and Verify')\n                          .click()\n                        cy.getByTestID('streaming').within(() => {\n                          cy.get('.cf-button')\n                            .contains('Listen for Data')\n                            .click()\n                        })\n                        cy.get('.cf-button')\n                          .contains('Finish')\n                          .click()\n                      })\n                  })\n              })\n            })\n        })\n\n      cy.fixture('user').then(({ bucket }) => {\n        cy.getByTestID('resource-card')\n          .should('have.length', 1)\n          .and('contain', newConfig)\n          .and('contain', bucket)\n      })\n    })\n\n    describe('when a config already exists', () => {\n      beforeEach(() => {\n        const telegrafConfigName = 'New Config'\n        const description = 'Config Description'\n        cy.get('@org').then(({ id }: Organization) => {\n          cy.fixture('user').then(({ bucket }) => {\n            cy.createTelegraf(telegrafConfigName, description, id, bucket)\n          })\n        })\n\n        cy.reload()\n      })\n\n      it('can update configuration name and delete a configuration', () => {\n        const newConfigName = 'This is new name'\n\n        cy.getByTestID('collector-card--name')\n          .first()\n          .trigger('mouseover')\n          .then(() => {\n            cy.getByTestID('collector-card--name-button')\n              .first()\n              .click()\n              .then(() => {\n                cy.getByTestID('collector-card--input')\n                  .type(newConfigName)\n                  .type('{enter}')\n                  .then(() => {\n                    cy.getByTestID('collector-card--name').should(\n                      'contain',\n                      newConfigName\n                    )\n                  })\n              })\n          })\n\n        cy.getByTestID('resource-card').should('have.length', 1)\n\n        cy.getByTestID('context-menu')\n          .last()\n          .click()\n          .then(() => {\n            cy.getByTestID('context-menu-item')\n              .last()\n              .click()\n              .then(() => {\n                cy.getByTestID('empty-state').should('exist')\n              })\n          })\n      })\n\n      it('can view setup instructions for a config', () => {\n        cy.getByTestID('resource-card').should('have.length', 1)\n\n        cy.getByTestID('setup-instructions-link').click()\n\n        cy.getByTestID('setup-instructions').should('exist')\n\n        cy.getByTestID('overlay--header')\n          .find('button')\n          .click()\n\n        cy.getByTestID('setup-instructions').should('not.exist')\n      })\n    })\n\n    describe('sorting & filtering', () => {\n      const telegrafs = ['bad', 'apple', 'cookie']\n      const bucketz = ['MO_buckets', 'EZ_buckets', 'Bucky']\n      const [firstTelegraf, secondTelegraf, thirdTelegraf] = telegrafs\n      beforeEach(() => {\n        const description = 'Config Description'\n        const [firstBucket, secondBucket, thirdBucket] = bucketz\n        cy.get('@org').then(({ id }: Organization) => {\n          cy.createTelegraf(firstTelegraf, description, id, firstBucket)\n          cy.createTelegraf(secondTelegraf, description, id, secondBucket)\n          cy.createTelegraf(thirdTelegraf, description, id, thirdBucket)\n        })\n        cy.reload()\n      })\n      // filter by name\n      it('can filter telegraf configs and sort by bucket and name', () => {\n        // fixes https://github.com/influxdata/influxdb/issues/15246\n        cy.getByTestID('search-widget')\n          .type(firstTelegraf)\n          .then(() => {\n            cy.getByTestID('resource-card').should('have.length', 1)\n            cy.getByTestID('resource-card').should('contain', firstTelegraf)\n\n            cy.getByTestID('search-widget')\n              .clear()\n              .type(secondTelegraf)\n              .then(() => {\n                cy.getByTestID('resource-card').should('have.length', 1)\n                cy.getByTestID('resource-card').should(\n                  'contain',\n                  secondTelegraf\n                )\n\n                cy.getByTestID('search-widget')\n                  .clear()\n                  .type(thirdTelegraf)\n                  .then(() => {\n                    cy.getByTestID('resource-card').should('have.length', 1)\n                    cy.getByTestID('resource-card').should(\n                      'contain',\n                      thirdTelegraf\n                    )\n\n                    cy.getByTestID('search-widget')\n                      .clear()\n                      .type('should have no results')\n                      .then(() => {\n                        cy.getByTestID('resource-card').should('have.length', 0)\n                        cy.getByTestID('empty-state').should('exist')\n\n                        cy.getByTestID('search-widget')\n                          .clear()\n                          .type('a')\n                          .then(() => {\n                            cy.getByTestID('resource-card').should(\n                              'have.length',\n                              2\n                            )\n                            cy.getByTestID('resource-card').should(\n                              'contain',\n                              firstTelegraf\n                            )\n                            cy.getByTestID('resource-card').should(\n                              'contain',\n                              secondTelegraf\n                            )\n                            cy.getByTestID('resource-card').should(\n                              'not.contain',\n                              thirdTelegraf\n                            )\n                          })\n                      })\n                  })\n              })\n          })\n\n        // sort by buckets test here\n        cy.reload() // clear out filtering state from the previous test\n        cy.getByTestID('bucket-sorter')\n          .click()\n          .then(() => {\n            bucketz.sort()\n            cy.getByTestID('bucket-name')\n              .should('have.length', 3)\n              .each((val, index) => {\n                const text = val.text()\n                expect(text).to.include(bucketz[index])\n              })\n              .then(() => {\n                cy.getByTestID('bucket-sorter').click()\n                bucketz.reverse()\n                cy.getByTestID('bucket-name').each((val, index) => {\n                  const text = val.text()\n                  expect(text).to.include(bucketz[index])\n                })\n              })\n          })\n\n        // sort by name test here\n        cy.reload() // clear out sorting state from previous test\n        cy.getByTestID('collector-card--name').should('have.length', 3)\n\n        // test to see if telegrafs are initially sorted by name\n        telegrafs.sort()\n\n        cy.getByTestID('collector-card--name')\n          .each((val, index) => {\n            expect(val.text()).to.include(telegrafs[index])\n          })\n          .then(() => {\n            telegrafs.reverse()\n            cy.getByTestID('name-sorter')\n              .click()\n              .then(() => {\n                cy.getByTestID('collector-card--name').each((val, index) => {\n                  expect(val.text()).to.include(telegrafs[index])\n                })\n              })\n          })\n      })\n    })\n  })\n})\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'Collectors'",
        "type": "String"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "flush",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "signin",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "wrap",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "org",
        "type": "Identifier"
      },
      {
        "value": "as",
        "type": "Identifier"
      },
      {
        "value": "'org'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "'routes'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "orgs",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "visit",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "orgs",
        "type": "Identifier"
      },
      {
        "value": "}/${",
        "type": "Template"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "}/load-data/telegrafs`",
        "type": "Template"
      },
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'from the org view'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can create a telegraf config'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "newConfig",
        "type": "Identifier"
      },
      {
        "value": "'New Config'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "configDescription",
        "type": "Identifier"
      },
      {
        "value": "'This is a new config testing'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'table-row'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Create Configuration'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'overlay--container'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'telegraf-plugins--System'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'next'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByInputName",
        "type": "Identifier"
      },
      {
        "value": "'name'",
        "type": "String"
      },
      {
        "value": "clear",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "newConfig",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByInputName",
        "type": "Identifier"
      },
      {
        "value": "'description'",
        "type": "String"
      },
      {
        "value": "clear",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "configDescription",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.cf-button'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Create and Verify'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'streaming'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.cf-button'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Listen for Data'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.cf-button'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Finish'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "'user'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "bucket",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "and",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "newConfig",
        "type": "Identifier"
      },
      {
        "value": "and",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "bucket",
        "type": "Identifier"
      },
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'when a config already exists'",
        "type": "String"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "telegrafConfigName",
        "type": "Identifier"
      },
      {
        "value": "'New Config'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "description",
        "type": "Identifier"
      },
      {
        "value": "'Config Description'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@org'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "Organization",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "'user'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "bucket",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createTelegraf",
        "type": "Identifier"
      },
      {
        "value": "telegrafConfigName",
        "type": "Identifier"
      },
      {
        "value": "description",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "bucket",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "reload",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can update configuration name and delete a configuration'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "newConfigName",
        "type": "Identifier"
      },
      {
        "value": "'This is new name'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'collector-card--name'",
        "type": "String"
      },
      {
        "value": "first",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "'mouseover'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'collector-card--name-button'",
        "type": "String"
      },
      {
        "value": "first",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'collector-card--input'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "newConfigName",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'{enter}'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'collector-card--name'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "newConfigName",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'context-menu'",
        "type": "String"
      },
      {
        "value": "last",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'context-menu-item'",
        "type": "String"
      },
      {
        "value": "last",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'empty-state'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can view setup instructions for a config'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'setup-instructions-link'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'setup-instructions'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'overlay--header'",
        "type": "String"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'setup-instructions'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'not.exist'",
        "type": "String"
      },
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'sorting & filtering'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "telegrafs",
        "type": "Identifier"
      },
      {
        "value": "'bad'",
        "type": "String"
      },
      {
        "value": "'apple'",
        "type": "String"
      },
      {
        "value": "'cookie'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "bucketz",
        "type": "Identifier"
      },
      {
        "value": "'MO_buckets'",
        "type": "String"
      },
      {
        "value": "'EZ_buckets'",
        "type": "String"
      },
      {
        "value": "'Bucky'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "firstTelegraf",
        "type": "Identifier"
      },
      {
        "value": "secondTelegraf",
        "type": "Identifier"
      },
      {
        "value": "thirdTelegraf",
        "type": "Identifier"
      },
      {
        "value": "telegrafs",
        "type": "Identifier"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "description",
        "type": "Identifier"
      },
      {
        "value": "'Config Description'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "firstBucket",
        "type": "Identifier"
      },
      {
        "value": "secondBucket",
        "type": "Identifier"
      },
      {
        "value": "thirdBucket",
        "type": "Identifier"
      },
      {
        "value": "bucketz",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@org'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "Organization",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createTelegraf",
        "type": "Identifier"
      },
      {
        "value": "firstTelegraf",
        "type": "Identifier"
      },
      {
        "value": "description",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "firstBucket",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createTelegraf",
        "type": "Identifier"
      },
      {
        "value": "secondTelegraf",
        "type": "Identifier"
      },
      {
        "value": "description",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "secondBucket",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createTelegraf",
        "type": "Identifier"
      },
      {
        "value": "thirdTelegraf",
        "type": "Identifier"
      },
      {
        "value": "description",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "thirdBucket",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "reload",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can filter telegraf configs and sort by bucket and name'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'search-widget'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "firstTelegraf",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "firstTelegraf",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'search-widget'",
        "type": "String"
      },
      {
        "value": "clear",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "secondTelegraf",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "secondTelegraf",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'search-widget'",
        "type": "String"
      },
      {
        "value": "clear",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "thirdTelegraf",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "thirdTelegraf",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'search-widget'",
        "type": "String"
      },
      {
        "value": "clear",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'should have no results'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'empty-state'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'search-widget'",
        "type": "String"
      },
      {
        "value": "clear",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'a'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "firstTelegraf",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "secondTelegraf",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'resource-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'not.contain'",
        "type": "String"
      },
      {
        "value": "thirdTelegraf",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "reload",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'bucket-sorter'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "bucketz",
        "type": "Identifier"
      },
      {
        "value": "sort",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'bucket-name'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "each",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "include",
        "type": "Identifier"
      },
      {
        "value": "bucketz",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'bucket-sorter'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "bucketz",
        "type": "Identifier"
      },
      {
        "value": "reverse",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'bucket-name'",
        "type": "String"
      },
      {
        "value": "each",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "include",
        "type": "Identifier"
      },
      {
        "value": "bucketz",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "reload",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'collector-card--name'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "telegrafs",
        "type": "Identifier"
      },
      {
        "value": "sort",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'collector-card--name'",
        "type": "String"
      },
      {
        "value": "each",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "include",
        "type": "Identifier"
      },
      {
        "value": "telegrafs",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "telegrafs",
        "type": "Identifier"
      },
      {
        "value": "reverse",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'name-sorter'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'collector-card--name'",
        "type": "String"
      },
      {
        "value": "each",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "val",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "include",
        "type": "Identifier"
      },
      {
        "value": "telegrafs",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/influxdata/influxdb/blob/3b5d0a443e8c7302cfd5c31f1cefd1f16e950e6e/ui/cypress/e2e/dashboardsIndex.test.ts ",
    "commit": "3b5d0a443e8c7302cfd5c31f1cefd1f16e950e6e",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/dashboardsIndex.test.ts",
    "start_line": 22,
    "end_line": 38,
    "test_code": "it('can create a dashboard from empty state', () => {\n  cy.getByTestID('empty-dashboards-list').within(() => {\n    cy.getByTestID('add-resource-dropdown--button').click()\n  })\n\n  cy.getByTestID('add-resource-dropdown--new')\n    .click()\n    .then(() => {\n      cy.fixture('routes').then(({ orgs }) => {\n        cy.get('@org').then(({ id }: Organization) => {\n          cy.visit(`${orgs}/${id}/dashboards`)\n        })\n      })\n\n      cy.getByTestID('dashboard-card').should('have.length', 1)\n    })\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can create a dashboard from empty state'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'empty-dashboards-list'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'add-resource-dropdown--button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'add-resource-dropdown--new'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "'routes'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "orgs",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@org'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "Organization",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "visit",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "orgs",
        "type": "Identifier"
      },
      {
        "value": "}/${",
        "type": "Template"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "}/dashboards`",
        "type": "Template"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'dashboard-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/influxdata/influxdb/blob/3b5d0a443e8c7302cfd5c31f1cefd1f16e950e6e/ui/cypress/e2e/dashboardsIndex.test.ts ",
    "commit": "3b5d0a443e8c7302cfd5c31f1cefd1f16e950e6e",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/dashboardsIndex.test.ts",
    "start_line": 54,
    "end_line": 71,
    "test_code": "it('can create a dashboard from a Template', () => {\n  cy.getByTestID('dashboard-card').should('have.length', 0)\n  cy.get('@org').then(({ id }: Organization) => {\n    cy.createDashboardTemplate(id)\n  })\n\n  cy.getByTestID('add-resource-dropdown--button').click()\n\n  cy.getByTestID('add-resource-dropdown--template').click()\n\n  cy.getByTestID('template--Bashboard-Template').click()\n\n  cy.getByTestID('template-panel').should('exist')\n\n  cy.getByTestID('create-dashboard-button').click()\n\n  cy.getByTestID('dashboard-card').should('have.length', 1)\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can create a dashboard from a Template'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'dashboard-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@org'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "Organization",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createDashboardTemplate",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'add-resource-dropdown--button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'add-resource-dropdown--template'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'template--Bashboard-Template'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'template-panel'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'create-dashboard-button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'dashboard-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/influxdata/influxdb/blob/3b5d0a443e8c7302cfd5c31f1cefd1f16e950e6e/ui/cypress/e2e/tasks.test.ts ",
    "commit": "3b5d0a443e8c7302cfd5c31f1cefd1f16e950e6e",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/tasks.test.ts",
    "start_line": 63,
    "end_line": 116,
    "test_code": "describe('When tasks already exist', () => {\n  beforeEach(() => {\n    cy.get('@org').then(({ id }: Organization) => {\n      cy.get<string>('@token').then(token => {\n        cy.createTask(token, id)\n      })\n    })\n  })\n\n  it('can edit a task', () => {\n    // Disabling the test\n    cy.getByTestID('task-card--slide-toggle').should('have.class', 'active')\n\n    cy.getByTestID('task-card--slide-toggle').click()\n\n    cy.getByTestID('task-card--slide-toggle').should(\n      'not.have.class',\n      'active'\n    )\n\n    // Editing a name\n    const newName = 'Task'\n\n    cy.getByTestID('task-card').within(() => {\n      cy.getByTestID('task-card--name').trigger('mouseover')\n\n      cy.getByTestID('task-card--name-button').click()\n\n      cy.get('.cf-input-field')\n        .type(newName)\n        .type('{enter}')\n    })\n\n    cy.getByTestID('notification-success').should('exist')\n    cy.getByTestID('task-card').should('contain', newName)\n  })\n\n  it('can delete a task', () => {\n    cy.getByTestID('task-card')\n      .first()\n      .trigger('mouseover')\n      .then(() => {\n        cy.getByTestID('context-delete-menu')\n          .click()\n          .then(() => {\n            cy.getByTestID('context-delete-task')\n              .click()\n              .then(() => {\n                cy.getByTestID('empty-tasks-list').should('exist')\n              })\n          })\n      })\n  })\n})\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'When tasks already exist'",
        "type": "String"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@org'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "Organization",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "string",
        "type": "Identifier"
      },
      {
        "value": "'@token'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "token",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createTask",
        "type": "Identifier"
      },
      {
        "value": "token",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can edit a task'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-card--slide-toggle'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.class'",
        "type": "String"
      },
      {
        "value": "'active'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-card--slide-toggle'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-card--slide-toggle'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'not.have.class'",
        "type": "String"
      },
      {
        "value": "'active'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "newName",
        "type": "Identifier"
      },
      {
        "value": "'Task'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-card'",
        "type": "String"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-card--name'",
        "type": "String"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "'mouseover'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-card--name-button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.cf-input-field'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "newName",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'{enter}'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'notification-success'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'contain'",
        "type": "String"
      },
      {
        "value": "newName",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can delete a task'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-card'",
        "type": "String"
      },
      {
        "value": "first",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "'mouseover'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'context-delete-menu'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'context-delete-task'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'empty-tasks-list'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/influxdata/influxdb/blob/3b5d0a443e8c7302cfd5c31f1cefd1f16e950e6e/ui/cypress/e2e/tasks.test.ts ",
    "commit": "3b5d0a443e8c7302cfd5c31f1cefd1f16e950e6e",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/tasks.test.ts",
    "start_line": 118,
    "end_line": 156,
    "test_code": "describe('Searching and filtering', () => {\n  const newLabelName = 'click-me'\n  const taskName = 'beepBoop'\n\n  beforeEach(() => {\n    cy.get('@org').then(({ id }: Organization) => {\n      cy.get<string>('@token').then(token => {\n        cy.createTask(token, id, taskName).then(({ body }) => {\n          cy.createAndAddLabel('tasks', id, body.id, newLabelName)\n        })\n\n        cy.createTask(token, id).then(({ body }) => {\n          cy.createAndAddLabel('tasks', id, body.id, 'bar')\n        })\n      })\n    })\n\n    cy.fixture('routes').then(({ orgs }) => {\n      cy.get('@org').then(({ id }: Organization) => {\n        cy.visit(`${orgs}/${id}/tasks`)\n      })\n    })\n  })\n\n  it('can click to filter tasks by labels', () => {\n    cy.getByTestID('task-card').should('have.length', 2)\n\n    cy.getByTestID(`label--pill ${newLabelName}`).click()\n\n    cy.getByTestID('task-card').should('have.length', 1)\n\n    // searching by task name\n    cy.getByTestID('search-widget')\n      .clear()\n      .type('bEE')\n\n    cy.getByTestID('task-card').should('have.length', 1)\n  })\n})\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'Searching and filtering'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "newLabelName",
        "type": "Identifier"
      },
      {
        "value": "'click-me'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "taskName",
        "type": "Identifier"
      },
      {
        "value": "'beepBoop'",
        "type": "String"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@org'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "Organization",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "string",
        "type": "Identifier"
      },
      {
        "value": "'@token'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "token",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createTask",
        "type": "Identifier"
      },
      {
        "value": "token",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "taskName",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createAndAddLabel",
        "type": "Identifier"
      },
      {
        "value": "'tasks'",
        "type": "String"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "newLabelName",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createTask",
        "type": "Identifier"
      },
      {
        "value": "token",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createAndAddLabel",
        "type": "Identifier"
      },
      {
        "value": "'tasks'",
        "type": "String"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "'routes'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "orgs",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@org'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "Organization",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "visit",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "orgs",
        "type": "Identifier"
      },
      {
        "value": "}/${",
        "type": "Template"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "}/tasks`",
        "type": "Template"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can click to filter tasks by labels'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "`label--pill ${",
        "type": "Template"
      },
      {
        "value": "newLabelName",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'search-widget'",
        "type": "String"
      },
      {
        "value": "clear",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'bEE'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'task-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/nfl/react-helmet/blob/a2323add50c15bf6a1047b5d99753cce6db07fd6/test/HelmetDeclarativeTest.js ",
    "commit": "a2323add50c15bf6a1047b5d99753cce6db07fd6",
    "project_name": "react-helmet",
    "project_author": "nfl",
    "flaky_file": "/test/HelmetDeclarativeTest.js",
    "start_line": 315,
    "end_line": 340,
    "test_code": "it.skip(\"clears title tag if empty title is defined\", done => {\n    ReactDOM.render(\n        <Helmet>\n            <title>Existing Title</title>\n            <meta name=\"keywords\" content=\"stuff\" />\n        </Helmet>,\n        container\n    );\n\n    requestAnimationFrame(() => {\n        expect(document.title).to.equal(\"Existing Title\");\n\n        ReactDOM.render(\n            <Helmet>\n                <title>{\" \"}</title>\n                <meta name=\"keywords\" content=\"stuff\" />\n            </Helmet>,\n            container\n        );\n\n        requestAnimationFrame(() => {\n            expect(document.title).to.equal(\"\");\n            done();\n        });\n    });\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "skip",
        "type": "Identifier"
      },
      {
        "value": "\"clears title tag if empty title is defined\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "ReactDOM",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "Helmet",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "title",
        "type": "JSXIdentifier"
      },
      {
        "value": "Existing Title",
        "type": "JSXText"
      },
      {
        "value": "title",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "meta",
        "type": "JSXIdentifier"
      },
      {
        "value": "name",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"keywords\"",
        "type": "JSXText"
      },
      {
        "value": "content",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"stuff\"",
        "type": "JSXText"
      },
      {
        "value": "\n        ",
        "type": "JSXText"
      },
      {
        "value": "Helmet",
        "type": "JSXIdentifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "requestAnimationFrame",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "title",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "\"Existing Title\"",
        "type": "String"
      },
      {
        "value": "ReactDOM",
        "type": "Identifier"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "Helmet",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "title",
        "type": "JSXIdentifier"
      },
      {
        "value": "\" \"",
        "type": "String"
      },
      {
        "value": "title",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "meta",
        "type": "JSXIdentifier"
      },
      {
        "value": "name",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"keywords\"",
        "type": "JSXText"
      },
      {
        "value": "content",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"stuff\"",
        "type": "JSXText"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "Helmet",
        "type": "JSXIdentifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "requestAnimationFrame",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "title",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "\"\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/jhipster/generator-jhipster/blob/5068452382f00ef2444858bc827630d1a1a7dc23/generators/client/templates/react/src/test/javascript/e2e/modules/administration/administration.spec.ts.ejs",
    "commit": "5068452382f00ef2444858bc827630d1a1a7dc23",
    "project_name": "generator-jhipster",
    "project_author": "jhipster",
    "flaky_file": "/generators/client/templates/react/src/test/javascript/e2e/modules/administration/administration.spec.ts.ejs",
    "start_line": 28,
    "end_line": 88,
    "test_code": "\ndescribe('Administration', () => {\n  let navBarPage: NavBarPage;\n  let signInPage: SignInPage;\n\n  before(async () => {\n    await browser.get('/');\n    navBarPage = new NavBarPage();\n    signInPage = await navBarPage.getSignInPage();\n    <%_ if (authenticationType !== 'oauth2') { _%>\n    await signInPage.waitUntilDisplayed();\n\n    await signInPage.username.sendKeys('admin');\n    await signInPage.password.sendKeys('admin');\n    await signInPage.loginButton.click();\n    await signInPage.waitUntilHidden();\n\n    <%_ } _%>\n    await waitUntilDisplayed(navBarPage.adminMenu);\n  });\n\n  <%_ if (authenticationType !== 'oauth2') { _%>\n  it('should load user management', async () => {\n    await navBarPage.clickOnAdminMenuItem('user-management');\n    const heading = element(by.id('user-management-page-heading'));\n    await waitUntilDisplayed(heading);\n    // Title should be equal to 'Users'\n    expect(await heading.isPresent()).to.be.true;\n  });\n  <%_ } _%>\n\n  it('should load metrics', async () => {\n    await navBarPage.clickOnAdminMenuItem('metrics');\n    expect(await element(by.id('metrics-page-heading')).getText()).to.eq('Application Metrics');\n  });\n\n  it('should load health', async () => {\n    await navBarPage.clickOnAdminMenuItem('health');\n    expect(await element(by.id('health-page-heading')).getText()).to.eq('Health Checks');\n  });\n\n  it('should load configuration', async () => {\n    await navBarPage.clickOnAdminMenuItem('configuration');\n    expect(await element(by.id('configuration-page-heading')).getText()).to.eq('Configuration');\n  });\n\n<%_ if (databaseType !== 'no' && databaseType !== 'cassandra') { _%>\n  it('should load audits', async () => {\n    await navBarPage.clickOnAdminMenuItem('audits');\n    expect(await element(by.id('audits-page-heading')).getText()).to.eq('Audits');\n  });\n\n<%_ } _%>\n  it('should load logs', async () => {\n    await navBarPage.clickOnAdminMenuItem('logs');\n    expect(await element(by.id('logs-page-heading')).getText()).to.eq('Logs');\n  });\n\n  after(async () => {\n    await navBarPage.autoSignOut()\n  });\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'Administration'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "NavBarPage",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "SignInPage",
        "type": "Identifier"
      },
      {
        "value": "before",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'/'",
        "type": "String"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "NavBarPage",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "getSignInPage",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "authenticationType",
        "type": "Identifier"
      },
      {
        "value": "'oauth2'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "waitUntilDisplayed",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "username",
        "type": "Identifier"
      },
      {
        "value": "sendKeys",
        "type": "Identifier"
      },
      {
        "value": "'admin'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "password",
        "type": "Identifier"
      },
      {
        "value": "sendKeys",
        "type": "Identifier"
      },
      {
        "value": "'admin'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "loginButton",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "waitUntilHidden",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitUntilDisplayed",
        "type": "Identifier"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "adminMenu",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "authenticationType",
        "type": "Identifier"
      },
      {
        "value": "'oauth2'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should load user management'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "clickOnAdminMenuItem",
        "type": "Identifier"
      },
      {
        "value": "'user-management'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "heading",
        "type": "Identifier"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "by",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'user-management-page-heading'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitUntilDisplayed",
        "type": "Identifier"
      },
      {
        "value": "heading",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "heading",
        "type": "Identifier"
      },
      {
        "value": "isPresent",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Keyword"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should load metrics'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "clickOnAdminMenuItem",
        "type": "Identifier"
      },
      {
        "value": "'metrics'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "by",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'metrics-page-heading'",
        "type": "String"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eq",
        "type": "Identifier"
      },
      {
        "value": "'Application Metrics'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should load health'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "clickOnAdminMenuItem",
        "type": "Identifier"
      },
      {
        "value": "'health'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "by",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'health-page-heading'",
        "type": "String"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eq",
        "type": "Identifier"
      },
      {
        "value": "'Health Checks'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should load configuration'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "clickOnAdminMenuItem",
        "type": "Identifier"
      },
      {
        "value": "'configuration'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "by",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'configuration-page-heading'",
        "type": "String"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eq",
        "type": "Identifier"
      },
      {
        "value": "'Configuration'",
        "type": "String"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "databaseType",
        "type": "Identifier"
      },
      {
        "value": "'no'",
        "type": "String"
      },
      {
        "value": "databaseType",
        "type": "Identifier"
      },
      {
        "value": "'cassandra'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should load audits'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "clickOnAdminMenuItem",
        "type": "Identifier"
      },
      {
        "value": "'audits'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "by",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'audits-page-heading'",
        "type": "String"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eq",
        "type": "Identifier"
      },
      {
        "value": "'Audits'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should load logs'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "clickOnAdminMenuItem",
        "type": "Identifier"
      },
      {
        "value": "'logs'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "by",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'logs-page-heading'",
        "type": "String"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eq",
        "type": "Identifier"
      },
      {
        "value": "'Logs'",
        "type": "String"
      },
      {
        "value": "after",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "autoSignOut",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/uber/baseweb/blob/086a8fdea491502e78d3cd822e256b6470204513/vrt/tests.vrt.js",
    "commit": "086a8fdea491502e78d3cd822e256b6470204513",
    "project_name": "baseweb",
    "project_author": "uber",
    "flaky_file": "/vrt/tests.vrt.js",
    "start_line": 33,
    "end_line": 77,
    "test_code": "describe('visual snapshot tests', () => {\n  getAllScenarioNames().forEach(scenarioName => {\n    const snapshotConfig = getSnapshotConfig(scenarioName);\n\n    if (snapshotConfig.skip) return;\n\n    it(`${scenarioName}__desktop`, async () => {\n      await preparePageForSnapshot(scenarioName, THEME.light, VIEWPORT.desktop);\n      await snapshot(`${scenarioName}__desktop`);\n    });\n\n    it(`${scenarioName}__mobile`, async () => {\n      await preparePageForSnapshot(scenarioName, THEME.light, VIEWPORT.mobile);\n      await snapshot(`${scenarioName}__mobile`, VIEWPORT.mobile);\n    });\n\n    if (!scenarioName.includes('rtl')) {\n      it(`${scenarioName}__dark`, async () => {\n        await preparePageForSnapshot(\n          scenarioName,\n          THEME.dark,\n          VIEWPORT.desktop,\n        );\n        await snapshot(`${scenarioName}__dark`);\n      });\n    }\n\n    snapshotConfig.interactions.forEach(interaction => {\n      it(`${scenarioName}__${interaction.name}`, async () => {\n        await preparePageForSnapshot(\n          scenarioName,\n          THEME.light,\n          VIEWPORT.desktop,\n        );\n\n        await interaction.behavior(page);\n\n        // Bad, but lets let things settle down after the interaction.\n        await page.waitFor(250);\n\n        await snapshot(`${scenarioName}__${interaction.name}`);\n      });\n    });\n  });\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'visual snapshot tests'",
        "type": "String"
      },
      {
        "value": "getAllScenarioNames",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "snapshotConfig",
        "type": "Identifier"
      },
      {
        "value": "getSnapshotConfig",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "snapshotConfig",
        "type": "Identifier"
      },
      {
        "value": "skip",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__desktop`",
        "type": "Template"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "preparePageForSnapshot",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "THEME",
        "type": "Identifier"
      },
      {
        "value": "light",
        "type": "Identifier"
      },
      {
        "value": "VIEWPORT",
        "type": "Identifier"
      },
      {
        "value": "desktop",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "snapshot",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__desktop`",
        "type": "Template"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__mobile`",
        "type": "Template"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "preparePageForSnapshot",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "THEME",
        "type": "Identifier"
      },
      {
        "value": "light",
        "type": "Identifier"
      },
      {
        "value": "VIEWPORT",
        "type": "Identifier"
      },
      {
        "value": "mobile",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "snapshot",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__mobile`",
        "type": "Template"
      },
      {
        "value": "VIEWPORT",
        "type": "Identifier"
      },
      {
        "value": "mobile",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "includes",
        "type": "Identifier"
      },
      {
        "value": "'rtl'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__dark`",
        "type": "Template"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "preparePageForSnapshot",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "THEME",
        "type": "Identifier"
      },
      {
        "value": "dark",
        "type": "Identifier"
      },
      {
        "value": "VIEWPORT",
        "type": "Identifier"
      },
      {
        "value": "desktop",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "snapshot",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__dark`",
        "type": "Template"
      },
      {
        "value": "snapshotConfig",
        "type": "Identifier"
      },
      {
        "value": "interactions",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "interaction",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__${",
        "type": "Template"
      },
      {
        "value": "interaction",
        "type": "Identifier"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "preparePageForSnapshot",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "THEME",
        "type": "Identifier"
      },
      {
        "value": "light",
        "type": "Identifier"
      },
      {
        "value": "VIEWPORT",
        "type": "Identifier"
      },
      {
        "value": "desktop",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "interaction",
        "type": "Identifier"
      },
      {
        "value": "behavior",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "snapshot",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__${",
        "type": "Template"
      },
      {
        "value": "interaction",
        "type": "Identifier"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/pinterest/gestalt/blob/f6c683b66b2d8b0ec87db283418459e87160a21f/packages/gestalt/src/__integration__/loadMore.integration.js",
    "commit": "f6c683b66b2d8b0ec87db283418459e87160a21f",
    "project_name": "gestalt",
    "project_author": "pinterest",
    "flaky_file": "/packages/gestalt/src/__integration__/loadMore.integration.js",
    "start_line": 8,
    "end_line": 56,
    "test_code": "describe('Masonry > Scrolls', () => {\n  it('Loads more when it gets to the bottom of the viewport', async () => {\n    // First load the page with javascript disabled to get the item position\n    await page.setViewport({\n      width: 3000,\n      height: 2000,\n    });\n    await page.goto('http://localhost:3001/Masonry?deferMount=1&manualFetch=1');\n\n    const serverItems = await page.$$(selectors.staticItem);\n\n    // Hard-coded value for initial pins in server.js\n    const initialServerItemCount = 20;\n    assert.equal(serverItems.length, initialServerItemCount);\n\n    await page.evaluate(() => {\n      window.dispatchEvent(new CustomEvent('trigger-mount'));\n    });\n\n    // We should fetch more items on render to fill the viewport.\n    await page.waitFor(PIN_INSERTION_TIME);\n    await page.evaluate(() => window.NEXT_FETCH());\n    const gridItems = await page.$$(selectors.gridItem);\n    const afterLoadItemCount = gridItems.length;\n    assert.ok(afterLoadItemCount > initialServerItemCount);\n    await page.waitFor(PIN_INSERTION_TIME);\n    await page.evaluate(() => window.NEXT_FETCH());\n\n    const initialFetchCount = await page.evaluate(\n      () => window.TEST_FETCH_COUNTS\n    );\n    assert.ok(initialFetchCount >= 1);\n\n    // Scroll a few times to triggle multiple scrolls.\n    await page.evaluate(() => window.scrollTo(0, window.scrollMaxY));\n    await page.waitFor(50);\n    await page.evaluate(() => window.scrollTo(0, window.scrollMaxY - 50));\n    await page.waitFor(50);\n    await page.evaluate(() => window.scrollTo(0, window.scrollMaxY));\n    await page.waitFor(PIN_INSERTION_TIME);\n    await page.evaluate(() => window.NEXT_FETCH());\n\n    const newFetchCount = await page.evaluate(() => window.TEST_FETCH_COUNTS);\n    assert.ok(newFetchCount >= initialFetchCount + 1);\n\n    const gridItemsAfter = await page.$$(selectors.gridItem);\n    assert.ok(gridItemsAfter.length > afterLoadItemCount);\n  });\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'Masonry > Scrolls'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'Loads more when it gets to the bottom of the viewport'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "setViewport",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "3000",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "2000",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "goto",
        "type": "Identifier"
      },
      {
        "value": "'http://localhost:3001/Masonry?deferMount=1&manualFetch=1'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "serverItems",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$$",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "staticItem",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "initialServerItemCount",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "serverItems",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "initialServerItemCount",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "dispatchEvent",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "CustomEvent",
        "type": "Identifier"
      },
      {
        "value": "'trigger-mount'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "PIN_INSERTION_TIME",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "NEXT_FETCH",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "gridItems",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$$",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "gridItem",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "afterLoadItemCount",
        "type": "Identifier"
      },
      {
        "value": "gridItems",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "ok",
        "type": "Identifier"
      },
      {
        "value": "afterLoadItemCount",
        "type": "Identifier"
      },
      {
        "value": "initialServerItemCount",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "PIN_INSERTION_TIME",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "NEXT_FETCH",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "initialFetchCount",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "TEST_FETCH_COUNTS",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "ok",
        "type": "Identifier"
      },
      {
        "value": "initialFetchCount",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "scrollTo",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "scrollMaxY",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "scrollTo",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "scrollMaxY",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "scrollTo",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "scrollMaxY",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "PIN_INSERTION_TIME",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "NEXT_FETCH",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "newFetchCount",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "TEST_FETCH_COUNTS",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "ok",
        "type": "Identifier"
      },
      {
        "value": "newFetchCount",
        "type": "Identifier"
      },
      {
        "value": "initialFetchCount",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "gridItemsAfter",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$$",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "gridItem",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "ok",
        "type": "Identifier"
      },
      {
        "value": "gridItemsAfter",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "afterLoadItemCount",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/pinterest/gestalt/blob/f6c683b66b2d8b0ec87db283418459e87160a21f/packages/gestalt/src/__integration__/nullItems.integration.js",
    "commit": "f6c683b66b2d8b0ec87db283418459e87160a21f",
    "project_name": "gestalt",
    "project_author": "pinterest",
    "flaky_file": "/packages/gestalt/src/__integration__/nullItems.integration.js",
    "start_line": 6,
    "end_line": 23,
    "test_code": "describe('Masonry > Null items', () => {\n  it('Should not throw an error when null/undefined items are inserted', async () => {\n    await page.setViewport({\n      width: 3000,\n      height: 2000,\n    });\n    await page.goto('http://localhost:3001/Masonry');\n\n    const initialErrors = await page.evaluate(() => window.ERROR_COUNT);\n    assert.equal(initialErrors, 0);\n    // click the insert null items button\n    const insertTrigger = await page.$(selectors.insertNullItems);\n    await insertTrigger.click();\n\n    const afterErrors = await page.evaluate(() => window.ERROR_COUNT);\n    assert.equal(afterErrors, 0);\n  });\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'Masonry > Null items'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'Should not throw an error when null/undefined items are inserted'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "setViewport",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "3000",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "2000",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "goto",
        "type": "Identifier"
      },
      {
        "value": "'http://localhost:3001/Masonry'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "initialErrors",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "ERROR_COUNT",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "initialErrors",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "insertTrigger",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "insertNullItems",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "insertTrigger",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "afterErrors",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "ERROR_COUNT",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "afterErrors",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/coralproject/talk/blob/54296fa48417d838beb4971fc4aaee161488113c/src/core/client/admin/test/configure/general.spec.tsx",
    "commit": "54296fa48417d838beb4971fc4aaee161488113c",
    "project_name": "talk",
    "project_author": "coralproject",
    "flaky_file": "/src/core/client/admin/test/configure/general.spec.tsx",
    "start_line": 69,
    "end_line": 115,
    "test_code": "it(\"change language\", async () => {\n  const resolvers = createResolversStub<GQLResolver>({\n    Mutation: {\n      updateSettings: ({ variables }) => {\n        expectAndFail(variables.settings.locale).toEqual(\"es\");\n        return {\n          settings: pureMerge(settings, variables.settings),\n        };\n      },\n    },\n  });\n  const {\n    context: { changeLocale },\n    configureContainer,\n    generalContainer,\n    saveChangesButton,\n  } = await createTestRenderer({ resolvers });\n\n  const languageField = within(generalContainer).getByLabelText(\"Language\");\n\n  // Let's change the language.\n  act(() => languageField.props.onChange(\"es\"));\n\n  // Send form\n  await act(async () => {\n    await within(configureContainer)\n      .getByType(\"form\")\n      .props.onSubmit();\n  });\n\n  // Submit button and text field should be disabled.\n  await wait(() => {\n    expect(saveChangesButton.props.disabled).toBe(true);\n  });\n\n  // Wait for submission to be finished\n  await act(async () => {\n    await wait(() => {\n      expect(resolvers.Mutation!.updateSettings!.called).toBe(true);\n    });\n  });\n\n  // Wait for client to change language.\n  await wait(() => {\n    expect((changeLocale as SinonStub).called).toBe(true);\n  });\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"change language\"",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "resolvers",
        "type": "Identifier"
      },
      {
        "value": "createResolversStub",
        "type": "Identifier"
      },
      {
        "value": "GQLResolver",
        "type": "Identifier"
      },
      {
        "value": "Mutation",
        "type": "Identifier"
      },
      {
        "value": "updateSettings",
        "type": "Identifier"
      },
      {
        "value": "variables",
        "type": "Identifier"
      },
      {
        "value": "expectAndFail",
        "type": "Identifier"
      },
      {
        "value": "variables",
        "type": "Identifier"
      },
      {
        "value": "settings",
        "type": "Identifier"
      },
      {
        "value": "locale",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "\"es\"",
        "type": "String"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "settings",
        "type": "Identifier"
      },
      {
        "value": "pureMerge",
        "type": "Identifier"
      },
      {
        "value": "settings",
        "type": "Identifier"
      },
      {
        "value": "variables",
        "type": "Identifier"
      },
      {
        "value": "settings",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "changeLocale",
        "type": "Identifier"
      },
      {
        "value": "configureContainer",
        "type": "Identifier"
      },
      {
        "value": "generalContainer",
        "type": "Identifier"
      },
      {
        "value": "saveChangesButton",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "createTestRenderer",
        "type": "Identifier"
      },
      {
        "value": "resolvers",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "languageField",
        "type": "Identifier"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "generalContainer",
        "type": "Identifier"
      },
      {
        "value": "getByLabelText",
        "type": "Identifier"
      },
      {
        "value": "\"Language\"",
        "type": "String"
      },
      {
        "value": "act",
        "type": "Identifier"
      },
      {
        "value": "languageField",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "onChange",
        "type": "Identifier"
      },
      {
        "value": "\"es\"",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "act",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "within",
        "type": "Identifier"
      },
      {
        "value": "configureContainer",
        "type": "Identifier"
      },
      {
        "value": "getByType",
        "type": "Identifier"
      },
      {
        "value": "\"form\"",
        "type": "String"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "onSubmit",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "saveChangesButton",
        "type": "Identifier"
      },
      {
        "value": "props",
        "type": "Identifier"
      },
      {
        "value": "disabled",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "act",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "resolvers",
        "type": "Identifier"
      },
      {
        "value": "Mutation",
        "type": "Identifier"
      },
      {
        "value": "updateSettings",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "changeLocale",
        "type": "Identifier"
      },
      {
        "value": "as",
        "type": "Identifier"
      },
      {
        "value": "SinonStub",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/the-noob/material-ui/blob/032d7ad3cde100d8d7b3223b71198e3fe6b8735f/src/Tooltip/Tooltip.spec.js",
    "commit": "032d7ad3cde100d8d7b3223b71198e3fe6b8735f",
    "project_name": "material-ui",
    "project_author": "mui-org",
    "flaky_file": "/src/Tooltip/Tooltip.spec.js",
    "start_line": 68,
    "end_line": 79,
    "test_code": "it('should render with the user, root and tooltip classes', () => {\n  const wrapper = shallow(\n    <Tooltip className=\"woofTooltip\" title=\"Hello World\">\n      <span>Hello World</span>\n    </Tooltip>,\n  );\n  assert.strictEqual(wrapper.childAt(0).hasClass('woofTooltip'), true);\n  assert.strictEqual(wrapper.childAt(0).hasClass(classes.root), true);\n\n  const popperChildren = getPopperChildren(wrapper);\n  assert.strictEqual(popperChildren.childAt(0).hasClass(classes.tooltip), true);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should render with the user, root and tooltip classes'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "shallow",
        "type": "Identifier"
      },
      {
        "value": "Tooltip",
        "type": "JSXIdentifier"
      },
      {
        "value": "className",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"woofTooltip\"",
        "type": "JSXText"
      },
      {
        "value": "title",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"Hello World\"",
        "type": "JSXText"
      },
      {
        "value": "\n      ",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "Hello World",
        "type": "JSXText"
      },
      {
        "value": "span",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n    ",
        "type": "JSXText"
      },
      {
        "value": "Tooltip",
        "type": "JSXIdentifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "strictEqual",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "childAt",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hasClass",
        "type": "Identifier"
      },
      {
        "value": "'woofTooltip'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "strictEqual",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "childAt",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hasClass",
        "type": "Identifier"
      },
      {
        "value": "classes",
        "type": "Identifier"
      },
      {
        "value": "root",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "popperChildren",
        "type": "Identifier"
      },
      {
        "value": "getPopperChildren",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "strictEqual",
        "type": "Identifier"
      },
      {
        "value": "popperChildren",
        "type": "Identifier"
      },
      {
        "value": "childAt",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hasClass",
        "type": "Identifier"
      },
      {
        "value": "classes",
        "type": "Identifier"
      },
      {
        "value": "tooltip",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/angular/blob/deca6a60ddddb45caae97942977591204a7e56f9/aio/tests/e2e/app.e2e-spec.ts ",
    "commit": "deca6a60ddddb45caae97942977591204a7e56f9",
    "project_name": "angular",
    "project_author": "angular",
    "flaky_file": "/aio/tests/e2e/app.e2e-spec.ts",
    "start_line": 143,
    "end_line": 173,
    "test_code": "it('should have contributors listed in each group', () => {\n    // WebDriver calls `scrollIntoView()` on the element to bring it into the visible area of the\n    // browser, before clicking it. By default, this aligns the top of the element to the top of\n    // the window. As a result, the element may end up behing the fixed top menu, thus being\n    // unclickable. To avoid this, we click the element directly using JavaScript instead.\n    const clickButton = (elementFinder: ElementFinder) => elementFinder.getWebElement().then(\n        webElement => browser.executeScript('arguments[0].click()', webElement));\n    const getContributorNames =\n        () => contributors.all(by.css('h3')).map<string>(c => c && c.getText());\n\n    const names1 = getContributorNames();\n    expect(contributors.count()).toBeGreaterThan(1);\n\n    clickButton(groupButtons.get(1));\n    const names2 = getContributorNames();\n    expect(contributors.count()).toBeGreaterThan(1);\n    expect(names2).not.toEqual(names1);\n\n    clickButton(groupButtons.get(2));\n    const names3 = getContributorNames();\n    expect(contributors.count()).toBeGreaterThan(1);\n    expect(names3).not.toEqual(names2);\n    expect(names3).not.toEqual(names1);\n\n    clickButton(groupButtons.get(0));\n    const names4 = getContributorNames();\n    expect(contributors.count()).toBeGreaterThan(1);\n    expect(names4).not.toEqual(names3);\n    expect(names4).not.toEqual(names2);\n    expect(names4).toEqual(names1);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should have contributors listed in each group'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "clickButton",
        "type": "Identifier"
      },
      {
        "value": "elementFinder",
        "type": "Identifier"
      },
      {
        "value": "ElementFinder",
        "type": "Identifier"
      },
      {
        "value": "elementFinder",
        "type": "Identifier"
      },
      {
        "value": "getWebElement",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "webElement",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "executeScript",
        "type": "Identifier"
      },
      {
        "value": "'arguments[0].click()'",
        "type": "String"
      },
      {
        "value": "webElement",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "getContributorNames",
        "type": "Identifier"
      },
      {
        "value": "contributors",
        "type": "Identifier"
      },
      {
        "value": "all",
        "type": "Identifier"
      },
      {
        "value": "by",
        "type": "Identifier"
      },
      {
        "value": "css",
        "type": "Identifier"
      },
      {
        "value": "'h3'",
        "type": "String"
      },
      {
        "value": "map",
        "type": "Identifier"
      },
      {
        "value": "string",
        "type": "Identifier"
      },
      {
        "value": "c",
        "type": "Identifier"
      },
      {
        "value": "c",
        "type": "Identifier"
      },
      {
        "value": "c",
        "type": "Identifier"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "names1",
        "type": "Identifier"
      },
      {
        "value": "getContributorNames",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "contributors",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "toBeGreaterThan",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "clickButton",
        "type": "Identifier"
      },
      {
        "value": "groupButtons",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "names2",
        "type": "Identifier"
      },
      {
        "value": "getContributorNames",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "contributors",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "toBeGreaterThan",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "names2",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "names1",
        "type": "Identifier"
      },
      {
        "value": "clickButton",
        "type": "Identifier"
      },
      {
        "value": "groupButtons",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "names3",
        "type": "Identifier"
      },
      {
        "value": "getContributorNames",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "contributors",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "toBeGreaterThan",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "names3",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "names2",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "names3",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "names1",
        "type": "Identifier"
      },
      {
        "value": "clickButton",
        "type": "Identifier"
      },
      {
        "value": "groupButtons",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "names4",
        "type": "Identifier"
      },
      {
        "value": "getContributorNames",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "contributors",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "toBeGreaterThan",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "names4",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "names3",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "names4",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "names2",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "names4",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "names1",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/angular/blob/31c462ae3f5b80002b6ef364706ddd73c0ed6f82/aio/content/examples/animations/e2e/src/app.e2e-spec.ts",
    "commit": "31c462ae3f5b80002b6ef364706ddd73c0ed6f82",
    "project_name": "angular",
    "project_author": "angular",
    "flaky_file": "/aio/content/examples/animations/e2e/src/app.e2e-spec.ts",
    "start_line": 27,
    "end_line": 81,
    "test_code": "describe('Open/Close Component', () => {\n  const closedHeight = '100px';\n  const openHeight = '200px';\n\n  beforeAll(async () => {\n    await openCloseHref.click();\n    sleepFor();\n  });\n\n  it('should be open', async () => {\n    const toggleButton = openClose.getToggleButton();\n    const container = openClose.getComponentContainer();\n    let text = await container.getText();\n\n    if (text.includes('Closed')) {\n      await toggleButton.click();\n      await browser.wait(async () => await container.getCssValue('height') === openHeight, 2000);\n    }\n\n    text = await container.getText();\n    const containerHeight = await container.getCssValue('height');\n\n    expect(text).toContain('The box is now Open!');\n    expect(containerHeight).toBe(openHeight);\n  });\n\n  it('should be closed', async () => {\n    const toggleButton = openClose.getToggleButton();\n    const container = openClose.getComponentContainer();\n    let text = await container.getText();\n\n    if (text.includes('Open')) {\n      await toggleButton.click();\n      await browser.wait(async () => await container.getCssValue('height') === closedHeight, 2000);\n    }\n\n    text = await container.getText();\n    const containerHeight = await container.getCssValue('height');\n\n    expect(text).toContain('The box is now Closed!');\n    expect(containerHeight).toBe(closedHeight);\n  });\n\n  it('should log animation events', async () => {\n    const toggleButton = openClose.getToggleButton();\n    const loggingCheckbox = openClose.getLoggingCheckbox();\n    await loggingCheckbox.click();\n    await toggleButton.click();\n\n    const logs = await browser.manage().logs().get(logging.Type.BROWSER);\n    const animationMessages = logs.filter(({ message }) => message.includes('Animation'));\n\n    expect(animationMessages.length).toBeGreaterThan(0);\n  });\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'Open/Close Component'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "closedHeight",
        "type": "Identifier"
      },
      {
        "value": "'100px'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "openHeight",
        "type": "Identifier"
      },
      {
        "value": "'200px'",
        "type": "String"
      },
      {
        "value": "beforeAll",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "openCloseHref",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "sleepFor",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should be open'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "toggleButton",
        "type": "Identifier"
      },
      {
        "value": "openClose",
        "type": "Identifier"
      },
      {
        "value": "getToggleButton",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "openClose",
        "type": "Identifier"
      },
      {
        "value": "getComponentContainer",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "includes",
        "type": "Identifier"
      },
      {
        "value": "'Closed'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "toggleButton",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getCssValue",
        "type": "Identifier"
      },
      {
        "value": "'height'",
        "type": "String"
      },
      {
        "value": "openHeight",
        "type": "Identifier"
      },
      {
        "value": "2000",
        "type": "Numeric"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "containerHeight",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getCssValue",
        "type": "Identifier"
      },
      {
        "value": "'height'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "toContain",
        "type": "Identifier"
      },
      {
        "value": "'The box is now Open!'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "containerHeight",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "openHeight",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should be closed'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "toggleButton",
        "type": "Identifier"
      },
      {
        "value": "openClose",
        "type": "Identifier"
      },
      {
        "value": "getToggleButton",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "openClose",
        "type": "Identifier"
      },
      {
        "value": "getComponentContainer",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "includes",
        "type": "Identifier"
      },
      {
        "value": "'Open'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "toggleButton",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getCssValue",
        "type": "Identifier"
      },
      {
        "value": "'height'",
        "type": "String"
      },
      {
        "value": "closedHeight",
        "type": "Identifier"
      },
      {
        "value": "2000",
        "type": "Numeric"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "containerHeight",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getCssValue",
        "type": "Identifier"
      },
      {
        "value": "'height'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "toContain",
        "type": "Identifier"
      },
      {
        "value": "'The box is now Closed!'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "containerHeight",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "closedHeight",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should log animation events'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "toggleButton",
        "type": "Identifier"
      },
      {
        "value": "openClose",
        "type": "Identifier"
      },
      {
        "value": "getToggleButton",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "loggingCheckbox",
        "type": "Identifier"
      },
      {
        "value": "openClose",
        "type": "Identifier"
      },
      {
        "value": "getLoggingCheckbox",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "loggingCheckbox",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "toggleButton",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "logs",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "manage",
        "type": "Identifier"
      },
      {
        "value": "logs",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "logging",
        "type": "Identifier"
      },
      {
        "value": "Type",
        "type": "Identifier"
      },
      {
        "value": "BROWSER",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "animationMessages",
        "type": "Identifier"
      },
      {
        "value": "logs",
        "type": "Identifier"
      },
      {
        "value": "filter",
        "type": "Identifier"
      },
      {
        "value": "message",
        "type": "Identifier"
      },
      {
        "value": "message",
        "type": "Identifier"
      },
      {
        "value": "includes",
        "type": "Identifier"
      },
      {
        "value": "'Animation'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "animationMessages",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toBeGreaterThan",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/angular/blob/31c462ae3f5b80002b6ef364706ddd73c0ed6f82/aio/content/examples/animations/e2e/src/app.e2e-spec.ts",
    "commit": "31c462ae3f5b80002b6ef364706ddd73c0ed6f82",
    "project_name": "angular",
    "project_author": "angular",
    "flaky_file": "/aio/content/examples/animations/e2e/src/app.e2e-spec.ts",
    "start_line": 109,
    "end_line": 124,
    "test_code": "it('should be active with a blue background', async () => {\n  const toggleButton = statusSlider.getToggleButton();\n  const container = statusSlider.getComponentContainer();\n  let text = await container.getText();\n\n  if (text === 'Inactive') {\n    await toggleButton.click();\n    await browser.wait(async () => await container.getCssValue('backgroundColor') === activeColor, 2000);\n  }\n\n  text = await container.getText();\n  const bgColor = await container.getCssValue('backgroundColor');\n\n  expect(text).toBe('Active');\n  expect(bgColor).toBe(activeColor);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should be active with a blue background'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "toggleButton",
        "type": "Identifier"
      },
      {
        "value": "statusSlider",
        "type": "Identifier"
      },
      {
        "value": "getToggleButton",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "statusSlider",
        "type": "Identifier"
      },
      {
        "value": "getComponentContainer",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "'Inactive'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "toggleButton",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getCssValue",
        "type": "Identifier"
      },
      {
        "value": "'backgroundColor'",
        "type": "String"
      },
      {
        "value": "activeColor",
        "type": "Identifier"
      },
      {
        "value": "2000",
        "type": "Numeric"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getText",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "bgColor",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "getCssValue",
        "type": "Identifier"
      },
      {
        "value": "'backgroundColor'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'Active'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "bgColor",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "activeColor",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/angular/blob/31c462ae3f5b80002b6ef364706ddd73c0ed6f82/aio/content/examples/animations/e2e/src/app.e2e-spec.ts",
    "commit": "31c462ae3f5b80002b6ef364706ddd73c0ed6f82",
    "project_name": "angular",
    "project_author": "angular",
    "flaky_file": "/aio/content/examples/animations/e2e/src/app.e2e-spec.ts",
    "start_line": 161,
    "end_line": 168,
    "test_code": "it('should remove the hero from the list when clicked', async () => {\n  const heroesList = enterLeave.getHeroesList();\n  const total = await heroesList.count();\n  const hero = heroesList.get(0);\n\n  await hero.click();\n  await browser.wait(async () => await heroesList.count() < total, 2000);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should remove the hero from the list when clicked'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "enterLeave",
        "type": "Identifier"
      },
      {
        "value": "getHeroesList",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "total",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "hero",
        "type": "Identifier"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "hero",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "total",
        "type": "Identifier"
      },
      {
        "value": "2000",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/angular/blob/31c462ae3f5b80002b6ef364706ddd73c0ed6f82/aio/content/examples/animations/e2e/src/app.e2e-spec.ts",
    "commit": "31c462ae3f5b80002b6ef364706ddd73c0ed6f82",
    "project_name": "angular",
    "project_author": "angular",
    "flaky_file": "/aio/content/examples/animations/e2e/src/app.e2e-spec.ts",
    "start_line": 185,
    "end_line": 192,
    "test_code": "it('should remove the hero from the list when clicked', async () => {\n  const heroesList = auto.getHeroesList();\n  const total = await heroesList.count();\n  const hero = heroesList.get(0);\n\n  await hero.click();\n  await browser.wait(async () => await heroesList.count() < total, 2000);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should remove the hero from the list when clicked'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "auto",
        "type": "Identifier"
      },
      {
        "value": "getHeroesList",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "total",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "hero",
        "type": "Identifier"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "hero",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "total",
        "type": "Identifier"
      },
      {
        "value": "2000",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/angular/blob/31c462ae3f5b80002b6ef364706ddd73c0ed6f82/aio/content/examples/animations/e2e/src/app.e2e-spec.ts",
    "commit": "31c462ae3f5b80002b6ef364706ddd73c0ed6f82",
    "project_name": "angular",
    "project_author": "angular",
    "flaky_file": "/aio/content/examples/animations/e2e/src/app.e2e-spec.ts",
    "start_line": 208,
    "end_line": 219,
    "test_code": "it('should filter down the list when a search is performed', async () => {\n  const heroesList = filterStagger.getHeroesList();\n  const total = await heroesList.count();\n\n  const formInput = filterStagger.getFormInput();\n  await formInput.sendKeys('Mag');\n\n  await browser.wait(async () => await heroesList.count() === 2, 2000);\n\n  const newTotal = await heroesList.count();\n  expect(newTotal).toBeLessThan(total);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should filter down the list when a search is performed'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "filterStagger",
        "type": "Identifier"
      },
      {
        "value": "getHeroesList",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "total",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "formInput",
        "type": "Identifier"
      },
      {
        "value": "filterStagger",
        "type": "Identifier"
      },
      {
        "value": "getFormInput",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "formInput",
        "type": "Identifier"
      },
      {
        "value": "sendKeys",
        "type": "Identifier"
      },
      {
        "value": "'Mag'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "2000",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "newTotal",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "heroesList",
        "type": "Identifier"
      },
      {
        "value": "count",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "newTotal",
        "type": "Identifier"
      },
      {
        "value": "toBeLessThan",
        "type": "Identifier"
      },
      {
        "value": "total",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/components/blob/6ae74a0eb21268d4b107a052a8cf8ae63078bf99/src/material-experimental/mdc-menu/menu.spec.ts",
    "commit": "6ae74a0eb21268d4b107a052a8cf8ae63078bf99",
    "project_name": "components",
    "project_author": "angular",
    "flaky_file": "/src/material-experimental/mdc-menu/menu.spec.ts",
    "start_line": 851,
    "end_line": 861,
    "test_code": "it('should focus the menu panel if all items are disabled', fakeAsync(() => {\n  const fixture = createComponent(SimpleMenuWithRepeater, [], [FakeIcon]);\n  fixture.componentInstance.items.forEach(item => item.disabled = true);\n  fixture.detectChanges();\n  fixture.componentInstance.trigger.openMenu();\n  fixture.detectChanges();\n  tick(500);\n\n  expect(document.activeElement)\n    .toBe(overlayContainerElement.querySelector('.mat-mdc-menu-panel'));\n}));\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should focus the menu panel if all items are disabled'",
        "type": "String"
      },
      {
        "value": "fakeAsync",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "createComponent",
        "type": "Identifier"
      },
      {
        "value": "SimpleMenuWithRepeater",
        "type": "Identifier"
      },
      {
        "value": "FakeIcon",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "items",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "item",
        "type": "Identifier"
      },
      {
        "value": "item",
        "type": "Identifier"
      },
      {
        "value": "disabled",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "openMenu",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "tick",
        "type": "Identifier"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "activeElement",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "overlayContainerElement",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.mat-mdc-menu-panel'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/components/blob/6ae74a0eb21268d4b107a052a8cf8ae63078bf99/src/material-experimental/mdc-menu/menu.spec.ts",
    "commit": "6ae74a0eb21268d4b107a052a8cf8ae63078bf99",
    "project_name": "components",
    "project_author": "angular",
    "flaky_file": "/src/material-experimental/mdc-menu/menu.spec.ts",
    "start_line": 863,
    "end_line": 873,
    "test_code": "it('should focus the menu panel if all items are disabled inside lazy content', fakeAsync(() => {\n  const fixture = createComponent(SimpleMenuWithRepeaterInLazyContent, [], [FakeIcon]);\n  fixture.componentInstance.items.forEach(item => item.disabled = true);\n  fixture.detectChanges();\n  fixture.componentInstance.trigger.openMenu();\n  fixture.detectChanges();\n  tick(500);\n\n  expect(document.activeElement)\n    .toBe(overlayContainerElement.querySelector('.mat-mdc-menu-panel'));\n}));\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should focus the menu panel if all items are disabled inside lazy content'",
        "type": "String"
      },
      {
        "value": "fakeAsync",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "createComponent",
        "type": "Identifier"
      },
      {
        "value": "SimpleMenuWithRepeaterInLazyContent",
        "type": "Identifier"
      },
      {
        "value": "FakeIcon",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "items",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "item",
        "type": "Identifier"
      },
      {
        "value": "item",
        "type": "Identifier"
      },
      {
        "value": "disabled",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "openMenu",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "tick",
        "type": "Identifier"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "activeElement",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "overlayContainerElement",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.mat-mdc-menu-panel'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/components/blob/86da318c280ec6dc10260c411352086fc87515de/src/material/slide-toggle/slide-toggle.spec.ts",
    "commit": "86da318c280ec6dc10260c411352086fc87515de",
    "project_name": "components",
    "project_author": "angular",
    "flaky_file": "/src/material/slide-toggle/slide-toggle.spec.ts",
    "start_line": 392,
    "end_line": 433,
    "test_code": "it('should not change value on click when click action is noop', () => {\n  TestBed\n    .resetTestingModule()\n    .configureTestingModule({\n      imports: [MatSlideToggleModule],\n      declarations: [SlideToggleBasic],\n      providers: [\n        {\n          provide: HAMMER_GESTURE_CONFIG,\n          useFactory: () => gestureConfig = new TestGestureConfig()\n        },\n        { provide: MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, useValue: { disableToggleValue: true } },\n      ]\n    });\n  const fixture = TestBed.createComponent(SlideToggleBasic);\n  fixture.detectChanges();\n\n  const testComponent = fixture.debugElement.componentInstance;\n  const slideToggleDebug = fixture.debugElement.query(By.css('mat-slide-toggle'));\n\n  const slideToggle = slideToggleDebug.componentInstance;\n  const inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\n  const labelElement = fixture.debugElement.query(By.css('label')).nativeElement;\n\n  expect(testComponent.toggleTriggered).toBe(0);\n  expect(testComponent.dragTriggered).toBe(0);\n  expect(slideToggle.checked).toBe(false, 'Expect slide toggle value not changed');\n\n  labelElement.click();\n  fixture.detectChanges();\n\n  expect(slideToggle.checked).toBe(false, 'Expect slide toggle value not changed');\n  expect(testComponent.toggleTriggered).toBe(1, 'Expect toggle once');\n  expect(testComponent.dragTriggered).toBe(0);\n\n  inputElement.click();\n  fixture.detectChanges();\n\n  expect(slideToggle.checked).toBe(false, 'Expect slide toggle value not changed');\n  expect(testComponent.toggleTriggered).toBe(2, 'Expect toggle twice');\n  expect(testComponent.dragTriggered).toBe(0);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should not change value on click when click action is noop'",
        "type": "String"
      },
      {
        "value": "TestBed",
        "type": "Identifier"
      },
      {
        "value": "resetTestingModule",
        "type": "Identifier"
      },
      {
        "value": "configureTestingModule",
        "type": "Identifier"
      },
      {
        "value": "imports",
        "type": "Identifier"
      },
      {
        "value": "MatSlideToggleModule",
        "type": "Identifier"
      },
      {
        "value": "declarations",
        "type": "Identifier"
      },
      {
        "value": "SlideToggleBasic",
        "type": "Identifier"
      },
      {
        "value": "providers",
        "type": "Identifier"
      },
      {
        "value": "provide",
        "type": "Identifier"
      },
      {
        "value": "HAMMER_GESTURE_CONFIG",
        "type": "Identifier"
      },
      {
        "value": "useFactory",
        "type": "Identifier"
      },
      {
        "value": "gestureConfig",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "TestGestureConfig",
        "type": "Identifier"
      },
      {
        "value": "provide",
        "type": "Identifier"
      },
      {
        "value": "MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS",
        "type": "Identifier"
      },
      {
        "value": "useValue",
        "type": "Identifier"
      },
      {
        "value": "disableToggleValue",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "TestBed",
        "type": "Identifier"
      },
      {
        "value": "createComponent",
        "type": "Identifier"
      },
      {
        "value": "SlideToggleBasic",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "testComponent",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "debugElement",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "slideToggleDebug",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "debugElement",
        "type": "Identifier"
      },
      {
        "value": "query",
        "type": "Identifier"
      },
      {
        "value": "By",
        "type": "Identifier"
      },
      {
        "value": "css",
        "type": "Identifier"
      },
      {
        "value": "'mat-slide-toggle'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "slideToggle",
        "type": "Identifier"
      },
      {
        "value": "slideToggleDebug",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "inputElement",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "debugElement",
        "type": "Identifier"
      },
      {
        "value": "query",
        "type": "Identifier"
      },
      {
        "value": "By",
        "type": "Identifier"
      },
      {
        "value": "css",
        "type": "Identifier"
      },
      {
        "value": "'input'",
        "type": "String"
      },
      {
        "value": "nativeElement",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "labelElement",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "debugElement",
        "type": "Identifier"
      },
      {
        "value": "query",
        "type": "Identifier"
      },
      {
        "value": "By",
        "type": "Identifier"
      },
      {
        "value": "css",
        "type": "Identifier"
      },
      {
        "value": "'label'",
        "type": "String"
      },
      {
        "value": "nativeElement",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "testComponent",
        "type": "Identifier"
      },
      {
        "value": "toggleTriggered",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "testComponent",
        "type": "Identifier"
      },
      {
        "value": "dragTriggered",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "slideToggle",
        "type": "Identifier"
      },
      {
        "value": "checked",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "'Expect slide toggle value not changed'",
        "type": "String"
      },
      {
        "value": "labelElement",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "slideToggle",
        "type": "Identifier"
      },
      {
        "value": "checked",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "'Expect slide toggle value not changed'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "testComponent",
        "type": "Identifier"
      },
      {
        "value": "toggleTriggered",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'Expect toggle once'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "testComponent",
        "type": "Identifier"
      },
      {
        "value": "dragTriggered",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "inputElement",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "slideToggle",
        "type": "Identifier"
      },
      {
        "value": "checked",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "'Expect slide toggle value not changed'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "testComponent",
        "type": "Identifier"
      },
      {
        "value": "toggleTriggered",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "'Expect toggle twice'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "testComponent",
        "type": "Identifier"
      },
      {
        "value": "dragTriggered",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/components/blob/253bff61613f39a463a83b24475af66c1de667d2/src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.spec.ts",
    "commit": "253bff61613f39a463a83b24475af66c1de667d2",
    "project_name": "components",
    "project_author": "angular",
    "flaky_file": "/src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.spec.ts",
    "start_line": 10,
    "end_line": 137,
    "test_code": "describe('OverlayKeyboardDispatcher', () => {\n  let keyboardDispatcher: OverlayKeyboardDispatcher;\n  let overlay: Overlay;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [OverlayModule, TestComponentModule],\n    });\n\n    inject([OverlayKeyboardDispatcher, Overlay], (kbd: OverlayKeyboardDispatcher, o: Overlay) => {\n      keyboardDispatcher = kbd;\n      overlay = o;\n    })();\n  });\n\n  afterEach(inject([OverlayContainer], (overlayContainer: OverlayContainer) => {\n    overlayContainer.ngOnDestroy();\n  }));\n\n  it('should track overlays in order as they are attached and detached', () => {\n    const overlayOne = overlay.create();\n    const overlayTwo = overlay.create();\n\n    // Attach overlays\n    keyboardDispatcher.add(overlayOne);\n    keyboardDispatcher.add(overlayTwo);\n\n    expect(keyboardDispatcher._attachedOverlays.length)\n      .toBe(2, 'Expected both overlays to be tracked.');\n    expect(keyboardDispatcher._attachedOverlays[0]).toBe(overlayOne, 'Expected one to be first.');\n    expect(keyboardDispatcher._attachedOverlays[1]).toBe(overlayTwo, 'Expected two to be last.');\n\n    // Detach first one and re-attach it\n    keyboardDispatcher.remove(overlayOne);\n    keyboardDispatcher.add(overlayOne);\n\n    expect(keyboardDispatcher._attachedOverlays[0])\n      .toBe(overlayTwo, 'Expected two to now be first.');\n    expect(keyboardDispatcher._attachedOverlays[1])\n      .toBe(overlayOne, 'Expected one to now be last.');\n  });\n\n  it('should dispatch body keyboard events to the most recently attached overlay', () => {\n    const overlayOne = overlay.create();\n    const overlayTwo = overlay.create();\n    const overlayOneSpy = jasmine.createSpy('overlayOne keyboard event spy');\n    const overlayTwoSpy = jasmine.createSpy('overlayOne keyboard event spy');\n\n    overlayOne.keydownEvents().subscribe(overlayOneSpy);\n    overlayTwo.keydownEvents().subscribe(overlayTwoSpy);\n\n    // Attach overlays\n    keyboardDispatcher.add(overlayOne);\n    keyboardDispatcher.add(overlayTwo);\n\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE);\n\n    // Most recent overlay should receive event\n    expect(overlayOneSpy).not.toHaveBeenCalled();\n    expect(overlayTwoSpy).toHaveBeenCalled();\n  });\n\n  it('should dispatch targeted keyboard events to the overlay containing that target', () => {\n    const overlayOne = overlay.create();\n    const overlayTwo = overlay.create();\n    const overlayOneSpy = jasmine.createSpy('overlayOne keyboard event spy');\n    const overlayTwoSpy = jasmine.createSpy('overlayOne keyboard event spy');\n\n    overlayOne.keydownEvents().subscribe(overlayOneSpy);\n    overlayTwo.keydownEvents().subscribe(overlayTwoSpy);\n\n    // Attach overlays\n    keyboardDispatcher.add(overlayOne);\n    keyboardDispatcher.add(overlayTwo);\n\n    const overlayOnePane = overlayOne.overlayElement;\n\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE, overlayOnePane);\n\n    // Targeted overlay should receive event\n    expect(overlayOneSpy).toHaveBeenCalled();\n    expect(overlayTwoSpy).not.toHaveBeenCalled();\n  });\n\n  it('should complete the keydown stream on dispose', () => {\n    const overlayRef = overlay.create();\n    const completeSpy = jasmine.createSpy('keydown complete spy');\n\n    overlayRef.keydownEvents().subscribe(undefined, undefined, completeSpy);\n\n    overlayRef.dispose();\n\n    expect(completeSpy).toHaveBeenCalled();\n  });\n\n  it('should stop emitting events to detached overlays', () => {\n    const instance = overlay.create();\n    const spy = jasmine.createSpy('keyboard event spy');\n\n    instance.attach(new ComponentPortal(TestComponent));\n    instance.keydownEvents().subscribe(spy);\n\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE, instance.overlayElement);\n    expect(spy).toHaveBeenCalledTimes(1);\n\n    instance.detach();\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE, instance.overlayElement);\n\n    expect(spy).toHaveBeenCalledTimes(1);\n  });\n\n  it('should stop emitting events to disposed overlays', () => {\n    const instance = overlay.create();\n    const spy = jasmine.createSpy('keyboard event spy');\n\n    instance.attach(new ComponentPortal(TestComponent));\n    instance.keydownEvents().subscribe(spy);\n\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE, instance.overlayElement);\n    expect(spy).toHaveBeenCalledTimes(1);\n\n    instance.dispose();\n    dispatchKeyboardEvent(document.body, 'keydown', ESCAPE, instance.overlayElement);\n\n    expect(spy).toHaveBeenCalledTimes(1);\n  });\n\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'OverlayKeyboardDispatcher'",
        "type": "String"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "OverlayKeyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "overlay",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "Identifier"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "TestBed",
        "type": "Identifier"
      },
      {
        "value": "configureTestingModule",
        "type": "Identifier"
      },
      {
        "value": "imports",
        "type": "Identifier"
      },
      {
        "value": "OverlayModule",
        "type": "Identifier"
      },
      {
        "value": "TestComponentModule",
        "type": "Identifier"
      },
      {
        "value": "inject",
        "type": "Identifier"
      },
      {
        "value": "OverlayKeyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "Identifier"
      },
      {
        "value": "kbd",
        "type": "Identifier"
      },
      {
        "value": "OverlayKeyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "o",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "kbd",
        "type": "Identifier"
      },
      {
        "value": "overlay",
        "type": "Identifier"
      },
      {
        "value": "o",
        "type": "Identifier"
      },
      {
        "value": "afterEach",
        "type": "Identifier"
      },
      {
        "value": "inject",
        "type": "Identifier"
      },
      {
        "value": "OverlayContainer",
        "type": "Identifier"
      },
      {
        "value": "overlayContainer",
        "type": "Identifier"
      },
      {
        "value": "OverlayContainer",
        "type": "Identifier"
      },
      {
        "value": "overlayContainer",
        "type": "Identifier"
      },
      {
        "value": "ngOnDestroy",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should track overlays in order as they are attached and detached'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "overlay",
        "type": "Identifier"
      },
      {
        "value": "create",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayTwo",
        "type": "Identifier"
      },
      {
        "value": "overlay",
        "type": "Identifier"
      },
      {
        "value": "create",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "overlayTwo",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "_attachedOverlays",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "'Expected both overlays to be tracked.'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "_attachedOverlays",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "'Expected one to be first.'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "_attachedOverlays",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "overlayTwo",
        "type": "Identifier"
      },
      {
        "value": "'Expected two to be last.'",
        "type": "String"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "remove",
        "type": "Identifier"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "_attachedOverlays",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "overlayTwo",
        "type": "Identifier"
      },
      {
        "value": "'Expected two to now be first.'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "_attachedOverlays",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "'Expected one to now be last.'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should dispatch body keyboard events to the most recently attached overlay'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "overlay",
        "type": "Identifier"
      },
      {
        "value": "create",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayTwo",
        "type": "Identifier"
      },
      {
        "value": "overlay",
        "type": "Identifier"
      },
      {
        "value": "create",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayOneSpy",
        "type": "Identifier"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "createSpy",
        "type": "Identifier"
      },
      {
        "value": "'overlayOne keyboard event spy'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayTwoSpy",
        "type": "Identifier"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "createSpy",
        "type": "Identifier"
      },
      {
        "value": "'overlayOne keyboard event spy'",
        "type": "String"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "keydownEvents",
        "type": "Identifier"
      },
      {
        "value": "subscribe",
        "type": "Identifier"
      },
      {
        "value": "overlayOneSpy",
        "type": "Identifier"
      },
      {
        "value": "overlayTwo",
        "type": "Identifier"
      },
      {
        "value": "keydownEvents",
        "type": "Identifier"
      },
      {
        "value": "subscribe",
        "type": "Identifier"
      },
      {
        "value": "overlayTwoSpy",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "overlayTwo",
        "type": "Identifier"
      },
      {
        "value": "dispatchKeyboardEvent",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "'keydown'",
        "type": "String"
      },
      {
        "value": "ESCAPE",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "overlayOneSpy",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalled",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "overlayTwoSpy",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalled",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should dispatch targeted keyboard events to the overlay containing that target'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "overlay",
        "type": "Identifier"
      },
      {
        "value": "create",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayTwo",
        "type": "Identifier"
      },
      {
        "value": "overlay",
        "type": "Identifier"
      },
      {
        "value": "create",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayOneSpy",
        "type": "Identifier"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "createSpy",
        "type": "Identifier"
      },
      {
        "value": "'overlayOne keyboard event spy'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayTwoSpy",
        "type": "Identifier"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "createSpy",
        "type": "Identifier"
      },
      {
        "value": "'overlayOne keyboard event spy'",
        "type": "String"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "keydownEvents",
        "type": "Identifier"
      },
      {
        "value": "subscribe",
        "type": "Identifier"
      },
      {
        "value": "overlayOneSpy",
        "type": "Identifier"
      },
      {
        "value": "overlayTwo",
        "type": "Identifier"
      },
      {
        "value": "keydownEvents",
        "type": "Identifier"
      },
      {
        "value": "subscribe",
        "type": "Identifier"
      },
      {
        "value": "overlayTwoSpy",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "keyboardDispatcher",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "overlayTwo",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayOnePane",
        "type": "Identifier"
      },
      {
        "value": "overlayOne",
        "type": "Identifier"
      },
      {
        "value": "overlayElement",
        "type": "Identifier"
      },
      {
        "value": "dispatchKeyboardEvent",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "'keydown'",
        "type": "String"
      },
      {
        "value": "ESCAPE",
        "type": "Identifier"
      },
      {
        "value": "overlayOnePane",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "overlayOneSpy",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalled",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "overlayTwoSpy",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalled",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should complete the keydown stream on dispose'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayRef",
        "type": "Identifier"
      },
      {
        "value": "overlay",
        "type": "Identifier"
      },
      {
        "value": "create",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "completeSpy",
        "type": "Identifier"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "createSpy",
        "type": "Identifier"
      },
      {
        "value": "'keydown complete spy'",
        "type": "String"
      },
      {
        "value": "overlayRef",
        "type": "Identifier"
      },
      {
        "value": "keydownEvents",
        "type": "Identifier"
      },
      {
        "value": "subscribe",
        "type": "Identifier"
      },
      {
        "value": "undefined",
        "type": "Identifier"
      },
      {
        "value": "undefined",
        "type": "Identifier"
      },
      {
        "value": "completeSpy",
        "type": "Identifier"
      },
      {
        "value": "overlayRef",
        "type": "Identifier"
      },
      {
        "value": "dispose",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "completeSpy",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalled",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should stop emitting events to detached overlays'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "overlay",
        "type": "Identifier"
      },
      {
        "value": "create",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "createSpy",
        "type": "Identifier"
      },
      {
        "value": "'keyboard event spy'",
        "type": "String"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "attach",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "ComponentPortal",
        "type": "Identifier"
      },
      {
        "value": "TestComponent",
        "type": "Identifier"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "keydownEvents",
        "type": "Identifier"
      },
      {
        "value": "subscribe",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "dispatchKeyboardEvent",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "'keydown'",
        "type": "String"
      },
      {
        "value": "ESCAPE",
        "type": "Identifier"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "overlayElement",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalledTimes",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "detach",
        "type": "Identifier"
      },
      {
        "value": "dispatchKeyboardEvent",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "'keydown'",
        "type": "String"
      },
      {
        "value": "ESCAPE",
        "type": "Identifier"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "overlayElement",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalledTimes",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should stop emitting events to disposed overlays'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "overlay",
        "type": "Identifier"
      },
      {
        "value": "create",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "createSpy",
        "type": "Identifier"
      },
      {
        "value": "'keyboard event spy'",
        "type": "String"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "attach",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "ComponentPortal",
        "type": "Identifier"
      },
      {
        "value": "TestComponent",
        "type": "Identifier"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "keydownEvents",
        "type": "Identifier"
      },
      {
        "value": "subscribe",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "dispatchKeyboardEvent",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "'keydown'",
        "type": "String"
      },
      {
        "value": "ESCAPE",
        "type": "Identifier"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "overlayElement",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalledTimes",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "dispose",
        "type": "Identifier"
      },
      {
        "value": "dispatchKeyboardEvent",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "'keydown'",
        "type": "String"
      },
      {
        "value": "ESCAPE",
        "type": "Identifier"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "overlayElement",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalledTimes",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/components/blob/3982cc8b60facd3c1d6baf493c8de955ccd0682d/src/lib/select/select.spec.ts",
    "commit": "3982cc8b60facd3c1d6baf493c8de955ccd0682d",
    "project_name": "components",
    "project_author": "angular",
    "flaky_file": "/src/lib/select/select.spec.ts",
    "start_line": 1180,
    "end_line": 1231,
    "test_code": "it('should adjust position of centered option if there is little space above', async(() => {\n  const selectMenuHeight = 256;\n  const selectMenuViewportPadding = 8;\n  const selectItemHeight = 48;\n  const selectedIndex = 4;\n  const fontSize = 16;\n  const lineHeightEm = 1.125;\n  const expectedExtraScroll = 5;\n\n  // Trigger element height.\n  const triggerHeight = fontSize * lineHeightEm;\n\n  // Ideal space above selected item in order to center it.\n  const idealSpaceAboveSelectedItem = (selectMenuHeight - selectItemHeight) / 2;\n\n  // Actual space above selected item.\n  const actualSpaceAboveSelectedItem = selectItemHeight * selectedIndex;\n\n  // Ideal scroll position to center.\n  const idealScrollTop = actualSpaceAboveSelectedItem - idealSpaceAboveSelectedItem;\n\n  // Top-most select-position that allows for perfect centering.\n  const topMostPositionForPerfectCentering =\n    idealSpaceAboveSelectedItem + selectMenuViewportPadding +\n    (selectItemHeight - triggerHeight) / 2;\n\n  // Position of select relative to top edge of mat-form-field.\n  const formFieldTopSpace =\n    trigger.getBoundingClientRect().top - formField.getBoundingClientRect().top;\n\n  const formFieldTop =\n    topMostPositionForPerfectCentering - formFieldTopSpace - expectedExtraScroll;\n\n  formField.style.top = `${formFieldTop}px`;\n\n  // Select an option in the middle of the list\n  fixture.componentInstance.control.setValue('chips-4');\n  fixture.detectChanges();\n\n  trigger.click();\n  fixture.detectChanges();\n\n  const scrollContainer = document.querySelector('.cdk-overlay-pane .mat-select-panel')!;\n\n  fixture.whenStable().then(() => {\n    expect(Math.ceil(scrollContainer.scrollTop))\n      .toEqual(Math.ceil(idealScrollTop + 5),\n        `Expected panel to adjust scroll position to fit in viewport.`);\n\n    checkTriggerAlignedWithOption(4);\n  });\n}));\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should adjust position of centered option if there is little space above'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "selectMenuHeight",
        "type": "Identifier"
      },
      {
        "value": "256",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "selectMenuViewportPadding",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "selectItemHeight",
        "type": "Identifier"
      },
      {
        "value": "48",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "selectedIndex",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "lineHeightEm",
        "type": "Identifier"
      },
      {
        "value": "1.125",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "expectedExtraScroll",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "triggerHeight",
        "type": "Identifier"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "lineHeightEm",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "idealSpaceAboveSelectedItem",
        "type": "Identifier"
      },
      {
        "value": "selectMenuHeight",
        "type": "Identifier"
      },
      {
        "value": "selectItemHeight",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "actualSpaceAboveSelectedItem",
        "type": "Identifier"
      },
      {
        "value": "selectItemHeight",
        "type": "Identifier"
      },
      {
        "value": "selectedIndex",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "idealScrollTop",
        "type": "Identifier"
      },
      {
        "value": "actualSpaceAboveSelectedItem",
        "type": "Identifier"
      },
      {
        "value": "idealSpaceAboveSelectedItem",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "topMostPositionForPerfectCentering",
        "type": "Identifier"
      },
      {
        "value": "idealSpaceAboveSelectedItem",
        "type": "Identifier"
      },
      {
        "value": "selectMenuViewportPadding",
        "type": "Identifier"
      },
      {
        "value": "selectItemHeight",
        "type": "Identifier"
      },
      {
        "value": "triggerHeight",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "formFieldTopSpace",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "top",
        "type": "Identifier"
      },
      {
        "value": "formField",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "top",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "formFieldTop",
        "type": "Identifier"
      },
      {
        "value": "topMostPositionForPerfectCentering",
        "type": "Identifier"
      },
      {
        "value": "formFieldTopSpace",
        "type": "Identifier"
      },
      {
        "value": "expectedExtraScroll",
        "type": "Identifier"
      },
      {
        "value": "formField",
        "type": "Identifier"
      },
      {
        "value": "style",
        "type": "Identifier"
      },
      {
        "value": "top",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "formFieldTop",
        "type": "Identifier"
      },
      {
        "value": "}px`",
        "type": "Template"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "control",
        "type": "Identifier"
      },
      {
        "value": "setValue",
        "type": "Identifier"
      },
      {
        "value": "'chips-4'",
        "type": "String"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "scrollContainer",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.cdk-overlay-pane .mat-select-panel'",
        "type": "String"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "whenStable",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "ceil",
        "type": "Identifier"
      },
      {
        "value": "scrollContainer",
        "type": "Identifier"
      },
      {
        "value": "scrollTop",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "ceil",
        "type": "Identifier"
      },
      {
        "value": "idealScrollTop",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "`Expected panel to adjust scroll position to fit in viewport.`",
        "type": "Template"
      },
      {
        "value": "checkTriggerAlignedWithOption",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/components/blob/3982cc8b60facd3c1d6baf493c8de955ccd0682d/src/lib/select/select.spec.ts",
    "commit": "3982cc8b60facd3c1d6baf493c8de955ccd0682d",
    "project_name": "components",
    "project_author": "angular",
    "flaky_file": "/src/lib/select/select.spec.ts",
    "start_line": 1233,
    "end_line": 1299,
    "test_code": "it('should adjust position of centered option if there is little space below', async(() => {\n  const selectMenuHeight = 256;\n  const selectMenuViewportPadding = 8;\n  const selectItemHeight = 48;\n  const selectedIndex = 4;\n  const fontSize = 16;\n  const lineHeightEm = 1.125;\n  const expectedExtraScroll = 5;\n\n  // Trigger element height.\n  const triggerHeight = fontSize * lineHeightEm;\n\n  // Ideal space above selected item in order to center it.\n  const idealSpaceAboveSelectedItem = (selectMenuHeight - selectItemHeight) / 2;\n\n  // Actual space above selected item.\n  const actualSpaceAboveSelectedItem = selectItemHeight * selectedIndex;\n\n  // Ideal scroll position to center.\n  const idealScrollTop = actualSpaceAboveSelectedItem - idealSpaceAboveSelectedItem;\n\n  // Bottom-most select-position that allows for perfect centering.\n  const bottomMostPositionForPerfectCentering =\n    idealSpaceAboveSelectedItem + selectMenuViewportPadding +\n    (selectItemHeight - triggerHeight) / 2;\n\n  // Position of select relative to bottom edge of mat-form-field:\n  const formFieldBottomSpace =\n    formField.getBoundingClientRect().bottom - trigger.getBoundingClientRect().bottom;\n\n  const formFieldBottom =\n    bottomMostPositionForPerfectCentering - formFieldBottomSpace - expectedExtraScroll;\n\n  // Push the select to a position with not quite enough space on the bottom to open\n  // with the option completely centered (needs 113px at least: 256/2 - 48/2 + 9)\n  formField.style.bottom = `${formFieldBottom}px`;\n\n  // Select an option in the middle of the list\n  fixture.componentInstance.control.setValue('chips-4');\n  fixture.detectChanges();\n\n  fixture.whenStable().then(() => {\n    fixture.detectChanges();\n\n    trigger.click();\n    fixture.detectChanges();\n\n    const scrollContainer = document.querySelector('.cdk-overlay-pane .mat-select-panel')!;\n\n    fixture.whenStable().then(() => {\n      // Scroll should adjust by the difference between the bottom space available\n      // (56px from the bottom of the screen - 8px padding = 48px)\n      // and the height of the panel below the option (113px).\n      // 113px - 48px = 75px difference. Original scrollTop 88px - 75px = 23px\n      const difference = Math.ceil(scrollContainer.scrollTop) -\n        Math.ceil(idealScrollTop - expectedExtraScroll);\n\n      // Note that different browser/OS combinations report the different dimensions with\n      // slight deviations (< 1px). We round the expectation and check that the values\n      // are within a pixel of each other to avoid flakes.\n      expect(Math.abs(difference) < 2)\n        .toBe(true, `Expected panel to adjust scroll position to fit in viewport.`);\n\n      checkTriggerAlignedWithOption(4);\n    });\n  });\n}));\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should adjust position of centered option if there is little space below'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "selectMenuHeight",
        "type": "Identifier"
      },
      {
        "value": "256",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "selectMenuViewportPadding",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "selectItemHeight",
        "type": "Identifier"
      },
      {
        "value": "48",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "selectedIndex",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "lineHeightEm",
        "type": "Identifier"
      },
      {
        "value": "1.125",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "expectedExtraScroll",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "triggerHeight",
        "type": "Identifier"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "lineHeightEm",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "idealSpaceAboveSelectedItem",
        "type": "Identifier"
      },
      {
        "value": "selectMenuHeight",
        "type": "Identifier"
      },
      {
        "value": "selectItemHeight",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "actualSpaceAboveSelectedItem",
        "type": "Identifier"
      },
      {
        "value": "selectItemHeight",
        "type": "Identifier"
      },
      {
        "value": "selectedIndex",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "idealScrollTop",
        "type": "Identifier"
      },
      {
        "value": "actualSpaceAboveSelectedItem",
        "type": "Identifier"
      },
      {
        "value": "idealSpaceAboveSelectedItem",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "bottomMostPositionForPerfectCentering",
        "type": "Identifier"
      },
      {
        "value": "idealSpaceAboveSelectedItem",
        "type": "Identifier"
      },
      {
        "value": "selectMenuViewportPadding",
        "type": "Identifier"
      },
      {
        "value": "selectItemHeight",
        "type": "Identifier"
      },
      {
        "value": "triggerHeight",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "formFieldBottomSpace",
        "type": "Identifier"
      },
      {
        "value": "formField",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "bottom",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "bottom",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "formFieldBottom",
        "type": "Identifier"
      },
      {
        "value": "bottomMostPositionForPerfectCentering",
        "type": "Identifier"
      },
      {
        "value": "formFieldBottomSpace",
        "type": "Identifier"
      },
      {
        "value": "expectedExtraScroll",
        "type": "Identifier"
      },
      {
        "value": "formField",
        "type": "Identifier"
      },
      {
        "value": "style",
        "type": "Identifier"
      },
      {
        "value": "bottom",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "formFieldBottom",
        "type": "Identifier"
      },
      {
        "value": "}px`",
        "type": "Template"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "control",
        "type": "Identifier"
      },
      {
        "value": "setValue",
        "type": "Identifier"
      },
      {
        "value": "'chips-4'",
        "type": "String"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "whenStable",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "scrollContainer",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.cdk-overlay-pane .mat-select-panel'",
        "type": "String"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "whenStable",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "difference",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "ceil",
        "type": "Identifier"
      },
      {
        "value": "scrollContainer",
        "type": "Identifier"
      },
      {
        "value": "scrollTop",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "ceil",
        "type": "Identifier"
      },
      {
        "value": "idealScrollTop",
        "type": "Identifier"
      },
      {
        "value": "expectedExtraScroll",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "abs",
        "type": "Identifier"
      },
      {
        "value": "difference",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "`Expected panel to adjust scroll position to fit in viewport.`",
        "type": "Template"
      },
      {
        "value": "checkTriggerAlignedWithOption",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/components/blob/3982cc8b60facd3c1d6baf493c8de955ccd0682d/src/lib/select/select.spec.ts",
    "commit": "3982cc8b60facd3c1d6baf493c8de955ccd0682d",
    "project_name": "components",
    "project_author": "angular",
    "flaky_file": "/src/lib/select/select.spec.ts",
    "start_line": 1301,
    "end_line": 1330,
    "test_code": "it('should fall back to \"above\" positioning if scroll adjustment will not help', () => {\n  // Push the select to a position with not enough space on the bottom to open\n  formField.style.bottom = '56px';\n  fixture.detectChanges();\n\n  // Select an option that cannot be scrolled any farther upward\n  fixture.componentInstance.control.setValue('coke-0');\n  fixture.detectChanges();\n\n  trigger.click();\n  fixture.detectChanges();\n\n  const overlayPane = document.querySelector('.cdk-overlay-pane')!;\n  const triggerBottom = trigger.getBoundingClientRect().bottom;\n  const overlayBottom = overlayPane.getBoundingClientRect().bottom;\n  const scrollContainer = overlayPane.querySelector('.mat-select-panel')!;\n\n  // Expect no scroll to be attempted\n  expect(scrollContainer.scrollTop).toEqual(0, `Expected panel not to be scrolled.`);\n\n  const difference = Math.floor(overlayBottom) - Math.floor(triggerBottom);\n\n  // Check that the values are within a pixel of each other. This avoids sub-pixel\n  // deviations between OS and browser versions.\n  expect(Math.abs(difference) < 2)\n    .toEqual(true, `Expected trigger bottom to align with overlay bottom.`);\n\n  expect(fixture.componentInstance.select._transformOrigin)\n    .toContain(`bottom`, `Expected panel animation to originate at the bottom.`);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should fall back to \"above\" positioning if scroll adjustment will not help'",
        "type": "String"
      },
      {
        "value": "formField",
        "type": "Identifier"
      },
      {
        "value": "style",
        "type": "Identifier"
      },
      {
        "value": "bottom",
        "type": "Identifier"
      },
      {
        "value": "'56px'",
        "type": "String"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "control",
        "type": "Identifier"
      },
      {
        "value": "setValue",
        "type": "Identifier"
      },
      {
        "value": "'coke-0'",
        "type": "String"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayPane",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.cdk-overlay-pane'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "triggerBottom",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "bottom",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayBottom",
        "type": "Identifier"
      },
      {
        "value": "overlayPane",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "bottom",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "scrollContainer",
        "type": "Identifier"
      },
      {
        "value": "overlayPane",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.mat-select-panel'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "scrollContainer",
        "type": "Identifier"
      },
      {
        "value": "scrollTop",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "`Expected panel not to be scrolled.`",
        "type": "Template"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "difference",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "floor",
        "type": "Identifier"
      },
      {
        "value": "overlayBottom",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "floor",
        "type": "Identifier"
      },
      {
        "value": "triggerBottom",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "abs",
        "type": "Identifier"
      },
      {
        "value": "difference",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "`Expected trigger bottom to align with overlay bottom.`",
        "type": "Template"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "select",
        "type": "Identifier"
      },
      {
        "value": "_transformOrigin",
        "type": "Identifier"
      },
      {
        "value": "toContain",
        "type": "Identifier"
      },
      {
        "value": "`bottom`",
        "type": "Template"
      },
      {
        "value": "`Expected panel animation to originate at the bottom.`",
        "type": "Template"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/components/blob/3982cc8b60facd3c1d6baf493c8de955ccd0682d/src/lib/select/select.spec.ts",
    "commit": "3982cc8b60facd3c1d6baf493c8de955ccd0682d",
    "project_name": "components",
    "project_author": "angular",
    "flaky_file": "/src/lib/select/select.spec.ts",
    "start_line": 1495,
    "end_line": 1542,
    "test_code": "it('should align a centered option properly when scrolling while the panel is open', () => {\n  fixture.componentInstance.heightBelow = 400;\n  fixture.componentInstance.heightAbove = 400;\n  fixture.componentInstance.control.setValue('chips-4');\n  fixture.detectChanges();\n\n  trigger.click();\n  fixture.detectChanges();\n\n  setScrollTop(100);\n  scrolledSubject.next();\n  fixture.detectChanges();\n\n  checkTriggerAlignedWithOption(4);\n});\n\nit('should fall back to \"above\" positioning properly when scrolled', () => {\n  // Give the select insufficient space to open below the trigger\n  fixture.componentInstance.heightAbove = 0;\n  fixture.componentInstance.heightBelow = 100;\n  trigger.style.marginTop = '2000px';\n  fixture.detectChanges();\n\n  // Scroll the select into view\n  setScrollTop(1400);\n\n  // In the iOS simulator (BrowserStack & SauceLabs), adding the content to the\n  // body causes karma's iframe for the test to stretch to fit that content once we attempt to\n  // scroll the page. Setting width / height / maxWidth / maxHeight on the iframe does not\n  // successfully constrain its size. As such, skip assertions in environments where the\n  // window size has changed since the start of the test.\n  if (window.innerHeight > startingWindowHeight) {\n    return;\n  }\n\n  trigger.click();\n  fixture.detectChanges();\n\n  const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane')!;\n  const triggerBottom = trigger.getBoundingClientRect().bottom;\n  const overlayBottom = overlayPane.getBoundingClientRect().bottom;\n  const difference = Math.floor(overlayBottom) - Math.floor(triggerBottom);\n\n  // Check that the values are within a pixel of each other. This avoids sub-pixel\n  // deviations between OS and browser versions.\n  expect(Math.abs(difference) < 2)\n    .toEqual(true, `Expected trigger bottom to align with overlay bottom.`);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should align a centered option properly when scrolling while the panel is open'",
        "type": "String"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "heightBelow",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "heightAbove",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "control",
        "type": "Identifier"
      },
      {
        "value": "setValue",
        "type": "Identifier"
      },
      {
        "value": "'chips-4'",
        "type": "String"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "setScrollTop",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "scrolledSubject",
        "type": "Identifier"
      },
      {
        "value": "next",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "checkTriggerAlignedWithOption",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should fall back to \"above\" positioning properly when scrolled'",
        "type": "String"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "heightAbove",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "heightBelow",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "style",
        "type": "Identifier"
      },
      {
        "value": "marginTop",
        "type": "Identifier"
      },
      {
        "value": "'2000px'",
        "type": "String"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "setScrollTop",
        "type": "Identifier"
      },
      {
        "value": "1400",
        "type": "Numeric"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "innerHeight",
        "type": "Identifier"
      },
      {
        "value": "startingWindowHeight",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayPane",
        "type": "Identifier"
      },
      {
        "value": "overlayContainerElement",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.cdk-overlay-pane'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "triggerBottom",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "bottom",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "overlayBottom",
        "type": "Identifier"
      },
      {
        "value": "overlayPane",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "bottom",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "difference",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "floor",
        "type": "Identifier"
      },
      {
        "value": "overlayBottom",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "floor",
        "type": "Identifier"
      },
      {
        "value": "triggerBottom",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "abs",
        "type": "Identifier"
      },
      {
        "value": "difference",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "`Expected trigger bottom to align with overlay bottom.`",
        "type": "Template"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/angular/components/blob/3982cc8b60facd3c1d6baf493c8de955ccd0682d/src/lib/select/select.spec.ts",
    "commit": "3982cc8b60facd3c1d6baf493c8de955ccd0682d",
    "project_name": "components",
    "project_author": "angular",
    "flaky_file": "/src/lib/select/select.spec.ts",
    "start_line": 1721,
    "end_line": 1752,
    "test_code": "it('should align the first option to the trigger, if nothing is selected', async(() => {\n  // Push down the form field so there is space for the item to completely align.\n  formField.style.top = '100px';\n\n  const menuItemHeight = 48;\n  const triggerFontSize = 16;\n  const triggerLineHeightEm = 1.125;\n  const triggerHeight = triggerFontSize * triggerLineHeightEm;\n\n  trigger.click();\n  groupFixture.detectChanges();\n\n  fixture.whenStable().then(() => {\n    const triggerTop = trigger.getBoundingClientRect().top;\n\n    const option = overlayContainerElement.querySelector('.cdk-overlay-pane mat-option');\n    const optionTop = option ? option.getBoundingClientRect().top : 0;\n\n    // There appears to be a small rounding error on IE, so we verify that the value is close,\n    // not exact.\n    let platform = new Platform();\n    if (platform.TRIDENT) {\n      let difference =\n        Math.abs(optionTop + (menuItemHeight - triggerHeight) / 2 - triggerTop);\n      expect(difference)\n        .toBeLessThan(0.1, 'Expected trigger to align with the first option.');\n    } else {\n      expect(Math.floor(optionTop + (menuItemHeight - triggerHeight) / 2))\n        .toBe(Math.floor(triggerTop), 'Expected trigger to align with the first option.');\n    }\n  });\n}));\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should align the first option to the trigger, if nothing is selected'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "formField",
        "type": "Identifier"
      },
      {
        "value": "style",
        "type": "Identifier"
      },
      {
        "value": "top",
        "type": "Identifier"
      },
      {
        "value": "'100px'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "menuItemHeight",
        "type": "Identifier"
      },
      {
        "value": "48",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "triggerFontSize",
        "type": "Identifier"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "triggerLineHeightEm",
        "type": "Identifier"
      },
      {
        "value": "1.125",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "triggerHeight",
        "type": "Identifier"
      },
      {
        "value": "triggerFontSize",
        "type": "Identifier"
      },
      {
        "value": "triggerLineHeightEm",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "groupFixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "whenStable",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "triggerTop",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "top",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "option",
        "type": "Identifier"
      },
      {
        "value": "overlayContainerElement",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.cdk-overlay-pane mat-option'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "optionTop",
        "type": "Identifier"
      },
      {
        "value": "option",
        "type": "Identifier"
      },
      {
        "value": "option",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "top",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "platform",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Platform",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "platform",
        "type": "Identifier"
      },
      {
        "value": "TRIDENT",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "difference",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "abs",
        "type": "Identifier"
      },
      {
        "value": "optionTop",
        "type": "Identifier"
      },
      {
        "value": "menuItemHeight",
        "type": "Identifier"
      },
      {
        "value": "triggerHeight",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "triggerTop",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "difference",
        "type": "Identifier"
      },
      {
        "value": "toBeLessThan",
        "type": "Identifier"
      },
      {
        "value": "0.1",
        "type": "Numeric"
      },
      {
        "value": "'Expected trigger to align with the first option.'",
        "type": "String"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "floor",
        "type": "Identifier"
      },
      {
        "value": "optionTop",
        "type": "Identifier"
      },
      {
        "value": "menuItemHeight",
        "type": "Identifier"
      },
      {
        "value": "triggerHeight",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "floor",
        "type": "Identifier"
      },
      {
        "value": "triggerTop",
        "type": "Identifier"
      },
      {
        "value": "'Expected trigger to align with the first option.'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/NativeScript/nativescript-angular/blob/bbb2b0f6a118b1e17717591c101760caa6cdc14d/e2e/nested-router-tab-view/e2e/tab-view.e2e-spec.ts",
    "commit": "bbb2b0f6a118b1e17717591c101760caa6cdc14d",
    "project_name": "nativescript-angular",
    "project_author": "NativeScript",
    "flaky_file": "/e2e/nested-router-tab-view/e2e/tab-view.e2e-spec.ts",
    "start_line": 48,
    "end_line": 58,
    "test_code": "it(\"should navigate Player One/Team One then back separately\", async function () {\n    this.retries(2);\n    await testPlayerNavigated(screen, screen.playerOne);\n    await gotoTeamsTab(driver);\n    await testTeamNavigated(screen, screen.teamOne);\n    await backTeams(driver);\n    await screen.loadedTeamList();\n    await gotoPlayersTab(driver);\n    await backPlayers(driver);\n    await screen.loadedPlayersList();\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"should navigate Player One/Team One then back separately\"",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "retries",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testPlayerNavigated",
        "type": "Identifier"
      },
      {
        "value": "screen",
        "type": "Identifier"
      },
      {
        "value": "screen",
        "type": "Identifier"
      },
      {
        "value": "playerOne",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "gotoTeamsTab",
        "type": "Identifier"
      },
      {
        "value": "driver",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "testTeamNavigated",
        "type": "Identifier"
      },
      {
        "value": "screen",
        "type": "Identifier"
      },
      {
        "value": "screen",
        "type": "Identifier"
      },
      {
        "value": "teamOne",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "backTeams",
        "type": "Identifier"
      },
      {
        "value": "driver",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "screen",
        "type": "Identifier"
      },
      {
        "value": "loadedTeamList",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "gotoPlayersTab",
        "type": "Identifier"
      },
      {
        "value": "driver",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "backPlayers",
        "type": "Identifier"
      },
      {
        "value": "driver",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "screen",
        "type": "Identifier"
      },
      {
        "value": "loadedPlayersList",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/stream-labs/streamlabs-obs/blob/c993316b945258cce272704d925bbdeace48f62a/test/widgets/goals.ts",
    "commit": "c993316b945258cce272704d925bbdeace48f62a",
    "project_name": "streamlabs-obs",
    "project_author": "stream-labs",
    "flaky_file": "/test/widgets/goals.ts",
    "start_line": 15,
    "end_line": 39,
    "test_code": "test(`${goalType} create and delete`, async t => {\n  const client = t.context.app.client;\n  if (!(await logIn(t))) return;\n  await addSource(t, goalType, goalType, false);\n\n  // end goal if it's already exist\n  if (await client.isVisible('button=End Goal')) {\n    await client.click('button=End Goal');\n  }\n\n  await client.waitForVisible('button=Start Goal');\n\n  const formMonkey = new FormMonkey(t, 'form[name=new-goal-form]');\n  await formMonkey.fill({\n    title: 'My Goal',\n    goal_amount: 100,\n    manual_goal_amount: 0,\n    ends_at: '12/12/2030',\n  });\n  await client.click('button=Start Goal');\n  await client.waitForVisible('button=End Goal');\n  t.true(await client.isExisting('span=My Goal'));\n  await client.click('button=End Goal');\n  await client.waitForVisible('button=Start Goal');\n});\n",
    "tokens": [
      {
        "value": "test",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "goalType",
        "type": "Identifier"
      },
      {
        "value": "} create and delete`",
        "type": "Template"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "app",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "logIn",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "addSource",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "goalType",
        "type": "Identifier"
      },
      {
        "value": "goalType",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "isVisible",
        "type": "Identifier"
      },
      {
        "value": "'button=End Goal'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'button=End Goal'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "waitForVisible",
        "type": "Identifier"
      },
      {
        "value": "'button=Start Goal'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "formMonkey",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "FormMonkey",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "'form[name=new-goal-form]'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "formMonkey",
        "type": "Identifier"
      },
      {
        "value": "fill",
        "type": "Identifier"
      },
      {
        "value": "title",
        "type": "Identifier"
      },
      {
        "value": "'My Goal'",
        "type": "String"
      },
      {
        "value": "goal_amount",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "manual_goal_amount",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "ends_at",
        "type": "Identifier"
      },
      {
        "value": "'12/12/2030'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'button=Start Goal'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "waitForVisible",
        "type": "Identifier"
      },
      {
        "value": "'button=End Goal'",
        "type": "String"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Keyword"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "isExisting",
        "type": "Identifier"
      },
      {
        "value": "'span=My Goal'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'button=End Goal'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "waitForVisible",
        "type": "Identifier"
      },
      {
        "value": "'button=Start Goal'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/stream-labs/streamlabs-obs/blob/c993316b945258cce272704d925bbdeace48f62a/test/widgets/goals.ts",
    "commit": "c993316b945258cce272704d925bbdeace48f62a",
    "project_name": "streamlabs-obs",
    "project_author": "stream-labs",
    "flaky_file": "/test/widgets/goals.ts",
    "start_line": 41,
    "end_line": 76,
    "test_code": "test(`${goalType} change settings`, async t => {\n  const client = t.context.app.client;\n  if (!(await logIn(t))) return;\n\n  await addSource(t, goalType, goalType, false);\n\n  await client.click('li=Visual Settings');\n  const formMonkey = new FormMonkey(t, 'form[name=visual-properties-form]');\n\n  const testSet1 = {\n    layout: 'standard',\n    background_color: '#FF0000',\n    bar_color: '#FF0000',\n    bar_bg_color: '#FF0000',\n    text_color: '#FF0000',\n    bar_text_color: '#FF0000',\n    font: 'Roboto',\n  };\n\n  await formMonkey.fill(testSet1);\n  await waitForWidgetSettingsSync(t, () => formMonkey.fill(testSet1));\n  t.true(await formMonkey.includes(testSet1));\n\n  const testSet2 = {\n    layout: 'condensed',\n    background_color: '#7ED321',\n    bar_color: '#AB14CE',\n    bar_bg_color: '#DDDDDD',\n    text_color: '#FFFFFF',\n    bar_text_color: '#F8E71C',\n    font: 'Open Sans',\n  };\n\n  await waitForWidgetSettingsSync(t, () => formMonkey.fill(testSet2));\n  t.true(await formMonkey.includes(testSet2));\n});\n",
    "tokens": [
      {
        "value": "test",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "goalType",
        "type": "Identifier"
      },
      {
        "value": "} change settings`",
        "type": "Template"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "app",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "logIn",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "addSource",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "goalType",
        "type": "Identifier"
      },
      {
        "value": "goalType",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'li=Visual Settings'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "formMonkey",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "FormMonkey",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "'form[name=visual-properties-form]'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "testSet1",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "'standard'",
        "type": "String"
      },
      {
        "value": "background_color",
        "type": "Identifier"
      },
      {
        "value": "'#FF0000'",
        "type": "String"
      },
      {
        "value": "bar_color",
        "type": "Identifier"
      },
      {
        "value": "'#FF0000'",
        "type": "String"
      },
      {
        "value": "bar_bg_color",
        "type": "Identifier"
      },
      {
        "value": "'#FF0000'",
        "type": "String"
      },
      {
        "value": "text_color",
        "type": "Identifier"
      },
      {
        "value": "'#FF0000'",
        "type": "String"
      },
      {
        "value": "bar_text_color",
        "type": "Identifier"
      },
      {
        "value": "'#FF0000'",
        "type": "String"
      },
      {
        "value": "font",
        "type": "Identifier"
      },
      {
        "value": "'Roboto'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "formMonkey",
        "type": "Identifier"
      },
      {
        "value": "fill",
        "type": "Identifier"
      },
      {
        "value": "testSet1",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitForWidgetSettingsSync",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "formMonkey",
        "type": "Identifier"
      },
      {
        "value": "fill",
        "type": "Identifier"
      },
      {
        "value": "testSet1",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Keyword"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "formMonkey",
        "type": "Identifier"
      },
      {
        "value": "includes",
        "type": "Identifier"
      },
      {
        "value": "testSet1",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "testSet2",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "'condensed'",
        "type": "String"
      },
      {
        "value": "background_color",
        "type": "Identifier"
      },
      {
        "value": "'#7ED321'",
        "type": "String"
      },
      {
        "value": "bar_color",
        "type": "Identifier"
      },
      {
        "value": "'#AB14CE'",
        "type": "String"
      },
      {
        "value": "bar_bg_color",
        "type": "Identifier"
      },
      {
        "value": "'#DDDDDD'",
        "type": "String"
      },
      {
        "value": "text_color",
        "type": "Identifier"
      },
      {
        "value": "'#FFFFFF'",
        "type": "String"
      },
      {
        "value": "bar_text_color",
        "type": "Identifier"
      },
      {
        "value": "'#F8E71C'",
        "type": "String"
      },
      {
        "value": "font",
        "type": "Identifier"
      },
      {
        "value": "'Open Sans'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitForWidgetSettingsSync",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "formMonkey",
        "type": "Identifier"
      },
      {
        "value": "fill",
        "type": "Identifier"
      },
      {
        "value": "testSet2",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Keyword"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "formMonkey",
        "type": "Identifier"
      },
      {
        "value": "includes",
        "type": "Identifier"
      },
      {
        "value": "testSet2",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/7da973b6c5e219fe6def91bf587c63fc1bba56ad/test/jasmine/tests/select_test.js",
    "commit": "7da973b6c5e219fe6def91bf587c63fc1bba56ad",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/select_test.js",
    "start_line": 123,
    "end_line": 666,
    "test_code": "describe('@flaky Click-to-select', function() {\n    var mock14Pts = {\n        '1': { x: 134, y: 116 },\n        '7': { x: 270, y: 160 },\n        '10': { x: 324, y: 198 },\n        '35': { x: 685, y: 341 }\n    };\n    var gd;\n\n    beforeEach(function() {\n        gd = createGraphDiv();\n    });\n\n    afterEach(destroyGraphDiv);\n\n    function plotMock14(layoutOpts) {\n        var mock = require('@mocks/14.json');\n        var defaultLayoutOpts = {\n            layout: {\n                clickmode: 'event+select',\n                dragmode: 'select',\n                hovermode: 'closest'\n            }\n        };\n        var mockCopy = Lib.extendDeep(\n          {},\n          mock,\n          defaultLayoutOpts,\n          { layout: layoutOpts });\n\n        return Plotly.plot(gd, mockCopy.data, mockCopy.layout);\n    }\n\n    /**\n     * Executes a click and before resets selection event handlers.\n     * By default, click is executed with a delay to prevent unwanted double clicks.\n     * Returns the `selectedPromise` promise for convenience.\n     */\n    function _click(x, y, clickOpts, immediate) {\n        resetEvents(gd);\n\n        // Too fast subsequent calls of `click` would\n        // produce an unwanted double click, thus we need\n        // to delay the click.\n        if(immediate) {\n            click(x, y, clickOpts);\n        } else {\n            setTimeout(function() {\n                click(x, y, clickOpts);\n            }, DBLCLICKDELAY * 1.01);\n        }\n\n        return selectedPromise;\n    }\n\n    function _clickPt(coords, clickOpts, immediate) {\n        expect(coords).toBeDefined('coords needs to be defined');\n        expect(coords.x).toBeDefined('coords.x needs to be defined');\n        expect(coords.y).toBeDefined('coords.y needs to be defined');\n\n        return _click(coords.x, coords.y, clickOpts, immediate);\n    }\n\n    /**\n     * Convenient helper to execute a click immediately.\n     */\n    function _immediateClickPt(coords, clickOpts) {\n        return _clickPt(coords, clickOpts, true);\n    }\n\n    /**\n     * Asserting selected points.\n     *\n     * @param expected can be a point number, an array\n     * of point numbers (for a single trace) or an array of point number\n     * arrays in case of multiple traces.\n     */\n    function assertSelectedPoints(expected) {\n        var expectedPtsPerTrace;\n        var expectedPts;\n        var traceNum;\n\n        if(Array.isArray(expected)) {\n            if(Array.isArray(expected[0])) {\n                expectedPtsPerTrace = expected;\n            } else {\n                expectedPtsPerTrace = [expected];\n            }\n        } else {\n            expectedPtsPerTrace = [[expected]];\n        }\n\n        for(traceNum = 0; traceNum < expectedPtsPerTrace.length; traceNum++) {\n            expectedPts = expectedPtsPerTrace[traceNum];\n            expect(gd._fullData[traceNum].selectedpoints).toEqual(expectedPts);\n            expect(gd.data[traceNum].selectedpoints).toEqual(expectedPts);\n        }\n    }\n\n    function assertSelectionCleared() {\n        gd._fullData.forEach(function(fullDataItem) {\n            expect(fullDataItem.selectedpoints).toBeUndefined();\n        });\n    }\n\n    it('selects a single data point when being clicked', function(done) {\n        plotMock14()\n          .then(function() { return _immediateClickPt(mock14Pts[7]); })\n          .then(function() { assertSelectedPoints(7); })\n          .catch(failTest)\n          .then(done);\n    });\n\n    describe('clears entire selection when the last selected data point', function() {\n        [{\n            desc: 'is clicked',\n            clickOpts: {}\n        }, {\n            desc: 'is clicked while add/subtract modifier keys are active',\n            clickOpts: { shiftKey: true }\n        }].forEach(function(testData) {\n            it(testData.desc, function(done) {\n                plotMock14()\n                  .then(function() { return _immediateClickPt(mock14Pts[7]); })\n                  .then(function() {\n                      assertSelectedPoints(7);\n                      _clickPt(mock14Pts[7], testData.clickOpts);\n                      return deselectPromise;\n                  })\n                  .then(function() {\n                      assertSelectionCleared();\n                      return _clickPt(mock14Pts[35], testData.clickOpts);\n                  })\n                  .then(function() {\n                      assertSelectedPoints(35);\n                  })\n                  .catch(failTest)\n                  .then(done);\n            });\n        });\n    });\n\n    it('cleanly clears and starts selections although add/subtract mode on', function(done) {\n        plotMock14()\n          .then(function() {\n              return _immediateClickPt(mock14Pts[7]);\n          })\n          .then(function() {\n              assertSelectedPoints(7);\n              _clickPt(mock14Pts[7], { shiftKey: true });\n              return deselectPromise;\n          })\n          .then(function() {\n              assertSelectionCleared();\n              return _clickPt(mock14Pts[35], { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints(35);\n          })\n          .catch(failTest)\n          .then(done);\n    });\n\n    it('supports adding to an existing selection', function(done) {\n        plotMock14()\n          .then(function() { return _immediateClickPt(mock14Pts[7]); })\n          .then(function() {\n              assertSelectedPoints(7);\n              return _clickPt(mock14Pts[35], { shiftKey: true });\n          })\n          .then(function() { assertSelectedPoints([7, 35]); })\n          .catch(failTest)\n          .then(done);\n    });\n\n    it('supports subtracting from an existing selection', function(done) {\n        plotMock14()\n          .then(function() { return _immediateClickPt(mock14Pts[7]); })\n          .then(function() {\n              assertSelectedPoints(7);\n              return _clickPt(mock14Pts[35], { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([7, 35]);\n              return _clickPt(mock14Pts[7], { shiftKey: true });\n          })\n          .then(function() { assertSelectedPoints(35); })\n          .catch(failTest)\n          .then(done);\n    });\n\n    it('can be used interchangeably with lasso/box select', function(done) {\n        plotMock14()\n          .then(function() {\n              return _immediateClickPt(mock14Pts[35]);\n          })\n          .then(function() {\n              assertSelectedPoints(35);\n              drag(SELECT_PATH, { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([0, 1, 35]);\n              return _immediateClickPt(mock14Pts[7], { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([0, 1, 7, 35]);\n              return _clickPt(mock14Pts[1], { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([0, 7, 35]);\n              return Plotly.relayout(gd, 'dragmode', 'lasso');\n          })\n          .then(function() {\n              assertSelectedPoints([0, 7, 35]);\n              drag(LASSO_PATH, { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([0, 7, 10, 35]);\n              return _clickPt(mock14Pts[10], { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([0, 7, 35]);\n              drag([[670, 330], [695, 330], [695, 350], [670, 350]],\n                { shiftKey: true, altKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([0, 7]);\n              return _clickPt(mock14Pts[35], { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([0, 7, 35]);\n              return _clickPt(mock14Pts[7]);\n          })\n          .then(function() {\n              assertSelectedPoints([7]);\n              return doubleClick(650, 100);\n          })\n          .then(function() {\n              assertSelectionCleared();\n          })\n          .catch(failTest)\n          .then(done);\n    });\n\n    it('works in a multi-trace plot', function(done) {\n        Plotly.plot(gd, [\n            {\n                x: [1, 3, 5, 4, 10, 12, 12, 7],\n                y: [2, 7, 6, 1, 0, 13, 6, 12],\n                type: 'scatter',\n                mode: 'markers',\n                marker: { size: 20 }\n            }, {\n                x: [1, 7, 6, 2],\n                y: [2, 3, 5, 4],\n                type: 'bar'\n            }, {\n                x: [7, 8, 9, 10],\n                y: [7, 9, 13, 21],\n                type: 'scattergl',\n                mode: 'markers',\n                marker: { size: 20 }\n            }\n        ], {\n            width: 400,\n            height: 600,\n            hovermode: 'closest',\n            dragmode: 'select',\n            clickmode: 'event+select'\n        })\n          .then(function() {\n              return _click(136, 369, {}, true); })\n          .then(function() {\n              assertSelectedPoints([[1], [], []]);\n              return _click(245, 136, { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([[1], [], [3]]);\n              return _click(183, 470, { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([[1], [2], [3]]);\n          })\n          .catch(failTest)\n          .then(done);\n    });\n\n    it('is supported in pan/zoom mode', function(done) {\n        plotMock14({ dragmode: 'zoom' })\n          .then(function() {\n              return _immediateClickPt(mock14Pts[35]);\n          })\n          .then(function() {\n              assertSelectedPoints(35);\n              return _clickPt(mock14Pts[7], { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([7, 35]);\n              return _clickPt(mock14Pts[7], { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints(35);\n              drag(LASSO_PATH);\n          })\n          .then(function() {\n              assertSelectedPoints(35);\n              _clickPt(mock14Pts[35], { shiftKey: true });\n              return deselectPromise;\n          })\n          .then(function() {\n              assertSelectionCleared();\n          })\n          .catch(failTest)\n          .then(done);\n    });\n\n    it('retains selected points when switching between pan and zoom mode', function(done) {\n        plotMock14({ dragmode: 'zoom' })\n          .then(function() {\n              return _immediateClickPt(mock14Pts[35]);\n          })\n          .then(function() {\n              assertSelectedPoints(35);\n              return Plotly.relayout(gd, 'dragmode', 'pan');\n          })\n          .then(function() {\n              assertSelectedPoints(35);\n              return _clickPt(mock14Pts[7], { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints([7, 35]);\n              return Plotly.relayout(gd, 'dragmode', 'zoom');\n          })\n          .then(function() {\n              assertSelectedPoints([7, 35]);\n              return _clickPt(mock14Pts[7], { shiftKey: true });\n          })\n          .then(function() {\n              assertSelectedPoints(35);\n          })\n          .catch(failTest)\n          .then(done);\n    });\n\n    it('is supported by scattergl in pan/zoom mode', function(done) {\n        Plotly.plot(gd, [\n            {\n                x: [7, 8, 9, 10],\n                y: [7, 9, 13, 21],\n                type: 'scattergl',\n                mode: 'markers',\n                marker: { size: 20 }\n            }\n        ], {\n            width: 400,\n            height: 600,\n            hovermode: 'closest',\n            dragmode: 'zoom',\n            clickmode: 'event+select'\n        })\n          .then(function() {\n              return _click(230, 340, {}, true);\n          })\n          .then(function() {\n              assertSelectedPoints(2);\n          })\n          .catch(failTest)\n          .then(done);\n    });\n\n    it('deals correctly with histogram\\'s binning in the persistent selection case', function(done) {\n        var mock = require('@mocks/histogram_colorscale.json');\n        var firstBinPts = [0];\n        var secondBinPts = [1, 2];\n        var thirdBinPts = [3, 4, 5];\n\n        mock.layout.clickmode = 'event+select';\n        Plotly.plot(gd, mock.data, mock.layout)\n          .then(function() {\n              return clickFirstBinImmediately();\n          })\n          .then(function() {\n              assertSelectedPoints(firstBinPts);\n              return shiftClickSecondBin();\n          })\n          .then(function() {\n              assertSelectedPoints([].concat(firstBinPts, secondBinPts));\n              return shiftClickThirdBin();\n          })\n          .then(function() {\n              assertSelectedPoints([].concat(firstBinPts, secondBinPts, thirdBinPts));\n              return clickFirstBin();\n          })\n          .then(function() {\n              assertSelectedPoints([].concat(firstBinPts));\n              clickFirstBin();\n              return deselectPromise;\n          })\n          .then(function() {\n              assertSelectionCleared();\n          })\n          .catch(failTest)\n          .then(done);\n\n        function clickFirstBinImmediately() { return _immediateClickPt({ x: 141, y: 358 }); }\n        function clickFirstBin() { return _click(141, 358); }\n        function shiftClickSecondBin() { return _click(239, 330, { shiftKey: true }); }\n        function shiftClickThirdBin() { return _click(351, 347, { shiftKey: true }); }\n    });\n\n    it('ignores clicks on boxes in a box trace type', function(done) {\n        var mock = Lib.extendDeep({}, require('@mocks/box_grouped_horz.json'));\n\n        mock.layout.clickmode = 'event+select';\n        mock.layout.width = 1100;\n        mock.layout.height = 450;\n\n        Plotly.plot(gd, mock.data, mock.layout)\n          .then(function() {\n              return clickPtImmediately();\n          })\n          .then(function() {\n              assertSelectedPoints(2);\n              clickPt();\n              return deselectPromise;\n          })\n          .then(function() {\n              assertSelectionCleared();\n              clickBox();\n          })\n          .then(function() {\n              // TODO Be sure this is called \"late enough\" after clicking on box has been processed\n              // Maybe plotly_click event would get fired after any selection events?\n              assertSelectionCleared();\n          })\n          .catch(failTest)\n          .then(done);\n\n        function clickPtImmediately() { return _immediateClickPt({ x: 610, y: 342 }); }\n        function clickPt() { return _clickPt({ x: 610, y: 342 }); }\n        function clickBox() { return _clickPt({ x: 565, y: 329 }); }\n    });\n\n    describe('is disabled when clickmode does not include \\'select\\'', function() {\n        // TODO How to test for pan and zoom mode as well? Note, that\n        // in lasso and select mode, plotly_selected was emitted upon a single\n        // click although select-on-click wasn't supported. This behavior is kept\n        // for compatibility reasons and as a side affect allows to write this test\n        // for lasso and select. But in pan and zoom, how to be sure a click has been\n        // processed by plotly.js?\n        // ['pan', 'zoom', 'select', 'lasso']\n        ['select', 'lasso']\n          .forEach(function(dragmode) {\n              it('and dragmode is ' + dragmode, function(done) {\n                  plotMock14({ clickmode: 'event', dragmode: dragmode })\n                    .then(function() {\n                        // Still, the plotly_selected event should be thrown,\n                        // so return promise here\n                        return _immediateClickPt(mock14Pts[1]);\n                    })\n                    .then(function() {\n                        assertSelectionCleared();\n                    })\n                    .catch(failTest)\n                    .then(done);\n              });\n          });\n    });\n\n    describe('is supported by', function() {\n\n        // On loading mocks: note, that require functions are resolved at compile time\n        // and thus dynamically concatenated mock paths wont't work.\n        [\n            testCase('histrogram', require('@mocks/histogram_colorscale.json'), 355, 301, [3, 4, 5]),\n            testCase('box', require('@mocks/box_grouped_horz.json'), 610, 342, [[2], [], []],\n              { width: 1100, height: 450 }),\n            testCase('violin', require('@mocks/violin_grouped.json'), 166, 187, [[3], [], []],\n              { width: 1100, height: 450 }),\n            testCase('ohlc', require('@mocks/ohlc_first.json'), 669, 165, [9]),\n            testCase('candlestick', require('@mocks/finance_style.json'), 331, 162, [[], [5]]),\n            testCase('choropleth', require('@mocks/geo_choropleth-text.json'), 440, 163, [6]),\n            testCase('scattermapbox', require('@mocks/mapbox_0.json'), 650, 195, [[2], []], {},\n              { mapboxAccessToken: require('@build/credentials.json').MAPBOX_ACCESS_TOKEN })\n        ]\n          .forEach(function(testCase) {\n              it('trace type ' + testCase.traceType, function(done) {\n                  var defaultLayoutOpts = {\n                      layout: {\n                          clickmode: 'event+select',\n                          dragmode: 'pan',\n                          hovermode: 'closest'\n                      }\n                  };\n                  var customLayoutOptions = {\n                      layout: testCase.layoutOptions\n                  };\n                  var customConfigOptions = {\n                      config: testCase.configOptions\n                  };\n                  var mockCopy = Lib.extendDeep(\n                    {},\n                    testCase.mock,\n                    defaultLayoutOpts,\n                    customLayoutOptions,\n                    customConfigOptions);\n\n                  Plotly.plot(gd, mockCopy.data, mockCopy.layout, mockCopy.config)\n                    .then(function() {\n                        return _immediateClickPt(testCase);\n                    })\n                    .then(function() {\n                        assertSelectedPoints(testCase.expectedPts);\n                        return Plotly.relayout(gd, 'dragmode', 'lasso');\n                    })\n                    .then(function() {\n                        _clickPt(testCase);\n                        return deselectPromise;\n                    })\n                    .then(function() {\n                        assertSelectionCleared();\n                        return _clickPt(testCase);\n                    })\n                    .then(function() {\n                        assertSelectedPoints(testCase.expectedPts);\n                    })\n                    .catch(failTest)\n                    .then(done);\n              });\n          });\n\n        function testCase(traceType, mock, x, y, expectedPts, layoutOptions, configOptions) {\n            return {\n                traceType: traceType,\n                mock: mock,\n                layoutOptions: layoutOptions,\n                x: x,\n                y: y,\n                expectedPts: expectedPts,\n                configOptions: configOptions\n            };\n        }\n    });\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'@flaky Click-to-select'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "'1'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "134",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "116",
        "type": "Numeric"
      },
      {
        "value": "'7'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "270",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "160",
        "type": "Numeric"
      },
      {
        "value": "'10'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "324",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "198",
        "type": "Numeric"
      },
      {
        "value": "'35'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "685",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "341",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "createGraphDiv",
        "type": "Identifier"
      },
      {
        "value": "afterEach",
        "type": "Identifier"
      },
      {
        "value": "destroyGraphDiv",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "plotMock14",
        "type": "Identifier"
      },
      {
        "value": "layoutOpts",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/14.json'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "defaultLayoutOpts",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "clickmode",
        "type": "Identifier"
      },
      {
        "value": "'event+select'",
        "type": "String"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "hovermode",
        "type": "Identifier"
      },
      {
        "value": "'closest'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "defaultLayoutOpts",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "layoutOpts",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_click",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "clickOpts",
        "type": "Identifier"
      },
      {
        "value": "immediate",
        "type": "Identifier"
      },
      {
        "value": "resetEvents",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "immediate",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "clickOpts",
        "type": "Identifier"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "clickOpts",
        "type": "Identifier"
      },
      {
        "value": "DBLCLICKDELAY",
        "type": "Identifier"
      },
      {
        "value": "1.01",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "selectedPromise",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "coords",
        "type": "Identifier"
      },
      {
        "value": "clickOpts",
        "type": "Identifier"
      },
      {
        "value": "immediate",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "coords",
        "type": "Identifier"
      },
      {
        "value": "toBeDefined",
        "type": "Identifier"
      },
      {
        "value": "'coords needs to be defined'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "coords",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBeDefined",
        "type": "Identifier"
      },
      {
        "value": "'coords.x needs to be defined'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "coords",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBeDefined",
        "type": "Identifier"
      },
      {
        "value": "'coords.y needs to be defined'",
        "type": "String"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_click",
        "type": "Identifier"
      },
      {
        "value": "coords",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "coords",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "clickOpts",
        "type": "Identifier"
      },
      {
        "value": "immediate",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "coords",
        "type": "Identifier"
      },
      {
        "value": "clickOpts",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "coords",
        "type": "Identifier"
      },
      {
        "value": "clickOpts",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "expectedPtsPerTrace",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "expectedPts",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "traceNum",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "Array",
        "type": "Identifier"
      },
      {
        "value": "isArray",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "Array",
        "type": "Identifier"
      },
      {
        "value": "isArray",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "expectedPtsPerTrace",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "expectedPtsPerTrace",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "expectedPtsPerTrace",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "for",
        "type": "Keyword"
      },
      {
        "value": "traceNum",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "traceNum",
        "type": "Identifier"
      },
      {
        "value": "expectedPtsPerTrace",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "traceNum",
        "type": "Identifier"
      },
      {
        "value": "expectedPts",
        "type": "Identifier"
      },
      {
        "value": "expectedPtsPerTrace",
        "type": "Identifier"
      },
      {
        "value": "traceNum",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "traceNum",
        "type": "Identifier"
      },
      {
        "value": "selectedpoints",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "expectedPts",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "traceNum",
        "type": "Identifier"
      },
      {
        "value": "selectedpoints",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "expectedPts",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectionCleared",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "fullDataItem",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "fullDataItem",
        "type": "Identifier"
      },
      {
        "value": "selectedpoints",
        "type": "Identifier"
      },
      {
        "value": "toBeUndefined",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'selects a single data point when being clicked'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "plotMock14",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'clears entire selection when the last selected data point'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "desc",
        "type": "Identifier"
      },
      {
        "value": "'is clicked'",
        "type": "String"
      },
      {
        "value": "clickOpts",
        "type": "Identifier"
      },
      {
        "value": "desc",
        "type": "Identifier"
      },
      {
        "value": "'is clicked while add/subtract modifier keys are active'",
        "type": "String"
      },
      {
        "value": "clickOpts",
        "type": "Identifier"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "testData",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "testData",
        "type": "Identifier"
      },
      {
        "value": "desc",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "plotMock14",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "testData",
        "type": "Identifier"
      },
      {
        "value": "clickOpts",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "deselectPromise",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectionCleared",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "testData",
        "type": "Identifier"
      },
      {
        "value": "clickOpts",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'cleanly clears and starts selections although add/subtract mode on'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "plotMock14",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "deselectPromise",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectionCleared",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'supports adding to an existing selection'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "plotMock14",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'supports subtracting from an existing selection'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "plotMock14",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can be used interchangeably with lasso/box select'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "plotMock14",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "SELECT_PATH",
        "type": "Identifier"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "LASSO_PATH",
        "type": "Identifier"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "670",
        "type": "Numeric"
      },
      {
        "value": "330",
        "type": "Numeric"
      },
      {
        "value": "695",
        "type": "Numeric"
      },
      {
        "value": "330",
        "type": "Numeric"
      },
      {
        "value": "695",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "670",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "altKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "doubleClick",
        "type": "Identifier"
      },
      {
        "value": "650",
        "type": "Numeric"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectionCleared",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'works in a multi-trace plot'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "12",
        "type": "Numeric"
      },
      {
        "value": "12",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "12",
        "type": "Numeric"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scatter'",
        "type": "String"
      },
      {
        "value": "mode",
        "type": "Identifier"
      },
      {
        "value": "'markers'",
        "type": "String"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "9",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "9",
        "type": "Numeric"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "21",
        "type": "Numeric"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "mode",
        "type": "Identifier"
      },
      {
        "value": "'markers'",
        "type": "String"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "600",
        "type": "Numeric"
      },
      {
        "value": "hovermode",
        "type": "Identifier"
      },
      {
        "value": "'closest'",
        "type": "String"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "clickmode",
        "type": "Identifier"
      },
      {
        "value": "'event+select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_click",
        "type": "Identifier"
      },
      {
        "value": "136",
        "type": "Numeric"
      },
      {
        "value": "369",
        "type": "Numeric"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_click",
        "type": "Identifier"
      },
      {
        "value": "245",
        "type": "Numeric"
      },
      {
        "value": "136",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_click",
        "type": "Identifier"
      },
      {
        "value": "183",
        "type": "Numeric"
      },
      {
        "value": "470",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'is supported in pan/zoom mode'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "plotMock14",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'zoom'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "LASSO_PATH",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "deselectPromise",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectionCleared",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'retains selected points when switching between pan and zoom mode'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "plotMock14",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'zoom'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'pan'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'zoom'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'is supported by scattergl in pan/zoom mode'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "9",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "9",
        "type": "Numeric"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "21",
        "type": "Numeric"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "mode",
        "type": "Identifier"
      },
      {
        "value": "'markers'",
        "type": "String"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "600",
        "type": "Numeric"
      },
      {
        "value": "hovermode",
        "type": "Identifier"
      },
      {
        "value": "'closest'",
        "type": "String"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'zoom'",
        "type": "String"
      },
      {
        "value": "clickmode",
        "type": "Identifier"
      },
      {
        "value": "'event+select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_click",
        "type": "Identifier"
      },
      {
        "value": "230",
        "type": "Numeric"
      },
      {
        "value": "340",
        "type": "Numeric"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'deals correctly with histogram\\'s binning in the persistent selection case'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/histogram_colorscale.json'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "firstBinPts",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "secondBinPts",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "thirdBinPts",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "clickmode",
        "type": "Identifier"
      },
      {
        "value": "'event+select'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "clickFirstBinImmediately",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "firstBinPts",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "shiftClickSecondBin",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "concat",
        "type": "Identifier"
      },
      {
        "value": "firstBinPts",
        "type": "Identifier"
      },
      {
        "value": "secondBinPts",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "shiftClickThirdBin",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "concat",
        "type": "Identifier"
      },
      {
        "value": "firstBinPts",
        "type": "Identifier"
      },
      {
        "value": "secondBinPts",
        "type": "Identifier"
      },
      {
        "value": "thirdBinPts",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "clickFirstBin",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "concat",
        "type": "Identifier"
      },
      {
        "value": "firstBinPts",
        "type": "Identifier"
      },
      {
        "value": "clickFirstBin",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "deselectPromise",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectionCleared",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "clickFirstBinImmediately",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "141",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "358",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "clickFirstBin",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_click",
        "type": "Identifier"
      },
      {
        "value": "141",
        "type": "Numeric"
      },
      {
        "value": "358",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "shiftClickSecondBin",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_click",
        "type": "Identifier"
      },
      {
        "value": "239",
        "type": "Numeric"
      },
      {
        "value": "330",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "shiftClickThirdBin",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_click",
        "type": "Identifier"
      },
      {
        "value": "351",
        "type": "Numeric"
      },
      {
        "value": "347",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'ignores clicks on boxes in a box trace type'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/box_grouped_horz.json'",
        "type": "String"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "clickmode",
        "type": "Identifier"
      },
      {
        "value": "'event+select'",
        "type": "String"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "1100",
        "type": "Numeric"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "450",
        "type": "Numeric"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "clickPtImmediately",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "clickPt",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "deselectPromise",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectionCleared",
        "type": "Identifier"
      },
      {
        "value": "clickBox",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectionCleared",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "clickPtImmediately",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "610",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "342",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "clickPt",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "610",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "342",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "clickBox",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "565",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "329",
        "type": "Numeric"
      },
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'is disabled when clickmode does not include \\'select\\''",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'and dragmode is '",
        "type": "String"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "plotMock14",
        "type": "Identifier"
      },
      {
        "value": "clickmode",
        "type": "Identifier"
      },
      {
        "value": "'event'",
        "type": "String"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "mock14Pts",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectionCleared",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'is supported by'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "'histrogram'",
        "type": "String"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/histogram_colorscale.json'",
        "type": "String"
      },
      {
        "value": "355",
        "type": "Numeric"
      },
      {
        "value": "301",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "'box'",
        "type": "String"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/box_grouped_horz.json'",
        "type": "String"
      },
      {
        "value": "610",
        "type": "Numeric"
      },
      {
        "value": "342",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "1100",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "450",
        "type": "Numeric"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "'violin'",
        "type": "String"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/violin_grouped.json'",
        "type": "String"
      },
      {
        "value": "166",
        "type": "Numeric"
      },
      {
        "value": "187",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "1100",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "450",
        "type": "Numeric"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "'ohlc'",
        "type": "String"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/ohlc_first.json'",
        "type": "String"
      },
      {
        "value": "669",
        "type": "Numeric"
      },
      {
        "value": "165",
        "type": "Numeric"
      },
      {
        "value": "9",
        "type": "Numeric"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "'candlestick'",
        "type": "String"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/finance_style.json'",
        "type": "String"
      },
      {
        "value": "331",
        "type": "Numeric"
      },
      {
        "value": "162",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "'choropleth'",
        "type": "String"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/geo_choropleth-text.json'",
        "type": "String"
      },
      {
        "value": "440",
        "type": "Numeric"
      },
      {
        "value": "163",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "'scattermapbox'",
        "type": "String"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/mapbox_0.json'",
        "type": "String"
      },
      {
        "value": "650",
        "type": "Numeric"
      },
      {
        "value": "195",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "mapboxAccessToken",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@build/credentials.json'",
        "type": "String"
      },
      {
        "value": "MAPBOX_ACCESS_TOKEN",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'trace type '",
        "type": "String"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "traceType",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "defaultLayoutOpts",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "clickmode",
        "type": "Identifier"
      },
      {
        "value": "'event+select'",
        "type": "String"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'pan'",
        "type": "String"
      },
      {
        "value": "hovermode",
        "type": "Identifier"
      },
      {
        "value": "'closest'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "customLayoutOptions",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "layoutOptions",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "customConfigOptions",
        "type": "Identifier"
      },
      {
        "value": "config",
        "type": "Identifier"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "configOptions",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "defaultLayoutOpts",
        "type": "Identifier"
      },
      {
        "value": "customLayoutOptions",
        "type": "Identifier"
      },
      {
        "value": "customConfigOptions",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "config",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_immediateClickPt",
        "type": "Identifier"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "expectedPts",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "deselectPromise",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectionCleared",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_clickPt",
        "type": "Identifier"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "expectedPts",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "testCase",
        "type": "Identifier"
      },
      {
        "value": "traceType",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "expectedPts",
        "type": "Identifier"
      },
      {
        "value": "layoutOptions",
        "type": "Identifier"
      },
      {
        "value": "configOptions",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "traceType",
        "type": "Identifier"
      },
      {
        "value": "traceType",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "layoutOptions",
        "type": "Identifier"
      },
      {
        "value": "layoutOptions",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "expectedPts",
        "type": "Identifier"
      },
      {
        "value": "expectedPts",
        "type": "Identifier"
      },
      {
        "value": "configOptions",
        "type": "Identifier"
      },
      {
        "value": "configOptions",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/palantir/blueprint/blob/a133dff3190e84db84651da84bc643d841658f50/packages/core/test/overlay/overlayTests.tsx",
    "commit": "a133dff3190e84db84651da84bc643d841658f50",
    "project_name": "blueprint",
    "project_author": "palantir",
    "flaky_file": "/packages/core/test/overlay/overlayTests.tsx",
    "start_line": 163,
    "end_line": 320,
    "test_code": "describe(\"Focus management\", () => {\n    const testsContainerElement = document.createElement(\"div\");\n    document.documentElement.appendChild(testsContainerElement);\n\n    it(\"brings focus to overlay if autoFocus=true\", done => {\n        wrapper = mount(\n            <Overlay autoFocus={true} inline={false} isOpen={true}>\n                <input type=\"text\" />\n            </Overlay>,\n            { attachTo: testsContainerElement },\n        );\n        assertFocus(\".pt-overlay-backdrop\", done);\n    });\n\n    it(\"does not bring focus to overlay if autoFocus=false\", done => {\n        wrapper = mount(\n            <Overlay autoFocus={false} inline={false} isOpen={true}>\n                <input type=\"text\" />\n            </Overlay>,\n            { attachTo: testsContainerElement },\n        );\n        assertFocus(\"body\", done);\n    });\n\n    // React implements autoFocus itself so our `[autofocus]` logic never fires.\n    // This test always fails and I can't figure out why, so disabling as we're not even testing our own logic.\n    it.skip(\"autoFocus element inside overlay gets the focus\", done => {\n        wrapper = mount(\n            <Overlay inline={false} isOpen={true}>\n                <input autoFocus={true} type=\"text\" />\n            </Overlay>,\n            { attachTo: testsContainerElement },\n        );\n        assertFocus(\"input\", done);\n    });\n\n    it(\"returns focus to overlay if enforceFocus=true\", done => {\n        let buttonRef: HTMLElement;\n        const focusBtnAndAssert = () => {\n            buttonRef.focus();\n            // nested setTimeouts delay execution until the next frame, not\n            // just to the end of the current frame. necessary to wait for\n            // focus to change.\n            setTimeout(() => {\n                setTimeout(() => {\n                    wrapper.update();\n                    assert.notStrictEqual(buttonRef, document.activeElement);\n                    done();\n                });\n            });\n        };\n\n        wrapper = mount(\n            <div>\n                <button ref={ref => (buttonRef = ref)} />\n                <Overlay enforceFocus={true} inline={false} isOpen={true}>\n                    <input ref={ref => ref && focusBtnAndAssert()} />\n                </Overlay>\n            </div>,\n            { attachTo: testsContainerElement },\n        );\n    });\n\n    it(\"returns focus to overlay after clicking the backdrop if enforceFocus=true\", done => {\n        wrapper = mount(\n            <Overlay enforceFocus={true} canOutsideClickClose={false} inline={true} isOpen={true}>\n                {createOverlayContents()}\n            </Overlay>,\n            { attachTo: testsContainerElement },\n        );\n        wrapper.find(BACKDROP_SELECTOR).simulate(\"mousedown\");\n        assertFocus(`.${Classes.OVERLAY_CONTENT}`, done);\n    });\n\n    it(\"does not result in maximum call stack if two overlays open with enforceFocus=true\", () => {\n        const anotherContainer = document.createElement(\"div\");\n        document.documentElement.appendChild(anotherContainer);\n        const temporaryWrapper = mount(\n            <Overlay enforceFocus={true} inline={true} isOpen={true}>\n                <input type=\"text\" />\n            </Overlay>,\n            { attachTo: anotherContainer },\n        );\n\n        wrapper = mount(\n            <Overlay enforceFocus={true} inline={true} isOpen={false}>\n                <input id=\"inputId\" type=\"text\" />\n            </Overlay>,\n            { attachTo: testsContainerElement },\n        );\n        // ES6 class property vs prototype, see: https://github.com/airbnb/enzyme/issues/365\n        const bringFocusSpy = spy(wrapper.instance() as Overlay, \"bringFocusInsideOverlay\");\n        wrapper.setProps({ isOpen: true });\n\n        // triggers the infinite recursion\n        wrapper.find(\"#inputId\").simulate(\"click\");\n        assert.isTrue(bringFocusSpy.calledOnce);\n\n        // don't need spy.restore() since the wrapper will be destroyed after test anyways\n        temporaryWrapper.unmount();\n        document.documentElement.removeChild(anotherContainer);\n    });\n\n    it(\"does not return focus to overlay if enforceFocus=false\", done => {\n        let buttonRef: HTMLElement;\n        const focusBtnAndAssert = () => {\n            buttonRef.focus();\n            assert.strictEqual(buttonRef, document.activeElement);\n            done();\n        };\n\n        wrapper = mount(\n            <div>\n                <button ref={ref => (buttonRef = ref)} />\n                <Overlay enforceFocus={false} inline={false} isOpen={true}>\n                    <input ref={ref => ref && setTimeout(focusBtnAndAssert)} />\n                </Overlay>\n            </div>,\n            { attachTo: testsContainerElement },\n        );\n    });\n\n    it(\"doesn't focus overlay if focus is already inside overlay\", done => {\n        let textarea: HTMLTextAreaElement;\n        wrapper = mount(\n            <Overlay inline={false} isOpen={true}>\n                <textarea ref={ref => (textarea = ref)} />\n            </Overlay>,\n            { attachTo: testsContainerElement },\n        );\n        textarea.focus();\n        assertFocus(\"textarea\", done);\n    });\n\n    it(\"does not focus overlay when closed\", done => {\n        wrapper = mount(\n            <div>\n                <button ref={ref => ref && ref.focus()} />\n                <Overlay inline={false} isOpen={false} />\n            </div>,\n            { attachTo: testsContainerElement },\n        );\n        assertFocus(\"button\", done);\n    });\n\n    function assertFocus(selector: string, done: MochaDone) {\n        wrapper.update();\n        // the behavior being tested relies on requestAnimationFrame. to\n        // avoid flakiness, use nested setTimeouts to delay execution until\n        // the next frame, not just to the end of the current frame.\n        setTimeout(() => {\n            setTimeout(() => {\n                assert.strictEqual(document.querySelector(selector), document.activeElement);\n                done();\n            });\n        });\n    }\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "\"Focus management\"",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "createElement",
        "type": "Identifier"
      },
      {
        "value": "\"div\"",
        "type": "String"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "documentElement",
        "type": "Identifier"
      },
      {
        "value": "appendChild",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"brings focus to overlay if autoFocus=true\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "autoFocus",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "input",
        "type": "JSXIdentifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "\"text\"",
        "type": "JSXText"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "assertFocus",
        "type": "Identifier"
      },
      {
        "value": "\".pt-overlay-backdrop\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"does not bring focus to overlay if autoFocus=false\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "autoFocus",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "input",
        "type": "JSXIdentifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "\"text\"",
        "type": "JSXText"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "assertFocus",
        "type": "Identifier"
      },
      {
        "value": "\"body\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "skip",
        "type": "Identifier"
      },
      {
        "value": "\"autoFocus element inside overlay gets the focus\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "input",
        "type": "JSXIdentifier"
      },
      {
        "value": "autoFocus",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "\"text\"",
        "type": "JSXText"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "assertFocus",
        "type": "Identifier"
      },
      {
        "value": "\"input\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"returns focus to overlay if enforceFocus=true\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "buttonRef",
        "type": "Identifier"
      },
      {
        "value": "HTMLElement",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "focusBtnAndAssert",
        "type": "Identifier"
      },
      {
        "value": "buttonRef",
        "type": "Identifier"
      },
      {
        "value": "focus",
        "type": "Identifier"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "update",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "notStrictEqual",
        "type": "Identifier"
      },
      {
        "value": "buttonRef",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "activeElement",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "button",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "buttonRef",
        "type": "Identifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "enforceFocus",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "\n                    ",
        "type": "JSXText"
      },
      {
        "value": "input",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "focusBtnAndAssert",
        "type": "Identifier"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"returns focus to overlay after clicking the backdrop if enforceFocus=true\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "enforceFocus",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "canOutsideClickClose",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "createOverlayContents",
        "type": "Identifier"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "BACKDROP_SELECTOR",
        "type": "Identifier"
      },
      {
        "value": "simulate",
        "type": "Identifier"
      },
      {
        "value": "\"mousedown\"",
        "type": "String"
      },
      {
        "value": "assertFocus",
        "type": "Identifier"
      },
      {
        "value": "`.${",
        "type": "Template"
      },
      {
        "value": "Classes",
        "type": "Identifier"
      },
      {
        "value": "OVERLAY_CONTENT",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"does not result in maximum call stack if two overlays open with enforceFocus=true\"",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "anotherContainer",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "createElement",
        "type": "Identifier"
      },
      {
        "value": "\"div\"",
        "type": "String"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "documentElement",
        "type": "Identifier"
      },
      {
        "value": "appendChild",
        "type": "Identifier"
      },
      {
        "value": "anotherContainer",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "temporaryWrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "enforceFocus",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "input",
        "type": "JSXIdentifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "\"text\"",
        "type": "JSXText"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "anotherContainer",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "enforceFocus",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "input",
        "type": "JSXIdentifier"
      },
      {
        "value": "id",
        "type": "JSXIdentifier"
      },
      {
        "value": "\"inputId\"",
        "type": "JSXText"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "\"text\"",
        "type": "JSXText"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "bringFocusSpy",
        "type": "Identifier"
      },
      {
        "value": "spy",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "instance",
        "type": "Identifier"
      },
      {
        "value": "as",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "Identifier"
      },
      {
        "value": "\"bringFocusInsideOverlay\"",
        "type": "String"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "setProps",
        "type": "Identifier"
      },
      {
        "value": "isOpen",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "\"#inputId\"",
        "type": "String"
      },
      {
        "value": "simulate",
        "type": "Identifier"
      },
      {
        "value": "\"click\"",
        "type": "String"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "isTrue",
        "type": "Identifier"
      },
      {
        "value": "bringFocusSpy",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "temporaryWrapper",
        "type": "Identifier"
      },
      {
        "value": "unmount",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "documentElement",
        "type": "Identifier"
      },
      {
        "value": "removeChild",
        "type": "Identifier"
      },
      {
        "value": "anotherContainer",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"does not return focus to overlay if enforceFocus=false\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "buttonRef",
        "type": "Identifier"
      },
      {
        "value": "HTMLElement",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "focusBtnAndAssert",
        "type": "Identifier"
      },
      {
        "value": "buttonRef",
        "type": "Identifier"
      },
      {
        "value": "focus",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "strictEqual",
        "type": "Identifier"
      },
      {
        "value": "buttonRef",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "activeElement",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "button",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "buttonRef",
        "type": "Identifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "enforceFocus",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "\n                    ",
        "type": "JSXText"
      },
      {
        "value": "input",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "focusBtnAndAssert",
        "type": "Identifier"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"doesn't focus overlay if focus is already inside overlay\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "textarea",
        "type": "Identifier"
      },
      {
        "value": "HTMLTextAreaElement",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "textarea",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "textarea",
        "type": "Identifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "textarea",
        "type": "Identifier"
      },
      {
        "value": "focus",
        "type": "Identifier"
      },
      {
        "value": "assertFocus",
        "type": "Identifier"
      },
      {
        "value": "\"textarea\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"does not focus overlay when closed\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "button",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "JSXIdentifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "ref",
        "type": "Identifier"
      },
      {
        "value": "ref",
        "type": "JSXIdentifier"
      },
      {
        "value": "focus",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n                ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "div",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "assertFocus",
        "type": "Identifier"
      },
      {
        "value": "\"button\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertFocus",
        "type": "Identifier"
      },
      {
        "value": "selector",
        "type": "Identifier"
      },
      {
        "value": "string",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "MochaDone",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "update",
        "type": "Identifier"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "strictEqual",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "selector",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "activeElement",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/palantir/blueprint/blob/c2aada111f8e82e074a5765143ece5d07da6c4cf/packages/core/test/overlay/overlayTests.tsx",
    "commit": "c2aada111f8e82e074a5765143ece5d07da6c4cf",
    "project_name": "blueprint",
    "project_author": "palantir",
    "flaky_file": "/packages/core/test/overlay/overlayTests.tsx",
    "start_line": 168,
    "end_line": 176,
    "test_code": "it.skip(\"brings focus to overlay if autoFocus=true\", done => {\n    wrapper = mount(\n        <Overlay autoFocus={true} inline={false} isOpen={true}>\n            <input type=\"text\" />\n        </Overlay>,\n        { attachTo: testsContainerElement },\n    );\n    assertFocus(\".pt-overlay-backdrop\", done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "skip",
        "type": "Identifier"
      },
      {
        "value": "\"brings focus to overlay if autoFocus=true\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "autoFocus",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "input",
        "type": "JSXIdentifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "\"text\"",
        "type": "JSXText"
      },
      {
        "value": "\n        ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "assertFocus",
        "type": "Identifier"
      },
      {
        "value": "\".pt-overlay-backdrop\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/palantir/blueprint/blob/dd90bfa0943dd6ac2ea1d233162cc3c21aa4e701/packages/core/test/overlay/overlayTests.tsx",
    "commit": "dd90bfa0943dd6ac2ea1d233162cc3c21aa4e701",
    "project_name": "blueprint",
    "project_author": "palantir",
    "flaky_file": "/packages/core/test/overlay/overlayTests.tsx",
    "start_line": 160,
    "end_line": 168,
    "test_code": "it.skip(\"brings focus to overlay if autoFocus=true\", (done) => {\n    wrapper = mount(\n        <Overlay autoFocus={true} inline={false} isOpen={true}>\n            <input type=\"text\" />\n        </Overlay>,\n        { attachTo: testsContainerElement },\n    );\n    assertFocus(\".pt-overlay-backdrop\", done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "skip",
        "type": "Identifier"
      },
      {
        "value": "\"brings focus to overlay if autoFocus=true\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "autoFocus",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "inline",
        "type": "JSXIdentifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "isOpen",
        "type": "JSXIdentifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "input",
        "type": "JSXIdentifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "\"text\"",
        "type": "JSXText"
      },
      {
        "value": "\n        ",
        "type": "JSXText"
      },
      {
        "value": "Overlay",
        "type": "JSXIdentifier"
      },
      {
        "value": "attachTo",
        "type": "Identifier"
      },
      {
        "value": "testsContainerElement",
        "type": "Identifier"
      },
      {
        "value": "assertFocus",
        "type": "Identifier"
      },
      {
        "value": "\".pt-overlay-backdrop\"",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/jhipster/generator-jhipster/blob/2865e441e4b09335f88f3839ee9147f8b8b9c05e/generators/client/templates/react/src/test/javascript/e2e/modules/account/account.spec.ts.ejs",
    "commit": "2865e441e4b09335f88f3839ee9147f8b8b9c05e",
    "project_name": "generator-jhipster",
    "project_author": "jhipster",
    "flaky_file": "/generators/client/templates/react/src/test/javascript/e2e/modules/account/account.spec.ts.ejs",
    "start_line": 165,
    "end_line": 182,
    "test_code": "it('should activate the new registered user', async () => {\n  expect(await element(by.id('user-management-page-heading')).isPresent()).to.be.true;\n<%_ if (databaseType !== 'cassandra') { _%>\n\n  const modifiedDateSortButton = getModifiedDateSortButton();\n  await waitUntilClickable(modifiedDateSortButton);\n  await modifiedDateSortButton.click();\n<%_ } _%>\n\n  const deactivatedButton = getUserDeactivatedButtonByLogin('user_test');\n  await waitUntilClickable(deactivatedButton);\n  await deactivatedButton.click();\n  await waitUntilHidden(deactivatedButton);\n\n  // Deactivated button should disappear\n  expect(await deactivatedButton.isPresent()).to.be.false;\n  await navBarPage.autoSignOut();\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should activate the new registered user'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "by",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'user-management-page-heading'",
        "type": "String"
      },
      {
        "value": "isPresent",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Keyword"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "databaseType",
        "type": "Identifier"
      },
      {
        "value": "'cassandra'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "modifiedDateSortButton",
        "type": "Identifier"
      },
      {
        "value": "getModifiedDateSortButton",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitUntilClickable",
        "type": "Identifier"
      },
      {
        "value": "modifiedDateSortButton",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "modifiedDateSortButton",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "deactivatedButton",
        "type": "Identifier"
      },
      {
        "value": "getUserDeactivatedButtonByLogin",
        "type": "Identifier"
      },
      {
        "value": "'user_test'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitUntilClickable",
        "type": "Identifier"
      },
      {
        "value": "deactivatedButton",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "deactivatedButton",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitUntilHidden",
        "type": "Identifier"
      },
      {
        "value": "deactivatedButton",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "deactivatedButton",
        "type": "Identifier"
      },
      {
        "value": "isPresent",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Keyword"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "autoSignOut",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/jhipster/generator-jhipster/blob/44c54f6a5ae843123e2b8b74b5be5fe0f3a199cc/generators/client/templates/react/src/test/javascript/e2e/modules/account/account.spec.ts.ejs",
    "commit": "44c54f6a5ae843123e2b8b74b5be5fe0f3a199cc",
    "project_name": "generator-jhipster",
    "project_author": "jhipster",
    "flaky_file": "/generators/client/templates/react/src/test/javascript/e2e/modules/account/account.spec.ts.ejs",
    "start_line": 68,
    "end_line": 93,
    "test_code": "it('should login with admin account', async () => {\n  browser.get('/');\n  signInPage = navBarPage.getSignInPage();\n  <%_ if (authenticationType !== 'oauth2') { _%>\n  signInPage.waitUntilDisplayed();\n  // Login page should appear\n  expect(await signInPage.getTitle()).to.eq(loginPageTitle);\n\n  await signInPage.setUserName('admin');\n  await signInPage.setPassword('admin');\n  await signInPage.login();\n\n  signInPage.waitUntilHidden();\n\n  // Login page should close when login success\n  expect(await signInPage.isHidden()()).to.be.true;\n  navBarPage.autoSignOut();\n  <%_ } else { _%>\n  // Keycloak credentials by default, change them to be able to use oauth2 with Okta\n  signInPage.loginWithOAuth('admin', 'admin');\n  const success = element(by.className('alert-success'));\n  waitUntilDisplayed(success);\n  // Success alert should appear in home page\n  expect(await success.isPresent()).to.be.true;\n  <%_ } _%>\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should login with admin account'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "browser",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'/'",
        "type": "String"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "getSignInPage",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "authenticationType",
        "type": "Identifier"
      },
      {
        "value": "'oauth2'",
        "type": "String"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "waitUntilDisplayed",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "getTitle",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "eq",
        "type": "Identifier"
      },
      {
        "value": "loginPageTitle",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "setUserName",
        "type": "Identifier"
      },
      {
        "value": "'admin'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "setPassword",
        "type": "Identifier"
      },
      {
        "value": "'admin'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "login",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "waitUntilHidden",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "isHidden",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Keyword"
      },
      {
        "value": "navBarPage",
        "type": "Identifier"
      },
      {
        "value": "autoSignOut",
        "type": "Identifier"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "signInPage",
        "type": "Identifier"
      },
      {
        "value": "loginWithOAuth",
        "type": "Identifier"
      },
      {
        "value": "'admin'",
        "type": "String"
      },
      {
        "value": "'admin'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "success",
        "type": "Identifier"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "by",
        "type": "Identifier"
      },
      {
        "value": "className",
        "type": "Identifier"
      },
      {
        "value": "'alert-success'",
        "type": "String"
      },
      {
        "value": "waitUntilDisplayed",
        "type": "Identifier"
      },
      {
        "value": "success",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "success",
        "type": "Identifier"
      },
      {
        "value": "isPresent",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Keyword"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/rjsf-team/react-jsonschema-form/blob/2318786b38ead5eddc7c0e3146825f19013e0beb/test/StringField_test.js",
    "commit": "2318786b38ead5eddc7c0e3146825f19013e0beb",
    "project_name": "react-jsonschema-form",
    "project_author": "rjsf-team",
    "flaky_file": "/test/StringField_test.js",
    "start_line": 461,
    "end_line": 474,
    "test_code": "it(\"should set current date when pressing the Now button\", () => {\n  const {comp, node} = createFormComponent({schema: {\n    type: \"string\",\n    format: \"date-time\",\n  }, uiSchema});\n\n  return SimulateAsync().click(node.querySelector(\"a.btn-now\"))\n    .then(() => {\n      // Test that the two DATETIMEs are within 5 seconds of each other.\n      const now = new Date().getTime();\n      const timeDiff = now - new Date(comp.state.formData).getTime();\n      expect(timeDiff).to.be.at.most(5000);\n    });\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"should set current date when pressing the Now button\"",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "comp",
        "type": "Identifier"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "createFormComponent",
        "type": "Identifier"
      },
      {
        "value": "schema",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "\"string\"",
        "type": "String"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "\"date-time\"",
        "type": "String"
      },
      {
        "value": "uiSchema",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "SimulateAsync",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "\"a.btn-now\"",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "now",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Date",
        "type": "Identifier"
      },
      {
        "value": "getTime",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "timeDiff",
        "type": "Identifier"
      },
      {
        "value": "now",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Date",
        "type": "Identifier"
      },
      {
        "value": "comp",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "formData",
        "type": "Identifier"
      },
      {
        "value": "getTime",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "timeDiff",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "at",
        "type": "Identifier"
      },
      {
        "value": "most",
        "type": "Identifier"
      },
      {
        "value": "5000",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/microsoft/fluentui/blob/00b6694e2bd2f1de1713f9303fdff5dd63fcda9e/packages/office-ui-fabric-react/src/components/List/List.test.tsx",
    "commit": "00b6694e2bd2f1de1713f9303fdff5dd63fcda9e",
    "project_name": "office-ui-fabric-react",
    "project_author": "OfficeDev",
    "flaky_file": "/packages/office-ui-fabric-react/src/components/List/List.test.tsx",
    "start_line": 130,
    "end_line": 137,
    "test_code": "xit('invokes optional onRenderCell prop per item render', done => {\n  const onRenderCellMock = jest.fn();\n  const wrapper = mount(<List items={mockData(100)} />);\n\n  wrapper.setProps({ items: mockData(100), onRenderCell: onRenderCellMock, onPagesUpdated: (pages: IPage[]) => done() });\n\n  expect(onRenderCellMock).toHaveBeenCalledTimes(10);\n});\n",
    "tokens": [
      {
        "value": "xit",
        "type": "Identifier"
      },
      {
        "value": "'invokes optional onRenderCell prop per item render'",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "onRenderCellMock",
        "type": "Identifier"
      },
      {
        "value": "jest",
        "type": "Identifier"
      },
      {
        "value": "fn",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "List",
        "type": "JSXIdentifier"
      },
      {
        "value": "items",
        "type": "JSXIdentifier"
      },
      {
        "value": "mockData",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "wrapper",
        "type": "Identifier"
      },
      {
        "value": "setProps",
        "type": "Identifier"
      },
      {
        "value": "items",
        "type": "Identifier"
      },
      {
        "value": "mockData",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "onRenderCell",
        "type": "Identifier"
      },
      {
        "value": "onRenderCellMock",
        "type": "Identifier"
      },
      {
        "value": "onPagesUpdated",
        "type": "Identifier"
      },
      {
        "value": "pages",
        "type": "Identifier"
      },
      {
        "value": "IPage",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "onRenderCellMock",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalledTimes",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/aae0c60c6c720ef7de33333dfb7884087dae2edc/test/jasmine/tests/transition_test.js",
    "commit": "aae0c60c6c720ef7de33333dfb7884087dae2edc",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/transition_test.js",
    "start_line": 642,
    "end_line": 732,
    "test_code": "it('@flaky should only transition the layout when both traces and layout have animatable changes by default', function (done) {\n    var data = [{ y: [1, 2, 1] }];\n    var layout = {\n        transition: { duration: 10 },\n        xaxis: { range: [0, 3] },\n        yaxis: { range: [0, 3] }\n    };\n\n    Plotly.react(gd, data, layout)\n        .then(function () {\n            methods.push([gd._fullLayout._basePlotModules[0], 'plot']);\n            methods.push([gd._fullLayout._basePlotModules[0], 'transitionAxes']);\n            methods.push([Axes, 'drawOne']);\n            addSpies();\n        })\n        .then(function () {\n            data[0].marker = { color: 'red' };\n            return Plotly.react(gd, data, layout);\n        })\n        .then(function () {\n            assertSpies('just trace transition', [\n                [Plots, 'transitionFromReact', 1],\n                [gd._fullLayout._basePlotModules[0], 'plot', 1],\n                [gd._fullLayout._basePlotModules[0], 'transitionAxes', 0],\n                [Axes, 'drawOne', 0]\n            ]);\n        })\n        .then(function () {\n            layout.xaxis.range = [-2, 2];\n            return Plotly.react(gd, data, layout);\n        })\n        .then(function () {\n            assertSpies('just layout transition', [\n                [Plots, 'transitionFromReact', 1],\n                [gd._fullLayout._basePlotModules[0], 'transitionAxes', 1],\n                [Axes, 'drawOne', 1],\n                [Axes, 'drawOne', 1],\n                [Axes, 'drawOne', 1],\n                [Axes, 'drawOne', 1],\n                // one _module.plot call from the relayout at end of axis transition\n                [Registry, 'call', ['relayout', gd, { 'xaxis.range': [-2, 2] }]],\n                [Axes, 'drawOne', 1],\n                [gd._fullLayout._basePlotModules[0], 'plot', 1],\n            ]);\n        })\n        .then(function () {\n            data[0].marker.color = 'black';\n            layout.xaxis.range = [-1, 1];\n            return Plotly.react(gd, data, layout);\n        })\n        .then(delay(20))\n        .then(function () {\n            assertSpies('both trace and layout transitions', [\n                [Plots, 'transitionFromReact', 1],\n                [gd._fullLayout._basePlotModules[0], 'transitionAxes', 1],\n                [Axes, 'drawOne', 1],\n                [Axes, 'drawOne', 1],\n                // one instantaneous transition options to halt other trace transitions (if any)\n                [gd._fullLayout._basePlotModules[0], 'plot', [gd, null, { duration: 0, easing: 'cubic-in-out', ordering: 'layout first' }, 'function']],\n                [Axes, 'drawOne', 1],\n                [Axes, 'drawOne', 1],\n                // one _module.plot call from the relayout at end of axis transition\n                [Registry, 'call', ['relayout', gd, { 'xaxis.range': [-1, 1] }]],\n                [Axes, 'drawOne', 1],\n                [gd._fullLayout._basePlotModules[0], 'plot', [gd]]\n            ]);\n        })\n        .then(function () {\n            data[0].marker.color = 'red';\n            layout.xaxis.range = [-2, 2];\n            layout.transition.ordering = 'traces first';\n            return Plotly.react(gd, data, layout);\n        })\n        .then(delay(20))\n        .then(function () {\n            assertSpies('both trace and layout transitions under *ordering:traces first*', [\n                [Plots, 'transitionFromReact', 1],\n                // one smooth transition\n                [gd._fullLayout._basePlotModules[0], 'plot', [gd, [0], { duration: 10, easing: 'cubic-in-out', ordering: 'traces first' }, 'function']],\n                // one by relayout call  at the end of instantaneous axis transition\n                [gd._fullLayout._basePlotModules[0], 'transitionAxes', 1],\n                [Axes, 'drawOne', 1],\n                [Axes, 'drawOne', 1],\n                [Registry, 'call', ['relayout', gd, { 'xaxis.range': [-2, 2] }]],\n                [Axes, 'drawOne', 1],\n                [gd._fullLayout._basePlotModules[0], 'plot', [gd]]\n            ]);\n        })\n        .catch(failTest)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should only transition the layout when both traces and layout have animatable changes by default'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "transition",
        "type": "Identifier"
      },
      {
        "value": "duration",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "methods",
        "type": "Identifier"
      },
      {
        "value": "push",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "methods",
        "type": "Identifier"
      },
      {
        "value": "push",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'transitionAxes'",
        "type": "String"
      },
      {
        "value": "methods",
        "type": "Identifier"
      },
      {
        "value": "push",
        "type": "Identifier"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "addSpies",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "'red'",
        "type": "String"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSpies",
        "type": "Identifier"
      },
      {
        "value": "'just trace transition'",
        "type": "String"
      },
      {
        "value": "Plots",
        "type": "Identifier"
      },
      {
        "value": "'transitionFromReact'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'transitionAxes'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSpies",
        "type": "Identifier"
      },
      {
        "value": "'just layout transition'",
        "type": "String"
      },
      {
        "value": "Plots",
        "type": "Identifier"
      },
      {
        "value": "'transitionFromReact'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'transitionAxes'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Registry",
        "type": "Identifier"
      },
      {
        "value": "'call'",
        "type": "String"
      },
      {
        "value": "'relayout'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'xaxis.range'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "'black'",
        "type": "String"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSpies",
        "type": "Identifier"
      },
      {
        "value": "'both trace and layout transitions'",
        "type": "String"
      },
      {
        "value": "Plots",
        "type": "Identifier"
      },
      {
        "value": "'transitionFromReact'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'transitionAxes'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "duration",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "easing",
        "type": "Identifier"
      },
      {
        "value": "'cubic-in-out'",
        "type": "String"
      },
      {
        "value": "ordering",
        "type": "Identifier"
      },
      {
        "value": "'layout first'",
        "type": "String"
      },
      {
        "value": "'function'",
        "type": "String"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Registry",
        "type": "Identifier"
      },
      {
        "value": "'call'",
        "type": "String"
      },
      {
        "value": "'relayout'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'xaxis.range'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "'red'",
        "type": "String"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "transition",
        "type": "Identifier"
      },
      {
        "value": "ordering",
        "type": "Identifier"
      },
      {
        "value": "'traces first'",
        "type": "String"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSpies",
        "type": "Identifier"
      },
      {
        "value": "'both trace and layout transitions under *ordering:traces first*'",
        "type": "String"
      },
      {
        "value": "Plots",
        "type": "Identifier"
      },
      {
        "value": "'transitionFromReact'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "duration",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "easing",
        "type": "Identifier"
      },
      {
        "value": "'cubic-in-out'",
        "type": "String"
      },
      {
        "value": "ordering",
        "type": "Identifier"
      },
      {
        "value": "'traces first'",
        "type": "String"
      },
      {
        "value": "'function'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'transitionAxes'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Registry",
        "type": "Identifier"
      },
      {
        "value": "'call'",
        "type": "String"
      },
      {
        "value": "'relayout'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'xaxis.range'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "Axes",
        "type": "Identifier"
      },
      {
        "value": "'drawOne'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/aae0c60c6c720ef7de33333dfb7884087dae2edc/test/jasmine/tests/transition_test.js",
    "commit": "aae0c60c6c720ef7de33333dfb7884087dae2edc",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/transition_test.js",
    "start_line": 802,
    "end_line": 851,
    "test_code": "it('@flaky should transition layout when one or more axis auto-ranged value changed', function (done) {\n    var data = [{ y: [1, 2, 1] }];\n    var layout = { transition: { duration: 10 } };\n\n    function assertAxAutorange(msg, exp) {\n        expect(gd.layout.xaxis.autorange).toBe(exp, msg);\n        expect(gd.layout.yaxis.autorange).toBe(exp, msg);\n        expect(gd._fullLayout.xaxis.autorange).toBe(exp, msg);\n        expect(gd._fullLayout.yaxis.autorange).toBe(exp, msg);\n    }\n\n    Plotly.react(gd, data, layout)\n        .then(function () {\n            methods.push([gd._fullLayout._basePlotModules[0], 'plot']);\n            methods.push([gd._fullLayout._basePlotModules[0], 'transitionAxes']);\n            addSpies();\n            assertAxAutorange('axes are autorange:true by default', true);\n        })\n        .then(function () {\n            // N.B. marker.size can expand axis range\n            data[0].marker = { size: 30 };\n            return Plotly.react(gd, data, layout);\n        })\n        .then(function () {\n            assertSpies('must transition autoranged axes, not the traces', [\n                [Plots, 'transitionFromReact', 1],\n                [gd._fullLayout._basePlotModules[0], 'transitionAxes', 1],\n                // one instantaneous transition options to halt other trace transitions (if any)\n                [gd._fullLayout._basePlotModules[0], 'plot', [gd, null, { duration: 0, easing: 'cubic-in-out', ordering: 'layout first' }, 'function']],\n                // one _module.plot call from the relayout at end of axis transition\n                [gd._fullLayout._basePlotModules[0], 'plot', [gd]],\n            ]);\n            assertAxAutorange('axes are now autorange:false', false);\n        })\n        .then(function () {\n            data[0].marker = { size: 10 };\n            return Plotly.react(gd, data, layout);\n        })\n        .then(function () {\n            assertSpies('transition just traces, as now axis ranges are set', [\n                [Plots, 'transitionFromReact', 1],\n                [gd._fullLayout._basePlotModules[0], 'transitionAxes', 0],\n                // called from Plots.transitionFromReact\n                [gd._fullLayout._basePlotModules[0], 'plot', [gd, [0], { duration: 10, easing: 'cubic-in-out', ordering: 'layout first' }, 'function']]\n            ]);\n            assertAxAutorange('axes are still autorange:false', false);\n        })\n        .catch(failTest)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should transition layout when one or more axis auto-ranged value changed'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "transition",
        "type": "Identifier"
      },
      {
        "value": "duration",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertAxAutorange",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "exp",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "autorange",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "exp",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "autorange",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "exp",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "autorange",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "exp",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "autorange",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "exp",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "methods",
        "type": "Identifier"
      },
      {
        "value": "push",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "methods",
        "type": "Identifier"
      },
      {
        "value": "push",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'transitionAxes'",
        "type": "String"
      },
      {
        "value": "addSpies",
        "type": "Identifier"
      },
      {
        "value": "assertAxAutorange",
        "type": "Identifier"
      },
      {
        "value": "'axes are autorange:true by default'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSpies",
        "type": "Identifier"
      },
      {
        "value": "'must transition autoranged axes, not the traces'",
        "type": "String"
      },
      {
        "value": "Plots",
        "type": "Identifier"
      },
      {
        "value": "'transitionFromReact'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'transitionAxes'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "duration",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "easing",
        "type": "Identifier"
      },
      {
        "value": "'cubic-in-out'",
        "type": "String"
      },
      {
        "value": "ordering",
        "type": "Identifier"
      },
      {
        "value": "'layout first'",
        "type": "String"
      },
      {
        "value": "'function'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "assertAxAutorange",
        "type": "Identifier"
      },
      {
        "value": "'axes are now autorange:false'",
        "type": "String"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSpies",
        "type": "Identifier"
      },
      {
        "value": "'transition just traces, as now axis ranges are set'",
        "type": "String"
      },
      {
        "value": "Plots",
        "type": "Identifier"
      },
      {
        "value": "'transitionFromReact'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'transitionAxes'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "duration",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "easing",
        "type": "Identifier"
      },
      {
        "value": "'cubic-in-out'",
        "type": "String"
      },
      {
        "value": "ordering",
        "type": "Identifier"
      },
      {
        "value": "'layout first'",
        "type": "String"
      },
      {
        "value": "'function'",
        "type": "String"
      },
      {
        "value": "assertAxAutorange",
        "type": "Identifier"
      },
      {
        "value": "'axes are still autorange:false'",
        "type": "String"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/aae0c60c6c720ef7de33333dfb7884087dae2edc/test/jasmine/tests/transition_test.js",
    "commit": "aae0c60c6c720ef7de33333dfb7884087dae2edc",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/transition_test.js",
    "start_line": 853,
    "end_line": 922,
    "test_code": "it('@flaky should not transition layout when axis auto-ranged value do not changed', function (done) {\n    var data = [{ y: [1, 2, 1] }];\n    var layout = { transition: { duration: 10 } };\n\n    function assertAxAutorange(msg, exp) {\n        expect(gd.layout.yaxis.autorange).toBe(exp, msg);\n        expect(gd._fullLayout.yaxis.autorange).toBe(exp, msg);\n    }\n\n    Plotly.react(gd, data, layout)\n        .then(function () {\n            methods.push([gd._fullLayout._basePlotModules[0], 'plot']);\n            methods.push([gd._fullLayout._basePlotModules[0], 'transitionAxes']);\n            addSpies();\n            assertAxAutorange('y-axis is autorange:true by default', true);\n        })\n        .then(function () {\n            // N.B. different coordinate, but same auto-range value\n            data[0].y = [2, 1, 2];\n            return Plotly.react(gd, data, layout);\n        })\n        .then(function () {\n            assertSpies('do not transition autoranged axes, just the traces', [\n                [Plots, 'transitionFromReact', 1],\n                [gd._fullLayout._basePlotModules[0], 'transitionAxes', 0],\n                [gd._fullLayout._basePlotModules[0], 'plot', 1]\n            ]);\n            assertAxAutorange('y-axis is still autorange:true', true);\n        })\n        .then(function () {\n            // N.B. different coordinates with different auto-range value\n            data[0].y = [20, 10, 20];\n            return Plotly.react(gd, data, layout);\n        })\n        .then(function () {\n            assertSpies('both trace and layout transitions', [\n                // xaxis call to _storeDirectGUIEdit from doAutoRange\n                [Registry, 'call', ['_storeDirectGUIEdit', gd.layout, gd._fullLayout._preGUI, {\n                    'xaxis.range': [-0.12852664576802508, 2.128526645768025],\n                    'xaxis.autorange': true\n                }]],\n                // yaxis call to _storeDirectGUIEdit from doAutoRange\n                [Registry, 'call', ['_storeDirectGUIEdit', gd.layout, gd._fullLayout._preGUI, {\n                    'yaxis.range': [9.26751592356688, 20.73248407643312],\n                    'yaxis.autorange': true\n                }]],\n\n                [Plots, 'transitionFromReact', 1],\n                [gd._fullLayout._basePlotModules[0], 'transitionAxes', 1],\n\n                // one instantaneous transition options to halt other trace transitions (if any)\n                [gd._fullLayout._basePlotModules[0], 'plot', [gd, null, { duration: 0, easing: 'cubic-in-out', ordering: 'layout first' }, 'function']],\n\n                // one _module.plot call from the relayout at end of axis transition\n                [Registry, 'call', ['relayout', gd, {\n                    'yaxis.range': [9.26751592356688, 20.73248407643312]\n                }]],\n                // xaxis call #2 to _storeDirectGUIEdit from doAutoRange,\n                // as this axis is still autorange:true\n                [Registry, 'call', ['_storeDirectGUIEdit', gd.layout, gd._fullLayout._preGUI, {\n                    'xaxis.range': [-0.12852664576802508, 2.128526645768025],\n                    'xaxis.autorange': true\n                }]],\n                [gd._fullLayout._basePlotModules[0], 'plot', [gd]]\n            ]);\n            assertAxAutorange('y-axis is now autorange:false', false);\n        })\n        .catch(failTest)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should not transition layout when axis auto-ranged value do not changed'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "transition",
        "type": "Identifier"
      },
      {
        "value": "duration",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertAxAutorange",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "exp",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "autorange",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "exp",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "autorange",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "exp",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "methods",
        "type": "Identifier"
      },
      {
        "value": "push",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "methods",
        "type": "Identifier"
      },
      {
        "value": "push",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'transitionAxes'",
        "type": "String"
      },
      {
        "value": "addSpies",
        "type": "Identifier"
      },
      {
        "value": "assertAxAutorange",
        "type": "Identifier"
      },
      {
        "value": "'y-axis is autorange:true by default'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSpies",
        "type": "Identifier"
      },
      {
        "value": "'do not transition autoranged axes, just the traces'",
        "type": "String"
      },
      {
        "value": "Plots",
        "type": "Identifier"
      },
      {
        "value": "'transitionFromReact'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'transitionAxes'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "assertAxAutorange",
        "type": "Identifier"
      },
      {
        "value": "'y-axis is still autorange:true'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSpies",
        "type": "Identifier"
      },
      {
        "value": "'both trace and layout transitions'",
        "type": "String"
      },
      {
        "value": "Registry",
        "type": "Identifier"
      },
      {
        "value": "'call'",
        "type": "String"
      },
      {
        "value": "'_storeDirectGUIEdit'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_preGUI",
        "type": "Identifier"
      },
      {
        "value": "'xaxis.range'",
        "type": "String"
      },
      {
        "value": "0.12852664576802508",
        "type": "Numeric"
      },
      {
        "value": "2.128526645768025",
        "type": "Numeric"
      },
      {
        "value": "'xaxis.autorange'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "Registry",
        "type": "Identifier"
      },
      {
        "value": "'call'",
        "type": "String"
      },
      {
        "value": "'_storeDirectGUIEdit'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_preGUI",
        "type": "Identifier"
      },
      {
        "value": "'yaxis.range'",
        "type": "String"
      },
      {
        "value": "9.26751592356688",
        "type": "Numeric"
      },
      {
        "value": "20.73248407643312",
        "type": "Numeric"
      },
      {
        "value": "'yaxis.autorange'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "Plots",
        "type": "Identifier"
      },
      {
        "value": "'transitionFromReact'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'transitionAxes'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "duration",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "easing",
        "type": "Identifier"
      },
      {
        "value": "'cubic-in-out'",
        "type": "String"
      },
      {
        "value": "ordering",
        "type": "Identifier"
      },
      {
        "value": "'layout first'",
        "type": "String"
      },
      {
        "value": "'function'",
        "type": "String"
      },
      {
        "value": "Registry",
        "type": "Identifier"
      },
      {
        "value": "'call'",
        "type": "String"
      },
      {
        "value": "'relayout'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'yaxis.range'",
        "type": "String"
      },
      {
        "value": "9.26751592356688",
        "type": "Numeric"
      },
      {
        "value": "20.73248407643312",
        "type": "Numeric"
      },
      {
        "value": "Registry",
        "type": "Identifier"
      },
      {
        "value": "'call'",
        "type": "String"
      },
      {
        "value": "'_storeDirectGUIEdit'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_preGUI",
        "type": "Identifier"
      },
      {
        "value": "'xaxis.range'",
        "type": "String"
      },
      {
        "value": "0.12852664576802508",
        "type": "Numeric"
      },
      {
        "value": "2.128526645768025",
        "type": "Numeric"
      },
      {
        "value": "'xaxis.autorange'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_basePlotModules",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'plot'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "assertAxAutorange",
        "type": "Identifier"
      },
      {
        "value": "'y-axis is now autorange:false'",
        "type": "String"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/cb5be64e4ab290ce92272783676e152722c95f56/test/jasmine/tests/colorbar_test.js",
    "commit": "cb5be64e4ab290ce92272783676e152722c95f56",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/colorbar_test.js",
    "start_line": 400,
    "end_line": 418,
    "test_code": "it('@flaky can drag root-level colorbars in editable mode', function (done) {\n    Plotly.newPlot(gd,\n        [{ z: [[1, 2], [3, 4]], type: 'heatmap' }],\n        { width: 400, height: 400 },\n        { editable: true }\n    )\n        .then(function () {\n            expect(gd.data[0].colorbar).toBeUndefined();\n            expect(gd._fullData[0].colorbar.x).toBe(1.02);\n            expect(gd._fullData[0].colorbar.y).toBe(0.5);\n            return drag({ node: getCBNode(), dpos: [-100, 100] });\n        })\n        .then(function () {\n            expect(gd.data[0].colorbar.x).toBeWithin(0.591, 0.01);\n            expect(gd.data[0].colorbar.y).toBeWithin(0.045, 0.01);\n        })\n        .catch(failTest)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky can drag root-level colorbars in editable mode'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "newPlot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "z",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'heatmap'",
        "type": "String"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "editable",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "toBeUndefined",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "1.02",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "getCBNode",
        "type": "Identifier"
      },
      {
        "value": "dpos",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBeWithin",
        "type": "Identifier"
      },
      {
        "value": "0.591",
        "type": "Numeric"
      },
      {
        "value": "0.01",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBeWithin",
        "type": "Identifier"
      },
      {
        "value": "0.045",
        "type": "Numeric"
      },
      {
        "value": "0.01",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/cb5be64e4ab290ce92272783676e152722c95f56/test/jasmine/tests/colorbar_test.js",
    "commit": "cb5be64e4ab290ce92272783676e152722c95f56",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/colorbar_test.js",
    "start_line": 420,
    "end_line": 438,
    "test_code": "it('@flaky can drag marker-level colorbars in editable mode', function (done) {\n    Plotly.newPlot(gd,\n        [{ y: [1, 2, 1], marker: { color: [0, 1, 2], showscale: true } }],\n        { width: 400, height: 400 },\n        { editable: true }\n    )\n        .then(function () {\n            expect(gd.data[0].marker.colorbar).toBeUndefined();\n            expect(gd._fullData[0].marker.colorbar.x).toBe(1.02);\n            expect(gd._fullData[0].marker.colorbar.y).toBe(0.5);\n            return drag({ node: getCBNode(), dpos: [-100, 100] });\n        })\n        .then(function () {\n            expect(gd.data[0].marker.colorbar.x).toBeWithin(0.591, 0.01);\n            expect(gd.data[0].marker.colorbar.y).toBeWithin(0.045, 0.01);\n        })\n        .catch(failTest)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky can drag marker-level colorbars in editable mode'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "newPlot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "showscale",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "editable",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "toBeUndefined",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "1.02",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "getCBNode",
        "type": "Identifier"
      },
      {
        "value": "dpos",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBeWithin",
        "type": "Identifier"
      },
      {
        "value": "0.591",
        "type": "Numeric"
      },
      {
        "value": "0.01",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBeWithin",
        "type": "Identifier"
      },
      {
        "value": "0.045",
        "type": "Numeric"
      },
      {
        "value": "0.01",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/cb5be64e4ab290ce92272783676e152722c95f56/test/jasmine/tests/colorbar_test.js",
    "commit": "cb5be64e4ab290ce92272783676e152722c95f56",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/colorbar_test.js",
    "start_line": 440,
    "end_line": 460,
    "test_code": "it('@flaky can drag colorbars linked to color axes in editable mode', function (done) {\n    Plotly.newPlot(gd,\n        [{ z: [[1, 2], [3, 4]], type: 'heatmap', coloraxis: 'coloraxis' }],\n        { coloraxis: {}, width: 400, height: 400 },\n        { editable: true }\n    )\n        .then(function () {\n            expect(gd.layout.coloraxis.colorbar).toBeUndefined();\n            expect(gd._fullLayout.coloraxis.colorbar.x).toBe(1.02);\n            expect(gd._fullLayout.coloraxis.colorbar.y).toBe(0.5);\n            return drag({ node: getCBNode(), dpos: [-100, 100] });\n        })\n        .then(function () {\n            expect(gd.layout.coloraxis.colorbar.x).toBeWithin(0.591, 0.01);\n            expect(gd.layout.coloraxis.colorbar.y).toBeWithin(0.045, 0.01);\n            expect(gd._fullLayout.coloraxis.colorbar.x).toBeWithin(0.591, 0.01);\n            expect(gd._fullLayout.coloraxis.colorbar.y).toBeWithin(0.045, 0.01);\n        })\n        .catch(failTest)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky can drag colorbars linked to color axes in editable mode'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "newPlot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "z",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'heatmap'",
        "type": "String"
      },
      {
        "value": "coloraxis",
        "type": "Identifier"
      },
      {
        "value": "'coloraxis'",
        "type": "String"
      },
      {
        "value": "coloraxis",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "editable",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "coloraxis",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "toBeUndefined",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "coloraxis",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "1.02",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "coloraxis",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "getCBNode",
        "type": "Identifier"
      },
      {
        "value": "dpos",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "coloraxis",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBeWithin",
        "type": "Identifier"
      },
      {
        "value": "0.591",
        "type": "Numeric"
      },
      {
        "value": "0.01",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "coloraxis",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBeWithin",
        "type": "Identifier"
      },
      {
        "value": "0.045",
        "type": "Numeric"
      },
      {
        "value": "0.01",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "coloraxis",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBeWithin",
        "type": "Identifier"
      },
      {
        "value": "0.591",
        "type": "Numeric"
      },
      {
        "value": "0.01",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "coloraxis",
        "type": "Identifier"
      },
      {
        "value": "colorbar",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBeWithin",
        "type": "Identifier"
      },
      {
        "value": "0.045",
        "type": "Numeric"
      },
      {
        "value": "0.01",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/11bc6259b47eb41e9c869d25f5d36defce02bddb/test/jasmine/tests/titles_test.js",
    "commit": "11bc6259b47eb41e9c869d25f5d36defce02bddb",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/titles_test.js",
    "start_line": 1144,
    "end_line": 1167,
    "test_code": "it('@flaky has no hover effects for titles that used to be blank', function (done) {\n    Plotly.plot(gd, data, {\n        xaxis: { title: { text: '' } },\n        yaxis: { title: { text: '' } },\n        title: { text: '' }\n    }, { editable: true })\n        .then(function () {\n            return editTitle('x', 'xaxis.title.text', 'XXX');\n        })\n        .then(function () {\n            return editTitle('y', 'yaxis.title.text', 'YYY');\n        })\n        .then(function () {\n            return editTitle('g', 'title.text', 'TTT');\n        })\n        .then(function () {\n            return Promise.all([\n                checkTitle('x', 'XXX', 1, 1),\n                checkTitle('y', 'YYY', 1, 1),\n                checkTitle('g', 'TTT', 1, 1)\n            ]);\n        })\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky has no hover effects for titles that used to be blank'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "title",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "''",
        "type": "String"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "title",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "''",
        "type": "String"
      },
      {
        "value": "title",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "''",
        "type": "String"
      },
      {
        "value": "editable",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "editTitle",
        "type": "Identifier"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "'xaxis.title.text'",
        "type": "String"
      },
      {
        "value": "'XXX'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "editTitle",
        "type": "Identifier"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "'yaxis.title.text'",
        "type": "String"
      },
      {
        "value": "'YYY'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "editTitle",
        "type": "Identifier"
      },
      {
        "value": "'g'",
        "type": "String"
      },
      {
        "value": "'title.text'",
        "type": "String"
      },
      {
        "value": "'TTT'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Promise",
        "type": "Identifier"
      },
      {
        "value": "all",
        "type": "Identifier"
      },
      {
        "value": "checkTitle",
        "type": "Identifier"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "'XXX'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "checkTitle",
        "type": "Identifier"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "'YYY'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "checkTitle",
        "type": "Identifier"
      },
      {
        "value": "'g'",
        "type": "String"
      },
      {
        "value": "'TTT'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/70bfd5074516ae1279968e060a36d4c08b75d931/test/jasmine/tests/transition_test.js",
    "commit": "70bfd5074516ae1279968e060a36d4c08b75d931",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/transition_test.js",
    "start_line": 1192,
    "end_line": 1234,
    "test_code": "it('@flaky should update ranges of date and category axes', function (done) {\n    Plotly.plot(gd, [\n        { x: ['2018-01-01', '2019-01-01', '2020-01-01'], y: [1, 2, 3] },\n        { x: ['a', 'b', 'c'], y: [1, 2, 3], xaxis: 'x2', yaxis: 'y2' }\n    ], {\n        grid: { rows: 1, columns: 2, pattern: 'independent' },\n        xaxis: { range: ['2018-01-01', '2020-01-01'] },\n        yaxis: { range: [0, 4] },\n        xaxis2: { range: [0, 2] },\n        yaxis2: { range: [0, 4] },\n        transition: { duration: 30 }\n    })\n        .then(function () {\n            expect(gd._fullLayout.xaxis.range).toEqual(['2018-01-01', '2020-01-01']);\n            expect(gd._fullLayout.xaxis2.range).toEqual([0, 2]);\n\n            gd.layout.xaxis.range = ['2018-06-01', '2019-06-01'];\n            gd.layout.xaxis2.range = [0.5, 1.5];\n            var promise = Plotly.react(gd, gd.data, gd.layout);\n\n            setTimeout(function () {\n                var fullLayout = gd._fullLayout;\n\n                var xa = fullLayout.xaxis;\n                var xr = xa.range.slice();\n                expect(xa.r2l(xr[0])).toBeGreaterThan(xa.r2l('2018-01-01'));\n                expect(xa.r2l(xr[1])).toBeLessThan(xa.r2l('2020-01-01'));\n\n                var xa2 = fullLayout.xaxis2;\n                var xr2 = xa2.range.slice();\n                expect(xr2[0]).toBeGreaterThan(0);\n                expect(xr2[1]).toBeLessThan(2);\n            }, 15);\n\n            return promise;\n        })\n        .then(function () {\n            expect(gd._fullLayout.xaxis.range).toEqual(['2018-06-01', '2019-06-01']);\n            expect(gd._fullLayout.xaxis2.range).toEqual([0.5, 1.5]);\n        })\n        .catch(failTest)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should update ranges of date and category axes'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "'2018-01-01'",
        "type": "String"
      },
      {
        "value": "'2019-01-01'",
        "type": "String"
      },
      {
        "value": "'2020-01-01'",
        "type": "String"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "'a'",
        "type": "String"
      },
      {
        "value": "'b'",
        "type": "String"
      },
      {
        "value": "'c'",
        "type": "String"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "'x2'",
        "type": "String"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "'y2'",
        "type": "String"
      },
      {
        "value": "grid",
        "type": "Identifier"
      },
      {
        "value": "rows",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "columns",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "pattern",
        "type": "Identifier"
      },
      {
        "value": "'independent'",
        "type": "String"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "'2018-01-01'",
        "type": "String"
      },
      {
        "value": "'2020-01-01'",
        "type": "String"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "xaxis2",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "yaxis2",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "transition",
        "type": "Identifier"
      },
      {
        "value": "duration",
        "type": "Identifier"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "'2018-01-01'",
        "type": "String"
      },
      {
        "value": "'2020-01-01'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "xaxis2",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "'2018-06-01'",
        "type": "String"
      },
      {
        "value": "'2019-06-01'",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis2",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "1.5",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "promise",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "react",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fullLayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "xa",
        "type": "Identifier"
      },
      {
        "value": "fullLayout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "xr",
        "type": "Identifier"
      },
      {
        "value": "xa",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "xa",
        "type": "Identifier"
      },
      {
        "value": "r2l",
        "type": "Identifier"
      },
      {
        "value": "xr",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "toBeGreaterThan",
        "type": "Identifier"
      },
      {
        "value": "xa",
        "type": "Identifier"
      },
      {
        "value": "r2l",
        "type": "Identifier"
      },
      {
        "value": "'2018-01-01'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "xa",
        "type": "Identifier"
      },
      {
        "value": "r2l",
        "type": "Identifier"
      },
      {
        "value": "xr",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "toBeLessThan",
        "type": "Identifier"
      },
      {
        "value": "xa",
        "type": "Identifier"
      },
      {
        "value": "r2l",
        "type": "Identifier"
      },
      {
        "value": "'2020-01-01'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "xa2",
        "type": "Identifier"
      },
      {
        "value": "fullLayout",
        "type": "Identifier"
      },
      {
        "value": "xaxis2",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "xr2",
        "type": "Identifier"
      },
      {
        "value": "xa2",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "xr2",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "toBeGreaterThan",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "xr2",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "toBeLessThan",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "15",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "promise",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "'2018-06-01'",
        "type": "String"
      },
      {
        "value": "'2019-06-01'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "xaxis2",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "1.5",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/thaliproject/postcardapp/blob/3b68efdddbc18db18366ab43f16d5ce2d0b84b01/test/helpers/webview.js",
    "commit": "3b68efdddbc18db18366ab43f16d5ce2d0b84b01",
    "project_name": "postcardapp",
    "project_author": "thaliproject",
    "flaky_file": "/test/helpers/webview.js",
    "start_line": 47,
    "end_line": 53,
    "test_code": "shouldLoadPostcardWithMessage: function(driver, message) {\n  return driver\n    .waitForElementByCss(\"#textbox\", asserters.isDisplayed, defaults.wait.short)\n    //.waitForConditionInBrowser('document.querySelector(\"#textbox\").value.length > 0', defaults.wait.long)\n    .eval('document.querySelector(\"#textbox\").value')\n    .should.eventually.contain(message);\n},\n",
    "tokens": [],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/thaliproject/postcardapp/blob/3b68efdddbc18db18366ab43f16d5ce2d0b84b01/test/helpers/webview.js",
    "commit": "3b68efdddbc18db18366ab43f16d5ce2d0b84b01",
    "project_name": "postcardapp",
    "project_author": "thaliproject",
    "flaky_file": "/test/helpers/webview.js",
    "start_line": 62,
    "end_line": 69,
    "test_code": "shouldCountMyPostcardsWithNumber: function(driver, total) {\n  return driver\n    .waitForElementByCss('#editButton', asserters.isDisplayed, defaults.wait.short)\n    .click()\n    .waitForElementByCss('#myPostcards', asserters.isDisplayed, defaults.wait.short)\n    .eval('document.querySelectorAll(\"#myPostcards .row:not([hidden])\").length')\n    .should.eventually.equal(total);\n},\n",
    "tokens": [],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/thaliproject/postcardapp/blob/3b68efdddbc18db18366ab43f16d5ce2d0b84b01/test/postcardapp.js",
    "commit": "3b68efdddbc18db18366ab43f16d5ce2d0b84b01",
    "project_name": "postcardapp",
    "project_author": "thaliproject",
    "flaky_file": "/test/postcardapp.js",
    "start_line": 38,
    "end_line": 55,
    "test_code": "function switchContextToWebview(driver) {\n  return driver\n    .setImplicitWaitTimeout(defaults.wait.long)\n    .sleep(defaults.wait.splashscreen)\n    .contexts()\n    .then(function (contexts) {\n      if (contexts.length < 2) {\n        console.error(\"Could not find webview in contexts:\", contexts);\n        throw new Error(\"Stopping tests as webview context was not found.\");\n        return driver.quit();\n      }\n      var webviewContext = _.find(contexts, function (context) {\n        return context.indexOf('WEBVIEW') !== -1;\n      });\n      console.log('webview context:', webviewContext);\n      return driver.context(webviewContext).setAsyncScriptTimeout(defaults.timeout.app);\n    });\n}\n",
    "tokens": [
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "switchContextToWebview",
        "type": "Identifier"
      },
      {
        "value": "driver",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "driver",
        "type": "Identifier"
      },
      {
        "value": "setImplicitWaitTimeout",
        "type": "Identifier"
      },
      {
        "value": "defaults",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "long",
        "type": "Identifier"
      },
      {
        "value": "sleep",
        "type": "Identifier"
      },
      {
        "value": "defaults",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "splashscreen",
        "type": "Identifier"
      },
      {
        "value": "contexts",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "contexts",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "contexts",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "console",
        "type": "Identifier"
      },
      {
        "value": "error",
        "type": "Identifier"
      },
      {
        "value": "\"Could not find webview in contexts:\"",
        "type": "String"
      },
      {
        "value": "contexts",
        "type": "Identifier"
      },
      {
        "value": "throw",
        "type": "Keyword"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Error",
        "type": "Identifier"
      },
      {
        "value": "\"Stopping tests as webview context was not found.\"",
        "type": "String"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "driver",
        "type": "Identifier"
      },
      {
        "value": "quit",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "webviewContext",
        "type": "Identifier"
      },
      {
        "value": "_",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "contexts",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "indexOf",
        "type": "Identifier"
      },
      {
        "value": "'WEBVIEW'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "console",
        "type": "Identifier"
      },
      {
        "value": "log",
        "type": "Identifier"
      },
      {
        "value": "'webview context:'",
        "type": "String"
      },
      {
        "value": "webviewContext",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "driver",
        "type": "Identifier"
      },
      {
        "value": "context",
        "type": "Identifier"
      },
      {
        "value": "webviewContext",
        "type": "Identifier"
      },
      {
        "value": "setAsyncScriptTimeout",
        "type": "Identifier"
      },
      {
        "value": "defaults",
        "type": "Identifier"
      },
      {
        "value": "timeout",
        "type": "Identifier"
      },
      {
        "value": "app",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/thaliproject/postcardapp/blob/3b68efdddbc18db18366ab43f16d5ce2d0b84b01/test/postcardapp.js",
    "commit": "3b68efdddbc18db18366ab43f16d5ce2d0b84b01",
    "project_name": "postcardapp",
    "project_author": "thaliproject",
    "flaky_file": "/test/postcardapp.js",
    "start_line": 213,
    "end_line": 221,
    "test_code": "it(\"should delete a postcard\", function () {\n  return driver\n    .waitForElementByCss('#editButton', asserters.isDisplayed, defaults.wait.short)\n    .click()\n    .eval('document.querySelector(\\'#myPostcards .row paper-fab[icon=\"delete\"]\\').click()')\n    .sleep(defaults.wait.long)\n    .waitForElementByCss('#myPostcards', asserters.isDisplayed, defaults.wait.short)\n    .text().should.eventually.not.contain(defaults.message2);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"should delete a postcard\"",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "driver",
        "type": "Identifier"
      },
      {
        "value": "waitForElementByCss",
        "type": "Identifier"
      },
      {
        "value": "'#editButton'",
        "type": "String"
      },
      {
        "value": "asserters",
        "type": "Identifier"
      },
      {
        "value": "isDisplayed",
        "type": "Identifier"
      },
      {
        "value": "defaults",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "short",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "eval",
        "type": "Identifier"
      },
      {
        "value": "'document.querySelector(\\'#myPostcards .row paper-fab[icon=\"delete\"]\\').click()'",
        "type": "String"
      },
      {
        "value": "sleep",
        "type": "Identifier"
      },
      {
        "value": "defaults",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "long",
        "type": "Identifier"
      },
      {
        "value": "waitForElementByCss",
        "type": "Identifier"
      },
      {
        "value": "'#myPostcards'",
        "type": "String"
      },
      {
        "value": "asserters",
        "type": "Identifier"
      },
      {
        "value": "isDisplayed",
        "type": "Identifier"
      },
      {
        "value": "defaults",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "short",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "eventually",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "contain",
        "type": "Identifier"
      },
      {
        "value": "defaults",
        "type": "Identifier"
      },
      {
        "value": "message2",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/thaliproject/postcardapp/blob/3b68efdddbc18db18366ab43f16d5ce2d0b84b01/test/postcardapp.js",
    "commit": "3b68efdddbc18db18366ab43f16d5ce2d0b84b01",
    "project_name": "postcardapp",
    "project_author": "thaliproject",
    "flaky_file": "/test/postcardapp.js",
    "start_line": 223,
    "end_line": 228,
    "test_code": "it(\"should be one postcard remaining after delete\", function () {\n  return driver\n    .waitForElementByCss('#myPostcards', asserters.isDisplayed, defaults.wait.short)\n    .eval('document.querySelectorAll(\"#myPostcards .row:not([hidden])\").length')\n    .should.eventually.equal(1);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"should be one postcard remaining after delete\"",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "driver",
        "type": "Identifier"
      },
      {
        "value": "waitForElementByCss",
        "type": "Identifier"
      },
      {
        "value": "'#myPostcards'",
        "type": "String"
      },
      {
        "value": "asserters",
        "type": "Identifier"
      },
      {
        "value": "isDisplayed",
        "type": "Identifier"
      },
      {
        "value": "defaults",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "short",
        "type": "Identifier"
      },
      {
        "value": "eval",
        "type": "Identifier"
      },
      {
        "value": "'document.querySelectorAll(\"#myPostcards .row:not([hidden])\").length'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "eventually",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/angular/components/blob/279ce73640f757d6aad7df8baaa38aaab2aa1661/src/lib/select/select.spec.ts",
    "commit": "279ce73640f757d6aad7df8baaa38aaab2aa1661",
    "project_name": "components",
    "project_author": "angular",
    "flaky_file": "/src/lib/select/select.spec.ts",
    "start_line": 3313,
    "end_line": 3336,
    "test_code": "it('should keep the position within the viewport on repeat openings', fakeAsync(() => {\n    formField.style.left = '-100px';\n    trigger.click();\n    fixture.detectChanges();\n    flush();\n\n    let panelLeft = document.querySelector('.mat-select-panel')!.getBoundingClientRect().left;\n\n    expect(panelLeft)\n        .toBeGreaterThanOrEqual(0, `Expected select panel to be inside the viewport.`);\n\n    fixture.componentInstance.select.close();\n    fixture.detectChanges();\n    flush();\n\n    trigger.click();\n    fixture.detectChanges();\n    flush();\n\n    panelLeft = document.querySelector('.mat-select-panel')!.getBoundingClientRect().left;\n\n    expect(panelLeft).toBeGreaterThanOrEqual(0,\n        `Expected select panel continue being inside the viewport.`);\n}));\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should keep the position within the viewport on repeat openings'",
        "type": "String"
      },
      {
        "value": "fakeAsync",
        "type": "Identifier"
      },
      {
        "value": "formField",
        "type": "Identifier"
      },
      {
        "value": "style",
        "type": "Identifier"
      },
      {
        "value": "left",
        "type": "Identifier"
      },
      {
        "value": "'-100px'",
        "type": "String"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "flush",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "panelLeft",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.mat-select-panel'",
        "type": "String"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "left",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "panelLeft",
        "type": "Identifier"
      },
      {
        "value": "toBeGreaterThanOrEqual",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "`Expected select panel to be inside the viewport.`",
        "type": "Template"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "componentInstance",
        "type": "Identifier"
      },
      {
        "value": "select",
        "type": "Identifier"
      },
      {
        "value": "close",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "flush",
        "type": "Identifier"
      },
      {
        "value": "trigger",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "fixture",
        "type": "Identifier"
      },
      {
        "value": "detectChanges",
        "type": "Identifier"
      },
      {
        "value": "flush",
        "type": "Identifier"
      },
      {
        "value": "panelLeft",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.mat-select-panel'",
        "type": "String"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "left",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "panelLeft",
        "type": "Identifier"
      },
      {
        "value": "toBeGreaterThanOrEqual",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "`Expected select panel continue being inside the viewport.`",
        "type": "Template"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/skbkontur/retail-ui/blob/a006fdf0e0e65d5fde07134c6909870666e7947f/packages/react-ui-screenshot-tests/gemini/dropdownContainer.js",
    "commit": "a006fdf0e0e65d5fde07134c6909870666e7947f",
    "project_name": "retail-ui",
    "project_author": "skbkontur",
    "flaky_file": "/packages/react-ui-screenshot-tests/gemini/dropdownContainer.js",
    "start_line": 7,
    "end_line": 47,
    "test_code": "var initTest = (suite, showLongItems) =>\n  suite\n    .before(renderStory('DropdownContainer', 'various aligns, portals, items and scrolls'))\n    .setCaptureElements(TEST_CONTAINER)\n    .ignoreElements(BUTTONS)\n    .before((actions, find) => {\n      if (showLongItems) {\n        actions.click(find(BUTTONS + ' button'));\n      }\n    });\n\nvar innerScrollTest = suite =>\n  suite.capture('shot', actions => {\n    actions.executeJS(function (window) {\n      var innerScroll = window.document.querySelector('#inner-scroll');\n      innerScroll.scrollTop = innerScroll.scrollHeight;\n      innerScroll.scrollLeft = innerScroll.scrollWidth;\n    });\n  });\n\ngemini.suite('DropdownContainer', () => {\n  gemini.suite('short Items', () => {\n    gemini.suite('items', suite => {\n      initTest(suite).capture('shot');\n    });\n\n    gemini.suite('inner scroll', suite => {\n      innerScrollTest(initTest(suite));\n    });\n  });\n\n  gemini.suite('long Items', () => {\n    gemini.suite('items', suite => {\n      initTest(suite, true).capture('shot');\n    });\n\n    gemini.suite('inner scroll', suite => {\n      innerScrollTest(initTest(suite, true));\n    });\n  });\n});\n",
    "tokens": [
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "initTest",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "showLongItems",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "before",
        "type": "Identifier"
      },
      {
        "value": "renderStory",
        "type": "Identifier"
      },
      {
        "value": "'DropdownContainer'",
        "type": "String"
      },
      {
        "value": "'various aligns, portals, items and scrolls'",
        "type": "String"
      },
      {
        "value": "setCaptureElements",
        "type": "Identifier"
      },
      {
        "value": "TEST_CONTAINER",
        "type": "Identifier"
      },
      {
        "value": "ignoreElements",
        "type": "Identifier"
      },
      {
        "value": "BUTTONS",
        "type": "Identifier"
      },
      {
        "value": "before",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "showLongItems",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "BUTTONS",
        "type": "Identifier"
      },
      {
        "value": "' button'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "innerScrollTest",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "capture",
        "type": "Identifier"
      },
      {
        "value": "'shot'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "executeJS",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "innerScroll",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'#inner-scroll'",
        "type": "String"
      },
      {
        "value": "innerScroll",
        "type": "Identifier"
      },
      {
        "value": "scrollTop",
        "type": "Identifier"
      },
      {
        "value": "innerScroll",
        "type": "Identifier"
      },
      {
        "value": "scrollHeight",
        "type": "Identifier"
      },
      {
        "value": "innerScroll",
        "type": "Identifier"
      },
      {
        "value": "scrollLeft",
        "type": "Identifier"
      },
      {
        "value": "innerScroll",
        "type": "Identifier"
      },
      {
        "value": "scrollWidth",
        "type": "Identifier"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'DropdownContainer'",
        "type": "String"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'short Items'",
        "type": "String"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'items'",
        "type": "String"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "initTest",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "capture",
        "type": "Identifier"
      },
      {
        "value": "'shot'",
        "type": "String"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'inner scroll'",
        "type": "String"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "innerScrollTest",
        "type": "Identifier"
      },
      {
        "value": "initTest",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'long Items'",
        "type": "String"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'items'",
        "type": "String"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "initTest",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "capture",
        "type": "Identifier"
      },
      {
        "value": "'shot'",
        "type": "String"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'inner scroll'",
        "type": "String"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "innerScrollTest",
        "type": "Identifier"
      },
      {
        "value": "initTest",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/JetBrains/ring-ui/blob/8a35b37d6885a03fad4ec88a4595c31c5731ad58/components/select/select.gemini.js",
    "commit": "8a35b37d6885a03fad4ec88a4595c31c5731ad58",
    "project_name": "ring-ui",
    "project_author": "JetBrains",
    "flaky_file": "/components/select/select.gemini.js",
    "start_line": 3,
    "end_line": 47,
    "test_code": "const TOLERANCE_OVERRIDE_BECAUSE_OF_EDGE = 3.5;\n\ngemini.suite('Select', () => {\n  gemini.suite('Input based select', child => {\n    child.\n      setUrl('/select/simple-input-based-select.html').\n      setCaptureElements('.ring-select', '[data-test=ring-popup]').\n      capture('selectPopup', (actions, find) => {\n        actions.click(find('.ring-input'));\n        actions.mouseMove(find('body'), { x: 800, y: 1024 });\n      });\n  });\n\n  gemini.suite('Select button', child => {\n    child.\n      setUrl('/select/select-with-a-customized-filter-and-an-add-item-button.html').\n      setCaptureElements('.ring-select').\n      capture('button', (actions, find) => {\n        actions.mouseMove(find('body'), { x: 800, y: 1024 });\n      });\n  });\n\n  gemini.suite('Select with filter', child => {\n    child.\n      setUrl('/select/simple-select-with-default-filter-mode-enabled.html').\n      setCaptureElements('.ring-select', '[data-test=ring-popup]').\n      capture('selectPopup', (actions, find) => {\n        actions.click(find('.ring-select'));\n        actions.mouseMove(find('body'), { x: 800, y: 1024 });\n      });\n  });\n\n  gemini.suite('Multi-value select with options descriptions', child => {\n    child.\n      setUrl('/select/multiple-select-with-a-description.html').\n      //We often have a waird render artefact here\n      setTolerance(TOLERANCE_OVERRIDE_BECAUSE_OF_EDGE).\n      setCaptureElements('[data-test=ring-popup]').\n      capture('selectPopup', (actions, find) => {\n        actions.click(find('.ring-button'));\n        actions.mouseMove(find('body'), { x: 800, y: 1024 });\n      });\n  });\n\n});\n",
    "tokens": [
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "TOLERANCE_OVERRIDE_BECAUSE_OF_EDGE",
        "type": "Identifier"
      },
      {
        "value": "3.5",
        "type": "Numeric"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'Select'",
        "type": "String"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'Input based select'",
        "type": "String"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "setUrl",
        "type": "Identifier"
      },
      {
        "value": "'/select/simple-input-based-select.html'",
        "type": "String"
      },
      {
        "value": "setCaptureElements",
        "type": "Identifier"
      },
      {
        "value": "'.ring-select'",
        "type": "String"
      },
      {
        "value": "'[data-test=ring-popup]'",
        "type": "String"
      },
      {
        "value": "capture",
        "type": "Identifier"
      },
      {
        "value": "'selectPopup'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'.ring-input'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "mouseMove",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1024",
        "type": "Numeric"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'Select button'",
        "type": "String"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "setUrl",
        "type": "Identifier"
      },
      {
        "value": "'/select/select-with-a-customized-filter-and-an-add-item-button.html'",
        "type": "String"
      },
      {
        "value": "setCaptureElements",
        "type": "Identifier"
      },
      {
        "value": "'.ring-select'",
        "type": "String"
      },
      {
        "value": "capture",
        "type": "Identifier"
      },
      {
        "value": "'button'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "mouseMove",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1024",
        "type": "Numeric"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'Select with filter'",
        "type": "String"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "setUrl",
        "type": "Identifier"
      },
      {
        "value": "'/select/simple-select-with-default-filter-mode-enabled.html'",
        "type": "String"
      },
      {
        "value": "setCaptureElements",
        "type": "Identifier"
      },
      {
        "value": "'.ring-select'",
        "type": "String"
      },
      {
        "value": "'[data-test=ring-popup]'",
        "type": "String"
      },
      {
        "value": "capture",
        "type": "Identifier"
      },
      {
        "value": "'selectPopup'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'.ring-select'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "mouseMove",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1024",
        "type": "Numeric"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'Multi-value select with options descriptions'",
        "type": "String"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "setUrl",
        "type": "Identifier"
      },
      {
        "value": "'/select/multiple-select-with-a-description.html'",
        "type": "String"
      },
      {
        "value": "setTolerance",
        "type": "Identifier"
      },
      {
        "value": "TOLERANCE_OVERRIDE_BECAUSE_OF_EDGE",
        "type": "Identifier"
      },
      {
        "value": "setCaptureElements",
        "type": "Identifier"
      },
      {
        "value": "'[data-test=ring-popup]'",
        "type": "String"
      },
      {
        "value": "capture",
        "type": "Identifier"
      },
      {
        "value": "'selectPopup'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'.ring-button'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "mouseMove",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1024",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/JetBrains/ring-ui/blob/5d9f96d6ffa3a3c99722047677d5a545c02bdd80/components/select/select.gemini.js",
    "commit": "5d9f96d6ffa3a3c99722047677d5a545c02bdd80",
    "project_name": "ring-ui",
    "project_author": "JetBrains",
    "flaky_file": "/components/select/select.gemini.js",
    "start_line": 3,
    "end_line": 44,
    "test_code": "gemini.suite('Select', () => {\n  gemini.suite('Input based select', child => {\n    child.\n      setUrl('/select/simple-input-based-select.html').\n      setCaptureElements('.ring-select', '[data-test=ring-popup]').\n      capture('selectPopup', (actions, find) => {\n        actions.click(find('.ring-input'));\n        actions.mouseMove(find('body'), { x: 800, y: 1024 });\n      });\n  });\n\n  gemini.suite('Select button', child => {\n    child.\n      setUrl('/select/select-with-a-customized-filter-and-an-add-item-button.html').\n      setCaptureElements('.ring-select').\n      capture('button', (actions, find) => {\n        actions.mouseMove(find('body'), { x: 800, y: 1024 });\n      });\n  });\n\n  gemini.suite('Select with filter', child => {\n    child.\n      setUrl('/select/simple-select-with-default-filter-mode-enabled.html').\n      setCaptureElements('.ring-select', '[data-test=ring-popup]').\n      capture('selectPopup', (actions, find) => {\n        actions.click(find('.ring-select'));\n        actions.mouseMove(find('body'), { x: 800, y: 1024 });\n      });\n  });\n\n  gemini.suite('Multi-value select with options descriptions', child => {\n    child.\n      setUrl('/select/multiple-select-with-a-description.html').\n      skip('ie', 'Disabled in IE because of weird rendering artefact').\n      setCaptureElements('[data-test=ring-popup]').\n      capture('selectPopup', (actions, find) => {\n        actions.click(find('.ring-button'));\n        actions.mouseMove(find('body'), { x: 800, y: 1024 });\n      });\n  });\n\n});\n",
    "tokens": [
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'Select'",
        "type": "String"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'Input based select'",
        "type": "String"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "setUrl",
        "type": "Identifier"
      },
      {
        "value": "'/select/simple-input-based-select.html'",
        "type": "String"
      },
      {
        "value": "setCaptureElements",
        "type": "Identifier"
      },
      {
        "value": "'.ring-select'",
        "type": "String"
      },
      {
        "value": "'[data-test=ring-popup]'",
        "type": "String"
      },
      {
        "value": "capture",
        "type": "Identifier"
      },
      {
        "value": "'selectPopup'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'.ring-input'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "mouseMove",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1024",
        "type": "Numeric"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'Select button'",
        "type": "String"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "setUrl",
        "type": "Identifier"
      },
      {
        "value": "'/select/select-with-a-customized-filter-and-an-add-item-button.html'",
        "type": "String"
      },
      {
        "value": "setCaptureElements",
        "type": "Identifier"
      },
      {
        "value": "'.ring-select'",
        "type": "String"
      },
      {
        "value": "capture",
        "type": "Identifier"
      },
      {
        "value": "'button'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "mouseMove",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1024",
        "type": "Numeric"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'Select with filter'",
        "type": "String"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "setUrl",
        "type": "Identifier"
      },
      {
        "value": "'/select/simple-select-with-default-filter-mode-enabled.html'",
        "type": "String"
      },
      {
        "value": "setCaptureElements",
        "type": "Identifier"
      },
      {
        "value": "'.ring-select'",
        "type": "String"
      },
      {
        "value": "'[data-test=ring-popup]'",
        "type": "String"
      },
      {
        "value": "capture",
        "type": "Identifier"
      },
      {
        "value": "'selectPopup'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'.ring-select'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "mouseMove",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1024",
        "type": "Numeric"
      },
      {
        "value": "gemini",
        "type": "Identifier"
      },
      {
        "value": "suite",
        "type": "Identifier"
      },
      {
        "value": "'Multi-value select with options descriptions'",
        "type": "String"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "child",
        "type": "Identifier"
      },
      {
        "value": "setUrl",
        "type": "Identifier"
      },
      {
        "value": "'/select/multiple-select-with-a-description.html'",
        "type": "String"
      },
      {
        "value": "skip",
        "type": "Identifier"
      },
      {
        "value": "'ie'",
        "type": "String"
      },
      {
        "value": "'Disabled in IE because of weird rendering artefact'",
        "type": "String"
      },
      {
        "value": "setCaptureElements",
        "type": "Identifier"
      },
      {
        "value": "'[data-test=ring-popup]'",
        "type": "String"
      },
      {
        "value": "capture",
        "type": "Identifier"
      },
      {
        "value": "'selectPopup'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'.ring-button'",
        "type": "String"
      },
      {
        "value": "actions",
        "type": "Identifier"
      },
      {
        "value": "mouseMove",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1024",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/twbs/bootstrap/blob/3b2418e6885d31d9cd1eab33b4cb952e876f8cf7/js/tests/unit/tooltip.js",
    "commit": "3b2418e6885d31d9cd1eab33b4cb952e876f8cf7",
    "project_name": "bootstrap",
    "project_author": "twbs",
    "flaky_file": "/js/tests/unit/tooltip.js",
    "start_line": 389,
    "end_line": 426,
    "test_code": "test('tooltips should be placed dynamically, with the dynamic placement option', function () {\n  $.support.transition = false\n  var ttContainer = $('<div id=\"dynamic-tt-test\"/>').css({\n    'height': 400,\n    'overflow': 'hidden',\n    'position': 'absolute',\n    'top': 0,\n    'left': 0,\n    'width': 600\n  })\n    .appendTo('body')\n\n  var topTooltip = $('<div style=\"display: inline-block; position: absolute; left: 0; top: 0;\" rel=\"tooltip\" title=\"Top tooltip\">Top Dynamic Tooltip</div>')\n    .appendTo('#dynamic-tt-test')\n    .tooltip({ placement: 'auto' })\n    .tooltip('show')\n\n  ok($('.tooltip').is('.bottom'), 'top positioned tooltip is dynamically positioned bottom')\n\n  topTooltip.tooltip('hide')\n\n  var rightTooltip = $('<div style=\"display: inline-block; position: absolute; right: 0;\" rel=\"tooltip\" title=\"Right tooltip\">Right Dynamic Tooltip</div>')\n    .appendTo('#dynamic-tt-test')\n    .tooltip({ placement: 'right auto' })\n    .tooltip('show')\n\n  ok($('.tooltip').is('.left'), 'right positioned tooltip is dynamically positioned left')\n  rightTooltip.tooltip('hide')\n\n  var leftTooltip = $('<div style=\"display: inline-block; position: absolute; left: 0;\" rel=\"tooltip\" title=\"Left tooltip\">Left Dynamic Tooltip</div>')\n    .appendTo('#dynamic-tt-test')\n    .tooltip({ placement: 'auto left' })\n    .tooltip('show')\n\n  ok($('.tooltip').is('.right'), 'left positioned tooltip is dynamically positioned right')\n  leftTooltip.tooltip('hide')\n\n  ttContainer.remove()\n",
    "tokens": [
      {
        "value": "test",
        "type": "Identifier"
      },
      {
        "value": "'tooltips should be placed dynamically, with the dynamic placement option'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "$",
        "type": "Identifier"
      },
      {
        "value": "support",
        "type": "Identifier"
      },
      {
        "value": "transition",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "ttContainer",
        "type": "Identifier"
      },
      {
        "value": "$",
        "type": "Identifier"
      },
      {
        "value": "'<div id=\\\"dynamic-tt-test\\\"/>'",
        "type": "String"
      },
      {
        "value": "css",
        "type": "Identifier"
      },
      {
        "value": "'height'",
        "type": "String"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "'overflow'",
        "type": "String"
      },
      {
        "value": "'hidden'",
        "type": "String"
      },
      {
        "value": "'position'",
        "type": "String"
      },
      {
        "value": "'absolute'",
        "type": "String"
      },
      {
        "value": "'top'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'left'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'width'",
        "type": "String"
      },
      {
        "value": "600",
        "type": "Numeric"
      },
      {
        "value": "appendTo",
        "type": "Identifier"
      },
      {
        "value": "'body'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "topTooltip",
        "type": "Identifier"
      },
      {
        "value": "$",
        "type": "Identifier"
      },
      {
        "value": "'<div style=\\\"display: inline-block; position: absolute; left: 0; top: 0;\\\" rel=\\\"tooltip\\\" title=\\\"Top tooltip\\\">Top Dynamic Tooltip</div>'",
        "type": "String"
      },
      {
        "value": "appendTo",
        "type": "Identifier"
      },
      {
        "value": "'#dynamic-tt-test'",
        "type": "String"
      },
      {
        "value": "tooltip",
        "type": "Identifier"
      },
      {
        "value": "placement",
        "type": "Identifier"
      },
      {
        "value": "'auto'",
        "type": "String"
      },
      {
        "value": "tooltip",
        "type": "Identifier"
      },
      {
        "value": "'show'",
        "type": "String"
      },
      {
        "value": "ok",
        "type": "Identifier"
      },
      {
        "value": "$",
        "type": "Identifier"
      },
      {
        "value": "'.tooltip'",
        "type": "String"
      },
      {
        "value": "is",
        "type": "Identifier"
      },
      {
        "value": "'.bottom'",
        "type": "String"
      },
      {
        "value": "'top positioned tooltip is dynamically positioned bottom'",
        "type": "String"
      },
      {
        "value": "topTooltip",
        "type": "Identifier"
      },
      {
        "value": "tooltip",
        "type": "Identifier"
      },
      {
        "value": "'hide'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "rightTooltip",
        "type": "Identifier"
      },
      {
        "value": "$",
        "type": "Identifier"
      },
      {
        "value": "'<div style=\\\"display: inline-block; position: absolute; right: 0;\\\" rel=\\\"tooltip\\\" title=\\\"Right tooltip\\\">Right Dynamic Tooltip</div>'",
        "type": "String"
      },
      {
        "value": "appendTo",
        "type": "Identifier"
      },
      {
        "value": "'#dynamic-tt-test'",
        "type": "String"
      },
      {
        "value": "tooltip",
        "type": "Identifier"
      },
      {
        "value": "placement",
        "type": "Identifier"
      },
      {
        "value": "'right auto'",
        "type": "String"
      },
      {
        "value": "tooltip",
        "type": "Identifier"
      },
      {
        "value": "'show'",
        "type": "String"
      },
      {
        "value": "ok",
        "type": "Identifier"
      },
      {
        "value": "$",
        "type": "Identifier"
      },
      {
        "value": "'.tooltip'",
        "type": "String"
      },
      {
        "value": "is",
        "type": "Identifier"
      },
      {
        "value": "'.left'",
        "type": "String"
      },
      {
        "value": "'right positioned tooltip is dynamically positioned left'",
        "type": "String"
      },
      {
        "value": "rightTooltip",
        "type": "Identifier"
      },
      {
        "value": "tooltip",
        "type": "Identifier"
      },
      {
        "value": "'hide'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "leftTooltip",
        "type": "Identifier"
      },
      {
        "value": "$",
        "type": "Identifier"
      },
      {
        "value": "'<div style=\\\"display: inline-block; position: absolute; left: 0;\\\" rel=\\\"tooltip\\\" title=\\\"Left tooltip\\\">Left Dynamic Tooltip</div>'",
        "type": "String"
      },
      {
        "value": "appendTo",
        "type": "Identifier"
      },
      {
        "value": "'#dynamic-tt-test'",
        "type": "String"
      },
      {
        "value": "tooltip",
        "type": "Identifier"
      },
      {
        "value": "placement",
        "type": "Identifier"
      },
      {
        "value": "'auto left'",
        "type": "String"
      },
      {
        "value": "tooltip",
        "type": "Identifier"
      },
      {
        "value": "'show'",
        "type": "String"
      },
      {
        "value": "ok",
        "type": "Identifier"
      },
      {
        "value": "$",
        "type": "Identifier"
      },
      {
        "value": "'.tooltip'",
        "type": "String"
      },
      {
        "value": "is",
        "type": "Identifier"
      },
      {
        "value": "'.right'",
        "type": "String"
      },
      {
        "value": "'left positioned tooltip is dynamically positioned right'",
        "type": "String"
      },
      {
        "value": "leftTooltip",
        "type": "Identifier"
      },
      {
        "value": "tooltip",
        "type": "Identifier"
      },
      {
        "value": "'hide'",
        "type": "String"
      },
      {
        "value": "ttContainer",
        "type": "Identifier"
      },
      {
        "value": "remove",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/pinterest/gestalt/blob/865e67fe30debbcb846c704b2bc3b1b57a2edde0/packages/gestalt/src/__integration__/virtualizationWithScrollContainer.integration.js",
    "commit": "865e67fe30debbcb846c704b2bc3b1b57a2edde0",
    "project_name": "gestalt",
    "project_author": "pinterest",
    "flaky_file": "/packages/gestalt/src/__integration__/virtualizationWithScrollContainer.integration.js",
    "start_line": 32,
    "end_line": 58,
    "test_code": "it('Calculates correct virtual bounds when masonry is offset with custom virtual bounds', async () => {\n  const VIRTUALIZED_TOP = 800;\n  await page.setViewport({\n    width: 800,\n    height: 800,\n  });\n  await page.goto(\n    `http://localhost:3001/Masonry?virtualize=1&scrollContainer=1&virtualBoundsTop=300&virtualBoundsBottom=300&offsetTop=${VIRTUALIZED_TOP}`\n  );\n\n  // should not render anything initially\n  const initialGridItems = await page.$$(selectors.gridItem);\n  assert.equal(initialGridItems.length, 0);\n\n  await page.evaluate(\n    (scrollToY, selector) => {\n      const container = document.querySelector(selector);\n      container.scrollTop = scrollToY;\n    },\n    VIRTUALIZED_TOP,\n    selectors.scrollContainer\n  );\n\n  await page.waitFor(100);\n  const afterGridItems = await page.$$(selectors.gridItem);\n  assert.ok(afterGridItems.length > 0);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'Calculates correct virtual bounds when masonry is offset with custom virtual bounds'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "VIRTUALIZED_TOP",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "setViewport",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "goto",
        "type": "Identifier"
      },
      {
        "value": "`http://localhost:3001/Masonry?virtualize=1&scrollContainer=1&virtualBoundsTop=300&virtualBoundsBottom=300&offsetTop=${",
        "type": "Template"
      },
      {
        "value": "VIRTUALIZED_TOP",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "initialGridItems",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$$",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "gridItem",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "initialGridItems",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "scrollToY",
        "type": "Identifier"
      },
      {
        "value": "selector",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "selector",
        "type": "Identifier"
      },
      {
        "value": "container",
        "type": "Identifier"
      },
      {
        "value": "scrollTop",
        "type": "Identifier"
      },
      {
        "value": "scrollToY",
        "type": "Identifier"
      },
      {
        "value": "VIRTUALIZED_TOP",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "scrollContainer",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "afterGridItems",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$$",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "gridItem",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "ok",
        "type": "Identifier"
      },
      {
        "value": "afterGridItems",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/pinterest/gestalt/blob/0463b6da50f43c8bc53738ca522d5c5ba619ef35/packages/gestalt/src/__integration__/optimizedRemount.integration.js",
    "commit": "0463b6da50f43c8bc53738ca522d5c5ba619ef35",
    "project_name": "gestalt",
    "project_author": "pinterest",
    "flaky_file": "/packages/gestalt/src/__integration__/optimizedRemount.integration.js",
    "start_line": 3,
    "end_line": 65,
    "test_code": "describe('Masonry > External cache', () => {\n  it.each([\n    ['Masonry', 'http://localhost:3001/Masonry?virtualize=1&externalCache=1'],\n    [\n      'MasonryInfinite',\n      'http://localhost:3001/MasonryInfinite?virtualize=1&externalCache=1',\n    ],\n  ])('should only mount visible items on remount - %s', async (name, url) => {\n    expect.assertions(3);\n\n    await page.setViewport({\n      width: 800,\n      height: 800,\n    });\n    await page.goto(url);\n\n    // Wait for Masonry multi-stage rendering.\n    await page.waitFor(1000);\n\n    const initialMountCount = await page.evaluate(\n      () => window.ITEM_MOUNT_COUNT\n    );\n\n    // scroll a few times\n    await page.evaluate(() =>\n      window.scrollTo(\n        0,\n        document.documentElement.scrollHeight -\n        document.documentElement.clientHeight\n      )\n    );\n    await page.evaluate(() =>\n      window.scrollTo(\n        0,\n        document.documentElement.scrollHeight -\n        document.documentElement.clientHeight\n      )\n    );\n\n    // Wait for Masonry multi-stage rendering.\n    await page.waitFor(1000);\n\n    // mount count should be increased\n    let updatedMountCount = await page.evaluate(() => window.ITEM_MOUNT_COUNT);\n    expect(updatedMountCount).toBeGreaterThan(initialMountCount);\n\n    // unmount/remount the grid\n    const toggleMountTrigger = await page.$(selectors.toggleMount);\n    await toggleMountTrigger.click();\n\n    // wait for grid to be unmounted\n    updatedMountCount = await page.evaluate(() => window.ITEM_MOUNT_COUNT);\n    expect(updatedMountCount).toBe(0);\n    await toggleMountTrigger.click();\n\n    // Wait for Masonry multi-stage rendering.\n    await page.waitFor(1000);\n\n    // wait for grid to be remounted\n    const updatedCount = await page.evaluate(() => window.ITEM_MOUNT_COUNT);\n    expect(updatedCount).toBeLessThanOrEqual(initialMountCount);\n  });\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'Masonry > External cache'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "each",
        "type": "Identifier"
      },
      {
        "value": "'Masonry'",
        "type": "String"
      },
      {
        "value": "'http://localhost:3001/Masonry?virtualize=1&externalCache=1'",
        "type": "String"
      },
      {
        "value": "'MasonryInfinite'",
        "type": "String"
      },
      {
        "value": "'http://localhost:3001/MasonryInfinite?virtualize=1&externalCache=1'",
        "type": "String"
      },
      {
        "value": "'should only mount visible items on remount - %s'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "url",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "assertions",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "setViewport",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "goto",
        "type": "Identifier"
      },
      {
        "value": "url",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "1000",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "initialMountCount",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "ITEM_MOUNT_COUNT",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "scrollTo",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "documentElement",
        "type": "Identifier"
      },
      {
        "value": "scrollHeight",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "documentElement",
        "type": "Identifier"
      },
      {
        "value": "clientHeight",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "scrollTo",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "documentElement",
        "type": "Identifier"
      },
      {
        "value": "scrollHeight",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "documentElement",
        "type": "Identifier"
      },
      {
        "value": "clientHeight",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "1000",
        "type": "Numeric"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "updatedMountCount",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "ITEM_MOUNT_COUNT",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "updatedMountCount",
        "type": "Identifier"
      },
      {
        "value": "toBeGreaterThan",
        "type": "Identifier"
      },
      {
        "value": "initialMountCount",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "toggleMountTrigger",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "toggleMount",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "toggleMountTrigger",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "updatedMountCount",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "ITEM_MOUNT_COUNT",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "updatedMountCount",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "toggleMountTrigger",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "1000",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "updatedCount",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "evaluate",
        "type": "Identifier"
      },
      {
        "value": "window",
        "type": "Identifier"
      },
      {
        "value": "ITEM_MOUNT_COUNT",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "updatedCount",
        "type": "Identifier"
      },
      {
        "value": "toBeLessThanOrEqual",
        "type": "Identifier"
      },
      {
        "value": "initialMountCount",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/uber/baseweb/blob/ed160d775eec8d15f14e025d53248bb1876d268f/src/datepicker/__tests__/timezone-picker.e2e.js",
    "commit": "ed160d775eec8d15f14e025d53248bb1876d268f",
    "project_name": "baseweb",
    "project_author": "uber",
    "flaky_file": "/src/datepicker/__tests__/timezone-picker.e2e.js",
    "start_line": 24,
    "end_line": 63,
    "test_code": "describe('TimezonePicker', () => {\n  it('passes basic a11y tests', async () => {\n    await mount(page, 'timezone-picker');\n    await page.waitFor(selectors.standard);\n    const accessibilityReport = await analyzeAccessibility(page);\n    expect(accessibilityReport).toHaveNoAccessibilityIssues();\n  });\n\n  it('provides appropriate zone options if standard time', async () => {\n    await mount(page, 'timezone-picker');\n    await page.waitFor(selectors.standard);\n    await page.click(`${selectors.standard} ${selectors.input}`);\n    await page.waitFor(selectors.dropdown);\n    await page.keyboard.type('new york');\n    await page.keyboard.press('ArrowDown');\n    await page.keyboard.press('Enter');\n    const value = await page.$eval(\n      `${selectors.standard} ${selectors.value}`,\n      select => select.textContent,\n    );\n\n    expect(labelToShortCode(value)).toBe('EST');\n  });\n\n  it('provides appropriate zone options if daylight savings time', async () => {\n    await mount(page, 'timezone-picker');\n    await page.waitFor(selectors.daylight);\n    await page.click(`${selectors.daylight} ${selectors.input}`);\n    await page.waitFor(selectors.dropdown);\n    await page.keyboard.type('new york');\n    await page.keyboard.press('ArrowDown');\n    await page.keyboard.press('Enter');\n    const value = await page.$eval(\n      `${selectors.daylight} ${selectors.value}`,\n      select => select.textContent,\n    );\n\n    expect(labelToShortCode(value)).toBe('EDT');\n  });\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'TimezonePicker'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'passes basic a11y tests'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "'timezone-picker'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "standard",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "accessibilityReport",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "analyzeAccessibility",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "accessibilityReport",
        "type": "Identifier"
      },
      {
        "value": "toHaveNoAccessibilityIssues",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'provides appropriate zone options if standard time'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "'timezone-picker'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "standard",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "standard",
        "type": "Identifier"
      },
      {
        "value": "} ${",
        "type": "Template"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "dropdown",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "keyboard",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'new york'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "keyboard",
        "type": "Identifier"
      },
      {
        "value": "press",
        "type": "Identifier"
      },
      {
        "value": "'ArrowDown'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "keyboard",
        "type": "Identifier"
      },
      {
        "value": "press",
        "type": "Identifier"
      },
      {
        "value": "'Enter'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "value",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$eval",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "standard",
        "type": "Identifier"
      },
      {
        "value": "} ${",
        "type": "Template"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "value",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "select",
        "type": "Identifier"
      },
      {
        "value": "select",
        "type": "Identifier"
      },
      {
        "value": "textContent",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "labelToShortCode",
        "type": "Identifier"
      },
      {
        "value": "value",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'EST'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'provides appropriate zone options if daylight savings time'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "'timezone-picker'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "daylight",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "daylight",
        "type": "Identifier"
      },
      {
        "value": "} ${",
        "type": "Template"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "dropdown",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "keyboard",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'new york'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "keyboard",
        "type": "Identifier"
      },
      {
        "value": "press",
        "type": "Identifier"
      },
      {
        "value": "'ArrowDown'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "keyboard",
        "type": "Identifier"
      },
      {
        "value": "press",
        "type": "Identifier"
      },
      {
        "value": "'Enter'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "value",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$eval",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "daylight",
        "type": "Identifier"
      },
      {
        "value": "} ${",
        "type": "Template"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "value",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "select",
        "type": "Identifier"
      },
      {
        "value": "select",
        "type": "Identifier"
      },
      {
        "value": "textContent",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "labelToShortCode",
        "type": "Identifier"
      },
      {
        "value": "value",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'EDT'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/uber/baseweb/blob/32942dec7bcd8d71ee4cce9f957ec31404d97192/src/datepicker/__tests__/datepicker.e2e.js",
    "commit": "32942dec7bcd8d71ee4cce9f957ec31404d97192",
    "project_name": "baseweb",
    "project_author": "uber",
    "flaky_file": "/src/datepicker/__tests__/datepicker.e2e.js",
    "start_line": 102,
    "end_line": 115,
    "test_code": "it('selects day when typed', async () => {\n  await mount(page, 'datepicker');\n  await page.waitFor(selectors.input);\n  await page.click(selectors.input);\n\n  // input mask\n  let selectedValue = await page.$eval(selectors.input, input => input.value);\n  expect(selectedValue).toBe('    /  /  ');\n\n  // actual value\n  await page.type(selectors.input, '2019/03/10');\n  selectedValue = await page.$eval(selectors.input, input => input.value);\n  expect(selectedValue).toBe('2019/03/10');\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'selects day when typed'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "'datepicker'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "selectedValue",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$eval",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "value",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "selectedValue",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'    /  /  '",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "'2019/03/10'",
        "type": "String"
      },
      {
        "value": "selectedValue",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$eval",
        "type": "Identifier"
      },
      {
        "value": "selectors",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "value",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "selectedValue",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'2019/03/10'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/uber/baseweb/blob/766ced1cfbf5a7c7ad8ec7b559064cb18ef03890/vrt/tests.vrt.js",
    "commit": "766ced1cfbf5a7c7ad8ec7b559064cb18ef03890",
    "project_name": "baseweb",
    "project_author": "uber",
    "flaky_file": "/vrt/tests.vrt.js",
    "start_line": 33,
    "end_line": 83,
    "test_code": "describe('visual snapshot tests', () => {\n  getAllScenarioNames().forEach(scenarioName => {\n    const snapshotConfig = getSnapshotConfig(scenarioName);\n\n    if (snapshotConfig.skip) return;\n\n    describe(scenarioName, () => {\n      it(`desktop`, async () => {\n        await preparePageForSnapshot(\n          scenarioName,\n          THEME.light,\n          VIEWPORT.desktop,\n        );\n        await snapshot(`${scenarioName}__desktop`);\n      });\n\n      it(`mobile`, async () => {\n        await preparePageForSnapshot(\n          scenarioName,\n          THEME.light,\n          VIEWPORT.mobile,\n        );\n        await snapshot(`${scenarioName}__mobile`, VIEWPORT.mobile);\n      });\n\n      if (!scenarioName.includes('rtl')) {\n        it(`dark`, async () => {\n          await preparePageForSnapshot(\n            scenarioName,\n            THEME.dark,\n            VIEWPORT.desktop,\n          );\n          await snapshot(`${scenarioName}__dark`);\n        });\n      }\n\n      snapshotConfig.interactions.forEach(interaction => {\n        it(interaction.name, async () => {\n          await preparePageForSnapshot(\n            scenarioName,\n            THEME.light,\n            VIEWPORT.desktop,\n          );\n          await interaction.behavior(page);\n          await page.waitFor(250);\n          await snapshot(`${scenarioName}__${interaction.name}`);\n        });\n      });\n    });\n  });\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'visual snapshot tests'",
        "type": "String"
      },
      {
        "value": "getAllScenarioNames",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "snapshotConfig",
        "type": "Identifier"
      },
      {
        "value": "getSnapshotConfig",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "snapshotConfig",
        "type": "Identifier"
      },
      {
        "value": "skip",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "`desktop`",
        "type": "Template"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "preparePageForSnapshot",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "THEME",
        "type": "Identifier"
      },
      {
        "value": "light",
        "type": "Identifier"
      },
      {
        "value": "VIEWPORT",
        "type": "Identifier"
      },
      {
        "value": "desktop",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "snapshot",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__desktop`",
        "type": "Template"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "`mobile`",
        "type": "Template"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "preparePageForSnapshot",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "THEME",
        "type": "Identifier"
      },
      {
        "value": "light",
        "type": "Identifier"
      },
      {
        "value": "VIEWPORT",
        "type": "Identifier"
      },
      {
        "value": "mobile",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "snapshot",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__mobile`",
        "type": "Template"
      },
      {
        "value": "VIEWPORT",
        "type": "Identifier"
      },
      {
        "value": "mobile",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "includes",
        "type": "Identifier"
      },
      {
        "value": "'rtl'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "`dark`",
        "type": "Template"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "preparePageForSnapshot",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "THEME",
        "type": "Identifier"
      },
      {
        "value": "dark",
        "type": "Identifier"
      },
      {
        "value": "VIEWPORT",
        "type": "Identifier"
      },
      {
        "value": "desktop",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "snapshot",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__dark`",
        "type": "Template"
      },
      {
        "value": "snapshotConfig",
        "type": "Identifier"
      },
      {
        "value": "interactions",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "interaction",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "interaction",
        "type": "Identifier"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "preparePageForSnapshot",
        "type": "Identifier"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "THEME",
        "type": "Identifier"
      },
      {
        "value": "light",
        "type": "Identifier"
      },
      {
        "value": "VIEWPORT",
        "type": "Identifier"
      },
      {
        "value": "desktop",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "interaction",
        "type": "Identifier"
      },
      {
        "value": "behavior",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "snapshot",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "scenarioName",
        "type": "Identifier"
      },
      {
        "value": "}__${",
        "type": "Template"
      },
      {
        "value": "interaction",
        "type": "Identifier"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/uber/baseweb/blob/766ced1cfbf5a7c7ad8ec7b559064cb18ef03890/vrt/tests.vrt.js",
    "commit": "766ced1cfbf5a7c7ad8ec7b559064cb18ef03890",
    "project_name": "baseweb",
    "project_author": "uber",
    "flaky_file": "/vrt/tests.vrt.js",
    "start_line": 85,
    "end_line": 106,
    "test_code": "async function snapshot(identifier, viewport = VIEWPORT.desktop) {\n  // Snapshots should have fixed widths but allow for scrolling in the y dimension.\n  // We use the raw Chrome Devtools Protocol to get scroll height of page.\n  const client = await page.target().createCDPSession();\n  const metrics = await client.send('Page.getLayoutMetrics');\n  const height = Math.ceil(metrics.contentSize.height);\n\n  console.log('content height', height);\n\n  const image = await page.screenshot({\n    clip: {\n      x: 0,\n      y: 0,\n      width: VIEWPORT_WIDTH[viewport], // Clamp width to either mobile or desktop.\n      height: height,\n    },\n  });\n\n  expect(image).toMatchImageSnapshot({\n    customSnapshotIdentifier: identifier,\n  });\n}\n",
    "tokens": [
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "snapshot",
        "type": "Identifier"
      },
      {
        "value": "identifier",
        "type": "Identifier"
      },
      {
        "value": "viewport",
        "type": "Identifier"
      },
      {
        "value": "VIEWPORT",
        "type": "Identifier"
      },
      {
        "value": "desktop",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "target",
        "type": "Identifier"
      },
      {
        "value": "createCDPSession",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "metrics",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "client",
        "type": "Identifier"
      },
      {
        "value": "send",
        "type": "Identifier"
      },
      {
        "value": "'Page.getLayoutMetrics'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "ceil",
        "type": "Identifier"
      },
      {
        "value": "metrics",
        "type": "Identifier"
      },
      {
        "value": "contentSize",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "console",
        "type": "Identifier"
      },
      {
        "value": "log",
        "type": "Identifier"
      },
      {
        "value": "'content height'",
        "type": "String"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "image",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "screenshot",
        "type": "Identifier"
      },
      {
        "value": "clip",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "VIEWPORT_WIDTH",
        "type": "Identifier"
      },
      {
        "value": "viewport",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "image",
        "type": "Identifier"
      },
      {
        "value": "toMatchImageSnapshot",
        "type": "Identifier"
      },
      {
        "value": "customSnapshotIdentifier",
        "type": "Identifier"
      },
      {
        "value": "identifier",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/uber/baseweb/blob/447bd7a279c0137daeab5a0147fdf9fceb1d59f7/src/data-table/__tests__/data-table-columns.e2e.js",
    "commit": "447bd7a279c0137daeab5a0147fdf9fceb1d59f7",
    "project_name": "baseweb",
    "project_author": "uber",
    "flaky_file": "/src/data-table/__tests__/data-table-columns.e2e.js",
    "start_line": 113,
    "end_line": 145,
    "test_code": "it('sorts string column', async () => {\n  const index = 3;\n  await mount(page, 'data-table-columns');\n  await page.waitFor(TABLE_ROOT);\n  const initial = await getCellContentsAtColumnIndex(\n    page,\n    COLUMN_COUNT,\n    index,\n  );\n  expect(matchArrayElements(initial, ['one', 'two', 'three', 'four'])).toBe(\n    true,\n  );\n\n  await sortColumnAtIndex(page, index);\n  await page.waitFor(150);\n  const desc = await getCellContentsAtColumnIndex(page, COLUMN_COUNT, index);\n  expect(matchArrayElements(desc, ['four', 'one', 'three', 'two'])).toBe(\n    true,\n  );\n\n  await sortColumnAtIndex(page, index);\n  await page.waitFor(150);\n  const asc = await getCellContentsAtColumnIndex(page, COLUMN_COUNT, index);\n  expect(matchArrayElements(asc, ['two', 'three', 'one', 'four'])).toBe(true);\n\n  await sortColumnAtIndex(page, index);\n  const restored = await getCellContentsAtColumnIndex(\n    page,\n    COLUMN_COUNT,\n    index,\n  );\n  expect(matchArrayElements(initial, restored)).toBe(true);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'sorts string column'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "'data-table-columns'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "TABLE_ROOT",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "initial",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getCellContentsAtColumnIndex",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "COLUMN_COUNT",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "matchArrayElements",
        "type": "Identifier"
      },
      {
        "value": "initial",
        "type": "Identifier"
      },
      {
        "value": "'one'",
        "type": "String"
      },
      {
        "value": "'two'",
        "type": "String"
      },
      {
        "value": "'three'",
        "type": "String"
      },
      {
        "value": "'four'",
        "type": "String"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "sortColumnAtIndex",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "desc",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getCellContentsAtColumnIndex",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "COLUMN_COUNT",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "matchArrayElements",
        "type": "Identifier"
      },
      {
        "value": "desc",
        "type": "Identifier"
      },
      {
        "value": "'four'",
        "type": "String"
      },
      {
        "value": "'one'",
        "type": "String"
      },
      {
        "value": "'three'",
        "type": "String"
      },
      {
        "value": "'two'",
        "type": "String"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "sortColumnAtIndex",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "asc",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getCellContentsAtColumnIndex",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "COLUMN_COUNT",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "matchArrayElements",
        "type": "Identifier"
      },
      {
        "value": "asc",
        "type": "Identifier"
      },
      {
        "value": "'two'",
        "type": "String"
      },
      {
        "value": "'three'",
        "type": "String"
      },
      {
        "value": "'one'",
        "type": "String"
      },
      {
        "value": "'four'",
        "type": "String"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "sortColumnAtIndex",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "restored",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "getCellContentsAtColumnIndex",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "COLUMN_COUNT",
        "type": "Identifier"
      },
      {
        "value": "index",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "matchArrayElements",
        "type": "Identifier"
      },
      {
        "value": "initial",
        "type": "Identifier"
      },
      {
        "value": "restored",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/uber/baseweb/blob/f6c6d3c52f13bca7475ee6b773c6a5519013705f/src/datepicker/__tests__/datepicker-unreliable.e2e.js",
    "commit": "f6c6d3c52f13bca7475ee6b773c6a5519013705f",
    "project_name": "baseweb",
    "project_author": "uber",
    "flaky_file": "/src/datepicker/__tests__/datepicker-unreliable.e2e.js",
    "start_line": 158,
    "end_line": 185,
    "test_code": "it('selects range - verifies end of year', async () => {\n  await mount(page, 'datepicker-range');\n\n  await page.waitFor('input');\n  await page.click('input');\n  await page.waitFor('[data-baseweb=\"calendar\"]');\n  await page.click('[data-id=\"monthYearSelectButton\"]');\n  await page.waitFor('[data-id=\"monthYearSelectMenu\"]');\n\n  await page.$$eval('ul[role=\"listbox\"] li', items => {\n    const option = items.find(item => {\n      return item.textContent === 'December 2019';\n    });\n    option.click();\n    return option;\n  });\n\n  await page.click(\n    '[aria-label=\"Choose Wednesday, December 25th 2019. It\\'s available.\"]',\n  );\n\n  await page.click(\n    '[aria-label=\"Choose Tuesday, December 31st 2019. It\\'s available.\"]',\n  );\n\n  const selectedValue = await page.$eval('input', input => input.value);\n  expect(selectedValue).toBe('2019/12/25 – 2019/12/31');\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'selects range - verifies end of year'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "'datepicker-range'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "'input'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'input'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "'[data-baseweb=\"calendar\"]'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'[data-id=\"monthYearSelectButton\"]'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "waitFor",
        "type": "Identifier"
      },
      {
        "value": "'[data-id=\"monthYearSelectMenu\"]'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$$eval",
        "type": "Identifier"
      },
      {
        "value": "'ul[role=\"listbox\"] li'",
        "type": "String"
      },
      {
        "value": "items",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "option",
        "type": "Identifier"
      },
      {
        "value": "items",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "item",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "item",
        "type": "Identifier"
      },
      {
        "value": "textContent",
        "type": "Identifier"
      },
      {
        "value": "'December 2019'",
        "type": "String"
      },
      {
        "value": "option",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "option",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'[aria-label=\"Choose Wednesday, December 25th 2019. It\\'s available.\"]'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'[aria-label=\"Choose Tuesday, December 31st 2019. It\\'s available.\"]'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "selectedValue",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$eval",
        "type": "Identifier"
      },
      {
        "value": "'input'",
        "type": "String"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "input",
        "type": "Identifier"
      },
      {
        "value": "value",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "selectedValue",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'2019/12/25 – 2019/12/31'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/Hacker0x01/react-datepicker/blob/db64f070d72ff0705239f613bd5bba9602d3742f/test/datepicker_test.js",
    "commit": "db64f070d72ff0705239f613bd5bba9602d3742f",
    "project_name": "react-datepicker",
    "project_author": "Hacker0x01",
    "flaky_file": "/test/datepicker_test.js",
    "start_line": 153,
    "end_line": 167,
    "test_code": "it('should update the preSelection state when a day is selected with mouse click', () => {\n  // Note: We need monthsShown=2 so that today can still be clicked when\n  // ArrowLeft selects the previous month. (On the 1st 2 days of the month.)\n  var data = getOnInputKeyDownStuff({ shouldCloseOnSelect: false, monthsShown: 2 })\n\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowLeft', keyCode: 37, which: 37 })\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowLeft', keyCode: 37, which: 37 })\n\n  var day = TestUtils.findRenderedDOMComponentWithClass(data.datePicker.calendar, 'react-datepicker__day--today')\n  TestUtils.Simulate.click(ReactDOM.findDOMNode(day))\n\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowDown', keyCode: 40, which: 40 })\n  data.copyM.add(1, 'weeks')\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should update the preSelection state when a day is selected with mouse click'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "shouldCloseOnSelect",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "monthsShown",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowLeft'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowLeft'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "day",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "findRenderedDOMComponentWithClass",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "calendar",
        "type": "Identifier"
      },
      {
        "value": "'react-datepicker__day--today'",
        "type": "String"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "ReactDOM",
        "type": "Identifier"
      },
      {
        "value": "findDOMNode",
        "type": "Identifier"
      },
      {
        "value": "day",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowDown'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "40",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "40",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'weeks'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/Hacker0x01/react-datepicker/blob/db64f070d72ff0705239f613bd5bba9602d3742f/test/datepicker_test.js",
    "commit": "db64f070d72ff0705239f613bd5bba9602d3742f",
    "project_name": "react-datepicker",
    "project_author": "Hacker0x01",
    "flaky_file": "/test/datepicker_test.js",
    "start_line": 339,
    "end_line": 448,
    "test_code": "it('should handle onInputKeyDown ArrowLeft', () => {\n  var data = getOnInputKeyDownStuff()\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowLeft', keyCode: 37, which: 37 })\n  data.copyM.subtract(1, 'days')\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n})\nit('should handle onInputKeyDown ArrowRight', () => {\n  var data = getOnInputKeyDownStuff()\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowRight', keyCode: 39, which: 39 })\n  data.copyM.add(1, 'days')\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n})\nit('should handle onInputKeyDown ArrowUp', () => {\n  var data = getOnInputKeyDownStuff()\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowUp', keyCode: 38, which: 38 })\n  data.copyM.subtract(1, 'weeks')\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n})\nit('should handle onInputKeyDown ArrowDown', () => {\n  var data = getOnInputKeyDownStuff()\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowDown', keyCode: 40, which: 40 })\n  data.copyM.add(1, 'weeks')\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n})\nit('should handle onInputKeyDown PageUp', () => {\n  var data = getOnInputKeyDownStuff()\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'PageUp', keyCode: 33, which: 33 })\n  data.copyM.subtract(1, 'months')\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n})\nit('should handle onInputKeyDown PageDown', () => {\n  var data = getOnInputKeyDownStuff()\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'PageDown', keyCode: 34, which: 34 })\n  data.copyM.add(1, 'months')\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n})\nit('should handle onInputKeyDown End', () => {\n  var data = getOnInputKeyDownStuff()\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'End', keyCode: 35, which: 35 })\n  data.copyM.add(1, 'years')\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n})\nit('should handle onInputKeyDown Home', () => {\n  var data = getOnInputKeyDownStuff()\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'Home', keyCode: 36, which: 36 })\n  data.copyM.subtract(1, 'years')\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n})\nit('should not preSelect date if not between minDate and maxDate', () => {\n  var data = getOnInputKeyDownStuff({ minDate: moment().subtract(1, 'day'), maxDate: moment().add(1, 'day') })\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowDown', keyCode: 40, which: 40 })\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(moment().format(data.testFormat))\n})\ndescribe('onInputKeyDown Enter', () => {\n  it('should update the selected date', () => {\n    var data = getOnInputKeyDownStuff()\n    TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowLeft', keyCode: 37, which: 37 })\n    TestUtils.Simulate.keyDown(data.nodeInput, { key: 'Enter', keyCode: 13, which: 13 })\n    data.copyM.subtract(1, 'days')\n    expect(data.callback.calledOnce).to.be.true\n    var result = data.callback.args[0][0]\n    expect(result.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n  })\n  it('should update the selected date on manual input', () => {\n    var data = getOnInputKeyDownStuff()\n    TestUtils.Simulate.change(data.nodeInput, { target: { value: '02/02/2017' } })\n    TestUtils.Simulate.keyDown(data.nodeInput, { key: 'Enter', keyCode: 13, which: 13 })\n    data.copyM = moment('02/02/2017')\n    expect(data.callback.args[0][0].format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n  })\n  it('should not update the selected date if the date input manually it has something wrong', () => {\n    var data = getOnInputKeyDownStuff()\n    TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowDown', keyCode: 40, which: 40 })\n    TestUtils.Simulate.keyDown(data.nodeInput, { key: 'Backspace', keyCode: 8, which: 8 })\n    TestUtils.Simulate.keyDown(data.nodeInput, { key: 'Enter', keyCode: 13, which: 13 })\n    expect(data.callback.calledOnce).to.be.false\n  })\n  it('should not select excludeDates', () => {\n    var data = getOnInputKeyDownStuff({ excludeDates: [moment().subtract(1, 'days')] })\n    TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowLeft', keyCode: 37, which: 37 })\n    TestUtils.Simulate.keyDown(data.nodeInput, { key: 'Enter', keyCode: 13, which: 13 })\n    expect(data.callback.calledOnce).to.be.false\n  })\n  it('should not select dates excluded from filterDate', () => {\n    var data = getOnInputKeyDownStuff({ filterDate: date => date.day() !== moment().subtract(1, 'days').day() })\n    TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowLeft', keyCode: 37, which: 37 })\n    TestUtils.Simulate.keyDown(data.nodeInput, { key: 'Enter', keyCode: 13, which: 13 })\n    expect(data.callback.calledOnce).to.be.false\n  })\n})\nit('should reset the keyboard selection when closed', () => {\n  var data = getOnInputKeyDownStuff()\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowLeft', keyCode: 37, which: 37 })\n  data.datePicker.setOpen(false)\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n})\nit('should retain the keyboard selection when already open', () => {\n  var data = getOnInputKeyDownStuff()\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowLeft', keyCode: 37, which: 37 })\n  data.datePicker.setOpen(true)\n  data.copyM.subtract(1, 'days')\n  expect(data.datePicker.state.preSelection.format(data.testFormat)).to.equal(data.copyM.format(data.testFormat))\n})\nit('should open the calendar when an arrow key is pressed', () => {\n  var data = getOnInputKeyDownStuff()\n  data.datePicker.setOpen(false)\n  expect(data.datePicker.state.open).to.be.false\n  TestUtils.Simulate.keyDown(data.nodeInput, { key: 'ArrowLeft', keyCode: 37, which: 37 })\n  expect(data.datePicker.state.open).to.be.true\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should handle onInputKeyDown ArrowLeft'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowLeft'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "subtract",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'days'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should handle onInputKeyDown ArrowRight'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowRight'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "39",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "39",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'days'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should handle onInputKeyDown ArrowUp'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowUp'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "38",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "38",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "subtract",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'weeks'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should handle onInputKeyDown ArrowDown'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowDown'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "40",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "40",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'weeks'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should handle onInputKeyDown PageUp'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'PageUp'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "33",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "33",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "subtract",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'months'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should handle onInputKeyDown PageDown'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'PageDown'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "34",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "34",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'months'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should handle onInputKeyDown End'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'End'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "35",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'years'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should handle onInputKeyDown Home'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'Home'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "36",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "36",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "subtract",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'years'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should not preSelect date if not between minDate and maxDate'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "minDate",
        "type": "Identifier"
      },
      {
        "value": "moment",
        "type": "Identifier"
      },
      {
        "value": "subtract",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'day'",
        "type": "String"
      },
      {
        "value": "maxDate",
        "type": "Identifier"
      },
      {
        "value": "moment",
        "type": "Identifier"
      },
      {
        "value": "add",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'day'",
        "type": "String"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowDown'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "40",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "40",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "moment",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'onInputKeyDown Enter'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should update the selected date'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowLeft'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'Enter'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "subtract",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'days'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "callback",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "result",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "callback",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "result",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should update the selected date on manual input'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "change",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "target",
        "type": "Identifier"
      },
      {
        "value": "value",
        "type": "Identifier"
      },
      {
        "value": "'02/02/2017'",
        "type": "String"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'Enter'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "moment",
        "type": "Identifier"
      },
      {
        "value": "'02/02/2017'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "callback",
        "type": "Identifier"
      },
      {
        "value": "args",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should not update the selected date if the date input manually it has something wrong'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowDown'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "40",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "40",
        "type": "Numeric"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'Backspace'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'Enter'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "callback",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Keyword"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should not select excludeDates'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "excludeDates",
        "type": "Identifier"
      },
      {
        "value": "moment",
        "type": "Identifier"
      },
      {
        "value": "subtract",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'days'",
        "type": "String"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowLeft'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'Enter'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "callback",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Keyword"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should not select dates excluded from filterDate'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "filterDate",
        "type": "Identifier"
      },
      {
        "value": "date",
        "type": "Identifier"
      },
      {
        "value": "date",
        "type": "Identifier"
      },
      {
        "value": "day",
        "type": "Identifier"
      },
      {
        "value": "moment",
        "type": "Identifier"
      },
      {
        "value": "subtract",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'days'",
        "type": "String"
      },
      {
        "value": "day",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowLeft'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'Enter'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "callback",
        "type": "Identifier"
      },
      {
        "value": "calledOnce",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Keyword"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should reset the keyboard selection when closed'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowLeft'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "setOpen",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should retain the keyboard selection when already open'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowLeft'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "setOpen",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "subtract",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'days'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "format",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should open the calendar when an arrow key is pressed'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "setOpen",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "open",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Keyword"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "key",
        "type": "Identifier"
      },
      {
        "value": "'ArrowLeft'",
        "type": "String"
      },
      {
        "value": "keyCode",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "which",
        "type": "Identifier"
      },
      {
        "value": "37",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "open",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "be",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Keyword"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/Hacker0x01/react-datepicker/blob/67f05e99786815cb1c5ca77530169067177d384b/test/datepicker_test.js",
    "commit": "67f05e99786815cb1c5ca77530169067177d384b",
    "project_name": "react-datepicker",
    "project_author": "Hacker0x01",
    "flaky_file": "/test/datepicker_test.js",
    "start_line": 241,
    "end_line": 266,
    "test_code": "it(\"should update the preSelection state when a day is selected with mouse click\", () => {\n  // Note: We need monthsShown=2 so that today can still be clicked when\n  // ArrowLeft selects the previous month. (On the 1st 2 days of the month.)\n  // On the last week of the month, when the next month includes the current\n  // week, we need monthsShown=1 to prevent today from appearing twice.\n  const dayOfMonth = utils.getDate(utils.now());\n  var data = getOnInputKeyDownStuff({\n    shouldCloseOnSelect: false,\n    monthsShown: dayOfMonth < 15 ? 2 : 1\n  });\n\n  TestUtils.Simulate.keyDown(data.nodeInput, getKey(\"ArrowLeft\"));\n  TestUtils.Simulate.keyDown(data.nodeInput, getKey(\"ArrowLeft\"));\n\n  var day = TestUtils.findRenderedDOMComponentWithClass(\n    data.datePicker.calendar,\n    \"react-datepicker__day--today\"\n  );\n  TestUtils.Simulate.click(ReactDOM.findDOMNode(day));\n\n  TestUtils.Simulate.keyDown(data.nodeInput, getKey(\"ArrowDown\"));\n  utils.addWeeks(data.copyM, 1);\n  expect(\n    utils.formatDate(data.datePicker.state.preSelection, data.testFormat)\n  ).to.equal(utils.formatDate(data.copyM, data.testFormat));\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "\"should update the preSelection state when a day is selected with mouse click\"",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "dayOfMonth",
        "type": "Identifier"
      },
      {
        "value": "utils",
        "type": "Identifier"
      },
      {
        "value": "getDate",
        "type": "Identifier"
      },
      {
        "value": "utils",
        "type": "Identifier"
      },
      {
        "value": "now",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "getOnInputKeyDownStuff",
        "type": "Identifier"
      },
      {
        "value": "shouldCloseOnSelect",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "monthsShown",
        "type": "Identifier"
      },
      {
        "value": "dayOfMonth",
        "type": "Identifier"
      },
      {
        "value": "15",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "getKey",
        "type": "Identifier"
      },
      {
        "value": "\"ArrowLeft\"",
        "type": "String"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "getKey",
        "type": "Identifier"
      },
      {
        "value": "\"ArrowLeft\"",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "day",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "findRenderedDOMComponentWithClass",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "calendar",
        "type": "Identifier"
      },
      {
        "value": "\"react-datepicker__day--today\"",
        "type": "String"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "ReactDOM",
        "type": "Identifier"
      },
      {
        "value": "findDOMNode",
        "type": "Identifier"
      },
      {
        "value": "day",
        "type": "Identifier"
      },
      {
        "value": "TestUtils",
        "type": "Identifier"
      },
      {
        "value": "Simulate",
        "type": "Identifier"
      },
      {
        "value": "keyDown",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "nodeInput",
        "type": "Identifier"
      },
      {
        "value": "getKey",
        "type": "Identifier"
      },
      {
        "value": "\"ArrowDown\"",
        "type": "String"
      },
      {
        "value": "utils",
        "type": "Identifier"
      },
      {
        "value": "addWeeks",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "utils",
        "type": "Identifier"
      },
      {
        "value": "formatDate",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "datePicker",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "preSelection",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      },
      {
        "value": "to",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "utils",
        "type": "Identifier"
      },
      {
        "value": "formatDate",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "copyM",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "testFormat",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/gotify/server/blob/865aaa3f8588841b6ab80edaf4f67ad5a42f8e3e/ui/src/tests/message.test.ts",
    "commit": "865aaa3f8588841b6ab80edaf4f67ad5a42f8e3e",
    "project_name": "server",
    "project_author": "gotify",
    "flaky_file": "/ui/src/tests/message.test.ts",
    "start_line": 125,
    "end_line": 140,
    "test_code": "const expectMessages = async (toCheck: {\n    all: Msg[];\n    windows: Msg[];\n    linux: Msg[];\n    backup: Msg[];\n}) => {\n    await navigate('All Messages');\n    expect(await extractMessages(toCheck.all.length)).toEqual(toCheck.all);\n    await navigate('Windows');\n    expect(await extractMessages(toCheck.windows.length)).toEqual(toCheck.windows);\n    await navigate('Linux');\n    expect(await extractMessages(toCheck.linux.length)).toEqual(toCheck.linux);\n    await navigate('Backup');\n    expect(await extractMessages(toCheck.backup.length)).toEqual(toCheck.backup);\n    await navigate('All Messages');\n};\n",
    "tokens": [
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "expectMessages",
        "type": "Identifier"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "toCheck",
        "type": "Identifier"
      },
      {
        "value": "all",
        "type": "Identifier"
      },
      {
        "value": "Msg",
        "type": "Identifier"
      },
      {
        "value": "windows",
        "type": "Identifier"
      },
      {
        "value": "Msg",
        "type": "Identifier"
      },
      {
        "value": "linux",
        "type": "Identifier"
      },
      {
        "value": "Msg",
        "type": "Identifier"
      },
      {
        "value": "backup",
        "type": "Identifier"
      },
      {
        "value": "Msg",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navigate",
        "type": "Identifier"
      },
      {
        "value": "'All Messages'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "extractMessages",
        "type": "Identifier"
      },
      {
        "value": "toCheck",
        "type": "Identifier"
      },
      {
        "value": "all",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "toCheck",
        "type": "Identifier"
      },
      {
        "value": "all",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navigate",
        "type": "Identifier"
      },
      {
        "value": "'Windows'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "extractMessages",
        "type": "Identifier"
      },
      {
        "value": "toCheck",
        "type": "Identifier"
      },
      {
        "value": "windows",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "toCheck",
        "type": "Identifier"
      },
      {
        "value": "windows",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navigate",
        "type": "Identifier"
      },
      {
        "value": "'Linux'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "extractMessages",
        "type": "Identifier"
      },
      {
        "value": "toCheck",
        "type": "Identifier"
      },
      {
        "value": "linux",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "toCheck",
        "type": "Identifier"
      },
      {
        "value": "linux",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navigate",
        "type": "Identifier"
      },
      {
        "value": "'Backup'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "extractMessages",
        "type": "Identifier"
      },
      {
        "value": "toCheck",
        "type": "Identifier"
      },
      {
        "value": "backup",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "toCheck",
        "type": "Identifier"
      },
      {
        "value": "backup",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navigate",
        "type": "Identifier"
      },
      {
        "value": "'All Messages'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/gotify/server/blob/865aaa3f8588841b6ab80edaf4f67ad5a42f8e3e/ui/src/tests/message.test.ts",
    "commit": "865aaa3f8588841b6ab80edaf4f67ad5a42f8e3e",
    "project_name": "server",
    "project_author": "gotify",
    "flaky_file": "/ui/src/tests/message.test.ts",
    "start_line": 142,
    "end_line": 145,
    "test_code": "it('create a message', async () => {\n    await createMessage(windows1, windowsServerToken);\n    expect(await extractMessages(1)).toEqual([windows1]);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'create a message'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "createMessage",
        "type": "Identifier"
      },
      {
        "value": "windows1",
        "type": "Identifier"
      },
      {
        "value": "windowsServerToken",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "extractMessages",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "windows1",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/gotify/server/blob/865aaa3f8588841b6ab80edaf4f67ad5a42f8e3e/ui/src/tests/message.test.ts",
    "commit": "865aaa3f8588841b6ab80edaf4f67ad5a42f8e3e",
    "project_name": "server",
    "project_author": "gotify",
    "flaky_file": "/ui/src/tests/message.test.ts",
    "start_line": 146,
    "end_line": 149,
    "test_code": "it('has one message in windows app', async () => {\n    await navigate('Windows');\n    expect(await extractMessages(1)).toEqual([windows1]);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'has one message in windows app'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navigate",
        "type": "Identifier"
      },
      {
        "value": "'Windows'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "extractMessages",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "windows1",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/gotify/server/blob/865aaa3f8588841b6ab80edaf4f67ad5a42f8e3e/ui/src/tests/message.test.ts",
    "commit": "865aaa3f8588841b6ab80edaf4f67ad5a42f8e3e",
    "project_name": "server",
    "project_author": "gotify",
    "flaky_file": "/ui/src/tests/message.test.ts",
    "start_line": 150,
    "end_line": 154,
    "test_code": "it('has no message in linux app', async () => {\n    await navigate('Linux');\n    expect(await extractMessages(0)).toEqual([]);\n    await navigate('All Messages');\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'has no message in linux app'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navigate",
        "type": "Identifier"
      },
      {
        "value": "'Linux'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "extractMessages",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navigate",
        "type": "Identifier"
      },
      {
        "value": "'All Messages'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/gotify/server/blob/865aaa3f8588841b6ab80edaf4f67ad5a42f8e3e/ui/src/tests/message.test.ts",
    "commit": "865aaa3f8588841b6ab80edaf4f67ad5a42f8e3e",
    "project_name": "server",
    "project_author": "gotify",
    "flaky_file": "/ui/src/tests/message.test.ts",
    "start_line": 261,
    "end_line": 268,
    "test_code": "it('deletes all backup messages and navigates to all messages', async () => {\n    await navigate('Backup');\n    await page.click('#delete-all');\n    await navigate('All Messages');\n    await createMessage(backup3, backupServerToken);\n    await waitForExists(page, '.message .title', backup3.title);\n    expect(await extractMessages(1)).toEqual([backup3]);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'deletes all backup messages and navigates to all messages'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navigate",
        "type": "Identifier"
      },
      {
        "value": "'Backup'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'#delete-all'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "navigate",
        "type": "Identifier"
      },
      {
        "value": "'All Messages'",
        "type": "String"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "createMessage",
        "type": "Identifier"
      },
      {
        "value": "backup3",
        "type": "Identifier"
      },
      {
        "value": "backupServerToken",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitForExists",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "'.message .title'",
        "type": "String"
      },
      {
        "value": "backup3",
        "type": "Identifier"
      },
      {
        "value": "title",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "extractMessages",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "backup3",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/gotify/server/blob/3069867fcc1a545db59829ed827e576f32ebb893/ui/src/tests/plugin.test.ts",
    "commit": "3069867fcc1a545db59829ed827e576f32ebb893",
    "project_name": "server",
    "project_author": "gotify",
    "flaky_file": "/ui/src/tests/plugin.test.ts",
    "start_line": 96,
    "end_line": 103,
    "test_code": "it('has echo plugin', async () => {\n    await waitForCount(page, $table.rows(), 1);\n    expect(await innerText(page, $table.cell(1, Col.Name))).toEqual('test plugin');\n    expect(await innerText(page, $table.cell(1, Col.Token))).toBe(hiddenToken);\n    expect(parseInt(await innerText(page, $table.cell(1, Col.ID)), 10)).toBeGreaterThan(\n        0\n    );\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'has echo plugin'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "waitForCount",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$table",
        "type": "Identifier"
      },
      {
        "value": "rows",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "innerText",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$table",
        "type": "Identifier"
      },
      {
        "value": "cell",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Col",
        "type": "Identifier"
      },
      {
        "value": "Name",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "'test plugin'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "innerText",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$table",
        "type": "Identifier"
      },
      {
        "value": "cell",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Col",
        "type": "Identifier"
      },
      {
        "value": "Token",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "hiddenToken",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "parseInt",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "innerText",
        "type": "Identifier"
      },
      {
        "value": "page",
        "type": "Identifier"
      },
      {
        "value": "$table",
        "type": "Identifier"
      },
      {
        "value": "cell",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Col",
        "type": "Identifier"
      },
      {
        "value": "ID",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "toBeGreaterThan",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/HospitalRun/hospitalrun-frontend/blob/6754d71e79f4e5433bc0489e45ad18fefb1b7e30/tests/acceptance/imaging-test.js",
    "commit": "6754d71e79f4e5433bc0489e45ad18fefb1b7e30",
    "project_name": "hospitalrun-frontend",
    "project_author": "HospitalRun",
    "flaky_file": "/tests/acceptance/imaging-test.js",
    "start_line": 36,
    "end_line": 67,
    "test_code": "test('create a new imaging request', (assert) => {\n  runWithPouchDump('imaging', function () {\n    authenticateUser();\n    visit('/imaging/edit/new');\n\n    andThen(() => {\n      assert.equal(currentURL(), '/imaging/edit/new');\n    });\n    fillIn('.patient-input .tt-input', 'Lennex Zinyando - P00017');\n    triggerEvent('.patient-input .tt-input', 'input');\n    triggerEvent('.patient-input .tt-input', 'blur');\n    fillIn('.imaging-type-input .tt-input', 'Chest Scan');\n    fillIn('.radiologist-input .tt-input', 'Dr Test');\n    fillIn('.result-input input', 'Check is clear');\n    fillIn('textarea', 'Patient is healthy');\n    click('button:contains(Add)');\n    waitToAppear('.modal-dialog');\n    andThen(() => {\n      assert.equal(find('.modal-title').text(), 'Imaging Request Saved', 'Imaging Request was saved successfully');\n    });\n    click('button:contains(Ok)');\n    andThen(() => {\n      findWithAssert('button:contains(Update)');\n      findWithAssert('button:contains(Return)');\n      findWithAssert('button:contains(Complete)');\n    });\n    waitToAppear('.test-patient-summary');\n    andThen(() => {\n      assert.equal(find('.test-patient-summary').length, 1, 'Patient summary is displayed');\n    });\n  });\n});\n",
    "tokens": [
      {
        "value": "test",
        "type": "Identifier"
      },
      {
        "value": "'create a new imaging request'",
        "type": "String"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "runWithPouchDump",
        "type": "Identifier"
      },
      {
        "value": "'imaging'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "authenticateUser",
        "type": "Identifier"
      },
      {
        "value": "visit",
        "type": "Identifier"
      },
      {
        "value": "'/imaging/edit/new'",
        "type": "String"
      },
      {
        "value": "andThen",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "currentURL",
        "type": "Identifier"
      },
      {
        "value": "'/imaging/edit/new'",
        "type": "String"
      },
      {
        "value": "fillIn",
        "type": "Identifier"
      },
      {
        "value": "'.patient-input .tt-input'",
        "type": "String"
      },
      {
        "value": "'Lennex Zinyando - P00017'",
        "type": "String"
      },
      {
        "value": "triggerEvent",
        "type": "Identifier"
      },
      {
        "value": "'.patient-input .tt-input'",
        "type": "String"
      },
      {
        "value": "'input'",
        "type": "String"
      },
      {
        "value": "triggerEvent",
        "type": "Identifier"
      },
      {
        "value": "'.patient-input .tt-input'",
        "type": "String"
      },
      {
        "value": "'blur'",
        "type": "String"
      },
      {
        "value": "fillIn",
        "type": "Identifier"
      },
      {
        "value": "'.imaging-type-input .tt-input'",
        "type": "String"
      },
      {
        "value": "'Chest Scan'",
        "type": "String"
      },
      {
        "value": "fillIn",
        "type": "Identifier"
      },
      {
        "value": "'.radiologist-input .tt-input'",
        "type": "String"
      },
      {
        "value": "'Dr Test'",
        "type": "String"
      },
      {
        "value": "fillIn",
        "type": "Identifier"
      },
      {
        "value": "'.result-input input'",
        "type": "String"
      },
      {
        "value": "'Check is clear'",
        "type": "String"
      },
      {
        "value": "fillIn",
        "type": "Identifier"
      },
      {
        "value": "'textarea'",
        "type": "String"
      },
      {
        "value": "'Patient is healthy'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'button:contains(Add)'",
        "type": "String"
      },
      {
        "value": "waitToAppear",
        "type": "Identifier"
      },
      {
        "value": "'.modal-dialog'",
        "type": "String"
      },
      {
        "value": "andThen",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'.modal-title'",
        "type": "String"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "'Imaging Request Saved'",
        "type": "String"
      },
      {
        "value": "'Imaging Request was saved successfully'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "'button:contains(Ok)'",
        "type": "String"
      },
      {
        "value": "andThen",
        "type": "Identifier"
      },
      {
        "value": "findWithAssert",
        "type": "Identifier"
      },
      {
        "value": "'button:contains(Update)'",
        "type": "String"
      },
      {
        "value": "findWithAssert",
        "type": "Identifier"
      },
      {
        "value": "'button:contains(Return)'",
        "type": "String"
      },
      {
        "value": "findWithAssert",
        "type": "Identifier"
      },
      {
        "value": "'button:contains(Complete)'",
        "type": "String"
      },
      {
        "value": "waitToAppear",
        "type": "Identifier"
      },
      {
        "value": "'.test-patient-summary'",
        "type": "String"
      },
      {
        "value": "andThen",
        "type": "Identifier"
      },
      {
        "value": "assert",
        "type": "Identifier"
      },
      {
        "value": "equal",
        "type": "Identifier"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'.test-patient-summary'",
        "type": "String"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'Patient summary is displayed'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/react-cosmos/react-cosmos/blob/d01e0bd78a6b1fdadfc611a4eadaf29c119cfa9a/cypress/integration/example-local-state.js ",
    "commit": "d01e0bd78a6b1fdadfc611a4eadaf29c119cfa9a",
    "project_name": "react-cosmos",
    "project_author": "react-cosmos",
    "flaky_file": "/cypress/integration/example-local-state.js",
    "start_line": 131,
    "end_line": 139,
    "test_code": "it('should preseve state after HMR update', () => {\n  cy.get('iframe').then($iframe => {\n    $iframe[0].contentWindow.__runCosmosLoader();\n    cy\n      .wait(100) // Wait for postMessage communication to occur\n      .get('.CodeMirror-line:eq(4)')\n      .should('have.text', '        \"value\": 4');\n  });\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should preseve state after HMR update'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'iframe'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "$iframe",
        "type": "Identifier"
      },
      {
        "value": "$iframe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "contentWindow",
        "type": "Identifier"
      },
      {
        "value": "__runCosmosLoader",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.CodeMirror-line:eq(4)'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.text'",
        "type": "String"
      },
      {
        "value": "'        \"value\": 4'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/apollographql/react-apollo/blob/b81e58427b1888b6ec4286cbd910d0a529095126/test/client/Mutation.test.tsx",
    "commit": "b81e58427b1888b6ec4286cbd910d0a529095126",
    "project_name": "react-apollo",
    "project_author": "apollographql",
    "flaky_file": "/test/client/Mutation.test.tsx",
    "start_line": 1480,
    "end_line": 1525,
    "test_code": "it('calls the onCompleted prop after the mutation is complete', done => {\n  let success = false;\n  const onCompletedFn = jest.fn();\n  const checker = () => {\n    setTimeout(() => {\n      success = true;\n      expect(onCompletedFn).toHaveBeenCalledWith(data);\n      done();\n    }, 100);\n  };\n\n  class Component extends React.Component {\n    state = {\n      called: false,\n    };\n\n    render() {\n      const { called } = this.state;\n      if (called === true) {\n        return null;\n      } else {\n        return (\n          <Mutation mutation={mutation} onCompleted={onCompletedFn}>\n            {createTodo => {\n              setTimeout(() => {\n                createTodo();\n                this.setState({ called: true }, checker);\n              });\n              return null;\n            }}\n          </Mutation>\n        );\n      }\n    }\n  }\n\n  mount(\n    <MockedProvider mocks={mocks}>\n      <Component />\n    </MockedProvider>,\n  );\n\n  setTimeout(() => {\n    if (!success) done.fail('timeout passed');\n  }, 500);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'calls the onCompleted prop after the mutation is complete'",
        "type": "String"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "let",
        "type": "Keyword"
      },
      {
        "value": "success",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "onCompletedFn",
        "type": "Identifier"
      },
      {
        "value": "jest",
        "type": "Identifier"
      },
      {
        "value": "fn",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "checker",
        "type": "Identifier"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "success",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "onCompletedFn",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalledWith",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "class",
        "type": "Keyword"
      },
      {
        "value": "Component",
        "type": "Identifier"
      },
      {
        "value": "extends",
        "type": "Keyword"
      },
      {
        "value": "React",
        "type": "Identifier"
      },
      {
        "value": "Component",
        "type": "Identifier"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "render",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "state",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Mutation",
        "type": "JSXIdentifier"
      },
      {
        "value": "mutation",
        "type": "JSXIdentifier"
      },
      {
        "value": "mutation",
        "type": "Identifier"
      },
      {
        "value": "onCompleted",
        "type": "JSXIdentifier"
      },
      {
        "value": "onCompletedFn",
        "type": "Identifier"
      },
      {
        "value": "\n            ",
        "type": "JSXText"
      },
      {
        "value": "createTodo",
        "type": "Identifier"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "createTodo",
        "type": "Identifier"
      },
      {
        "value": "this",
        "type": "Keyword"
      },
      {
        "value": "setState",
        "type": "JSXIdentifier"
      },
      {
        "value": "called",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "checker",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "\n          ",
        "type": "JSXText"
      },
      {
        "value": "Mutation",
        "type": "JSXIdentifier"
      },
      {
        "value": "mount",
        "type": "Identifier"
      },
      {
        "value": "MockedProvider",
        "type": "JSXIdentifier"
      },
      {
        "value": "mocks",
        "type": "JSXIdentifier"
      },
      {
        "value": "mocks",
        "type": "Identifier"
      },
      {
        "value": "\n      ",
        "type": "JSXText"
      },
      {
        "value": "Component",
        "type": "JSXIdentifier"
      },
      {
        "value": "\n    ",
        "type": "JSXText"
      },
      {
        "value": "MockedProvider",
        "type": "JSXIdentifier"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "success",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "'timeout passed'",
        "type": "String"
      },
      {
        "value": "500",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/outline/outline/blob/b1a1d24f9c2611d4ae8631321a6ba37e754f30b0/server/api/users.test.js ",
    "commit": "b1a1d24f9c2611d4ae8631321a6ba37e754f30b0",
    "project_name": "outline",
    "project_author": "outline",
    "flaky_file": "/server/api/users.test.js",
    "start_line": 14,
    "end_line": 26,
    "test_code": "it('should return teams paginated user list', async () => {\n  const { admin, user } = await seed();\n\n  const res = await server.post('/api/users.list', {\n    body: { token: admin.getJwtToken() },\n  });\n  const body = await res.json();\n\n  expect(res.status).toEqual(200);\n  expect(body.data.length).toEqual(2);\n  expect(body.data[0].id).toEqual(user.id);\n  expect(body.data[1].id).toEqual(admin.id);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should return teams paginated user list'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "admin",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "seed",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "res",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "server",
        "type": "Identifier"
      },
      {
        "value": "post",
        "type": "Identifier"
      },
      {
        "value": "'/api/users.list'",
        "type": "String"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "token",
        "type": "Identifier"
      },
      {
        "value": "admin",
        "type": "Identifier"
      },
      {
        "value": "getJwtToken",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "res",
        "type": "Identifier"
      },
      {
        "value": "json",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "res",
        "type": "Identifier"
      },
      {
        "value": "status",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "admin",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/outline/outline/blob/b1a1d24f9c2611d4ae8631321a6ba37e754f30b0/server/api/users.test.js ",
    "commit": "b1a1d24f9c2611d4ae8631321a6ba37e754f30b0",
    "project_name": "outline",
    "project_author": "outline",
    "flaky_file": "/server/api/users.test.js",
    "start_line": 28,
    "end_line": 41,
    "test_code": "it('should require admin for detailed info', async () => {\n  const { user, admin } = await seed();\n  const res = await server.post('/api/users.list', {\n    body: { token: user.getJwtToken() },\n  });\n  const body = await res.json();\n\n  expect(res.status).toEqual(200);\n  expect(body.data.length).toEqual(2);\n  expect(body.data[0].email).toEqual(undefined);\n  expect(body.data[1].email).toEqual(undefined);\n  expect(body.data[0].id).toEqual(user.id);\n  expect(body.data[1].id).toEqual(admin.id);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should require admin for detailed info'",
        "type": "String"
      },
      {
        "value": "async",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "admin",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "seed",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "res",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "server",
        "type": "Identifier"
      },
      {
        "value": "post",
        "type": "Identifier"
      },
      {
        "value": "'/api/users.list'",
        "type": "String"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "token",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "getJwtToken",
        "type": "Identifier"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "await",
        "type": "Identifier"
      },
      {
        "value": "res",
        "type": "Identifier"
      },
      {
        "value": "json",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "res",
        "type": "Identifier"
      },
      {
        "value": "status",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "email",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "undefined",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "email",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "undefined",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "user",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "body",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "admin",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/styleguidist/react-styleguidist/blob/6c37120804561860dcf44e5d8f471fffe0b78843/test/cypress/integration/component_spec.js",
    "commit": "6c37120804561860dcf44e5d8f471fffe0b78843",
    "project_name": "react-styleguidist",
    "project_author": "styleguidist",
    "flaky_file": "/test/cypress/integration/component_spec.js",
    "start_line": 79,
    "end_line": 100,
    "test_code": "it('changes the render after code change', () => {\n\tconst codeToDelete = '</Button>';\n\tcy\n\t\t.get('@container')\n\t\t.find('.CodeMirror textarea')\n\t\t// CodeMirror actually listens to keystrokes on an empty textarea\n\t\t// to update the div with the code, so we have to hack our way\n\t\t// around it with a bunch of backspacing, since there's no way\n\t\t// to place the cursor\n\t\t.type(`${'{backspace}'.repeat(codeToDelete.length)} Harder${codeToDelete}`, {\n\t\t\tforce: true,\n\t\t});\n\n\t// Wait for CodeMirror to update\n\tcy.wait(500);\n\n\tcy\n\t\t.get('@preview')\n\t\t.find('button')\n\t\t.contains('Push Me Harder')\n\t\t.should('exist');\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'changes the render after code change'",
        "type": "String"
      },
      {
        "value": "const",
        "type": "Keyword"
      },
      {
        "value": "codeToDelete",
        "type": "Identifier"
      },
      {
        "value": "'</Button>'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@container'",
        "type": "String"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'.CodeMirror textarea'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "`${",
        "type": "Template"
      },
      {
        "value": "'{backspace}'",
        "type": "String"
      },
      {
        "value": "repeat",
        "type": "Identifier"
      },
      {
        "value": "codeToDelete",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "} Harder${",
        "type": "Template"
      },
      {
        "value": "codeToDelete",
        "type": "Identifier"
      },
      {
        "value": "}`",
        "type": "Template"
      },
      {
        "value": "force",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "wait",
        "type": "Identifier"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'@preview'",
        "type": "String"
      },
      {
        "value": "find",
        "type": "Identifier"
      },
      {
        "value": "'button'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Push Me Harder'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/influxdata/influxdb/blob/0bd62f468fb2d4edc393a51087f60103c188729b/ui/cypress/e2e/dashboardsIndex.test.ts",
    "commit": "0bd62f468fb2d4edc393a51087f60103c188729b",
    "project_name": "influxdb",
    "project_author": "influxdata",
    "flaky_file": "/ui/cypress/e2e/dashboardsIndex.test.ts",
    "start_line": 54,
    "end_line": 73,
    "test_code": "it('can create a dashboard from a Template', () => {\n  cy.getByTestID('dashboard-card').should('have.length', 0)\n  cy.get<Organization>('@org').then(({ id }) => {\n    cy.createDashboardTemplate(id)\n  })\n\n  cy.get('.page-header--container')\n    .contains('Create')\n    .click()\n\n  cy.getByTestID('dropdown--item From a Template').click()\n\n  cy.getByTestID('card-select-Bashboard-Template').click()\n\n  cy.getByTestID('template-panel').should('exist')\n\n  cy.getByTestID('create-dashboard-button').click()\n\n  cy.getByTestID('dashboard-card').should('have.length', 1)\n})\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'can create a dashboard from a Template'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'dashboard-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "Organization",
        "type": "Identifier"
      },
      {
        "value": "'@org'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "createDashboardTemplate",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "get",
        "type": "Identifier"
      },
      {
        "value": "'.page-header--container'",
        "type": "String"
      },
      {
        "value": "contains",
        "type": "Identifier"
      },
      {
        "value": "'Create'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'dropdown--item From a Template'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'card-select-Bashboard-Template'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'template-panel'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'exist'",
        "type": "String"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'create-dashboard-button'",
        "type": "String"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "cy",
        "type": "Identifier"
      },
      {
        "value": "getByTestID",
        "type": "Identifier"
      },
      {
        "value": "'dashboard-card'",
        "type": "String"
      },
      {
        "value": "should",
        "type": "Identifier"
      },
      {
        "value": "'have.length'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/667913c0796c08d03593469403a210588ba627a1/test/image/export_test.js ",
    "commit": "667913c0796c08d03593469403a210588ba627a1",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/image/export_test.js",
    "start_line": 76,
    "end_line": 84,
    "test_code": "test('testing image export formats', function (t) {\n    t.plan(mockList.length * FORMATS.length);\n\n    for (var i = 0; i < mockList.length; i++) {\n        for (var j = 0; j < FORMATS.length; j++) {\n            run(mockList[i], FORMATS[j], t);\n        }\n    }\n});\n",
    "tokens": [
      {
        "value": "test",
        "type": "Identifier"
      },
      {
        "value": "'testing image export formats'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "plan",
        "type": "Identifier"
      },
      {
        "value": "mockList",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "FORMATS",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "for",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "mockList",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "for",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "FORMATS",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "mockList",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "FORMATS",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/plotly/plotly.js/blob/44b0ae6f9e4c1c4ea79ffb67d303647ca630c78c/test/jasmine/tests/gl_plot_interact_test.js ",
    "commit": "44b0ae6f9e4c1c4ea79ffb67d303647ca630c78c",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl_plot_interact_test.js",
    "start_line": 1465,
    "end_line": 1563,
    "test_code": "it('should respond to drag interactions', function (done) {\n    var _mock = Lib.extendDeep({}, mock);\n\n    var relayoutCallback = jasmine.createSpy('relayoutCallback');\n\n    var originalX = [-0.3037383177570093, 5.303738317757009];\n    var originalY = [-0.5, 6.1];\n    var newX = [-0.5, 5];\n    var newY = [-1.7, 4.95];\n    var precision = 1;\n\n    Plotly.newPlot(gd, _mock)\n        .then(delay(20))\n        .then(function () {\n            expect(gd.layout.xaxis.autorange).toBe(true);\n            expect(gd.layout.yaxis.autorange).toBe(true);\n            expect(gd.layout.xaxis.range).toBeCloseToArray(originalX, precision);\n            expect(gd.layout.yaxis.range).toBeCloseToArray(originalY, precision);\n\n            // Switch to pan mode\n            var buttonPan = selectButton(gd._fullLayout._modeBar, 'pan2d');\n            expect(buttonPan.isActive()).toBe(false, 'initially, zoom is active');\n            buttonPan.click();\n            expect(buttonPan.isActive()).toBe(true, 'switched on dragmode');\n\n            // Switching mode must not change visible range\n            expect(gd.layout.xaxis.range).toBeCloseToArray(originalX, precision);\n            expect(gd.layout.yaxis.range).toBeCloseToArray(originalY, precision);\n        })\n        .then(delay(200))\n        .then(function () {\n            gd.on('plotly_relayout', relayoutCallback);\n        })\n        .then(function () {\n            // Drag scene along the X axis\n            return mouseTo([200, 200], [220, 200]);\n        })\n        .then(function () {\n            expect(gd.layout.xaxis.autorange).toBe(false);\n            expect(gd.layout.yaxis.autorange).toBe(false);\n            expect(gd.layout.xaxis.range).toBeCloseToArray(newX, precision);\n            expect(gd.layout.yaxis.range).toBeCloseToArray(originalY, precision);\n        })\n        .then(function () {\n            // Drag scene back along the X axis\n            return mouseTo([220, 200], [200, 200]);\n        })\n        .then(function () {\n            expect(gd.layout.xaxis.range).toBeCloseToArray(originalX, precision);\n            expect(gd.layout.yaxis.range).toBeCloseToArray(originalY, precision);\n        })\n        .then(function () {\n            // Drag scene along the Y axis\n            return mouseTo([200, 200], [200, 150]);\n        })\n        .then(function () {\n            expect(gd.layout.xaxis.range).toBeCloseToArray(originalX, precision);\n            expect(gd.layout.yaxis.range).toBeCloseToArray(newY, precision);\n        })\n        .then(function () {\n            // Drag scene back along the Y axis\n            return mouseTo([200, 150], [200, 200]);\n        })\n        .then(function () {\n            expect(gd.layout.xaxis.range).toBeCloseToArray(originalX, precision);\n            expect(gd.layout.yaxis.range).toBeCloseToArray(originalY, precision);\n        })\n        .then(function () {\n            // Drag scene along both the X and Y axis\n            return mouseTo([200, 200], [220, 150]);\n        })\n        .then(function () {\n            expect(gd.layout.xaxis.range).toBeCloseToArray(newX, precision);\n            expect(gd.layout.yaxis.range).toBeCloseToArray(newY, precision);\n        })\n        .then(function () {\n            // Drag scene back along the X and Y axis\n            return mouseTo([220, 150], [200, 200]);\n        })\n        .then(function () {\n            expect(gd.layout.xaxis.range).toBeCloseToArray(originalX, precision);\n            expect(gd.layout.yaxis.range).toBeCloseToArray(originalY, precision);\n        })\n        .then(delay(200))\n        .then(function () {\n            // callback count expectation: X and back; Y and back; XY and back\n            expect(relayoutCallback).toHaveBeenCalledTimes(6);\n\n            // a callback value structure and contents check\n            expect(relayoutCallback).toHaveBeenCalledWith(jasmine.objectContaining({\n                'xaxis.range[0]': jasmine.any(Number),\n                'xaxis.range[1]': jasmine.any(Number),\n                'yaxis.range[0]': jasmine.any(Number),\n                'yaxis.range[1]': jasmine.any(Number)\n            }));\n        })\n        .catch(fail)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should respond to drag interactions'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "relayoutCallback",
        "type": "Identifier"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "createSpy",
        "type": "Identifier"
      },
      {
        "value": "'relayoutCallback'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "originalX",
        "type": "Identifier"
      },
      {
        "value": "0.3037383177570093",
        "type": "Numeric"
      },
      {
        "value": "5.303738317757009",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "originalY",
        "type": "Identifier"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "6.1",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "newX",
        "type": "Identifier"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "newY",
        "type": "Identifier"
      },
      {
        "value": "1.7",
        "type": "Numeric"
      },
      {
        "value": "4.95",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "newPlot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "autorange",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "autorange",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalX",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalY",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "buttonPan",
        "type": "Identifier"
      },
      {
        "value": "selectButton",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_modeBar",
        "type": "Identifier"
      },
      {
        "value": "'pan2d'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "buttonPan",
        "type": "Identifier"
      },
      {
        "value": "isActive",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "'initially, zoom is active'",
        "type": "String"
      },
      {
        "value": "buttonPan",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "buttonPan",
        "type": "Identifier"
      },
      {
        "value": "isActive",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "'switched on dragmode'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalX",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalY",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "on",
        "type": "Identifier"
      },
      {
        "value": "'plotly_relayout'",
        "type": "String"
      },
      {
        "value": "relayoutCallback",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "220",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "autorange",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "autorange",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "newX",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalY",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "220",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalX",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalY",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalX",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "newY",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalX",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalY",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "220",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "newX",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "newY",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "220",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalX",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "originalY",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "relayoutCallback",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalledTimes",
        "type": "Identifier"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "relayoutCallback",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalledWith",
        "type": "Identifier"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "objectContaining",
        "type": "Identifier"
      },
      {
        "value": "'xaxis.range[0]'",
        "type": "String"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "any",
        "type": "Identifier"
      },
      {
        "value": "Number",
        "type": "Identifier"
      },
      {
        "value": "'xaxis.range[1]'",
        "type": "String"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "any",
        "type": "Identifier"
      },
      {
        "value": "Number",
        "type": "Identifier"
      },
      {
        "value": "'yaxis.range[0]'",
        "type": "String"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "any",
        "type": "Identifier"
      },
      {
        "value": "Number",
        "type": "Identifier"
      },
      {
        "value": "'yaxis.range[1]'",
        "type": "String"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "any",
        "type": "Identifier"
      },
      {
        "value": "Number",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/plotly/plotly.js/blob/44b0ae6f9e4c1c4ea79ffb67d303647ca630c78c/test/jasmine/tests/gl_plot_interact_test.js ",
    "commit": "44b0ae6f9e4c1c4ea79ffb67d303647ca630c78c",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl_plot_interact_test.js",
    "start_line": 1619,
    "end_line": 1670,
    "test_code": "it('supports 1D and 2D Zoom', function (done) {\n    var centerX;\n    var centerY;\n\n    Plotly.newPlot(gd, [{\n        type: 'scattergl', x: [1, 15], y: [1, 15]\n    }], {\n        width: 400,\n        height: 400,\n        margin: { t: 100, b: 100, l: 100, r: 100 },\n        xaxis: { range: [0, 16] },\n        yaxis: { range: [0, 16] }\n    })\n        .then(function () {\n            var bBox = gd.getBoundingClientRect();\n            centerX = bBox.left + 200;\n            centerY = bBox.top + 200;\n\n            return mouseTo([centerX, centerY], [centerX - 5, centerY + 5]);\n        })\n        .then(function () {\n            // no change - too small\n            expect(gd.layout.xaxis.range).toBeCloseToArray([0, 16], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([0, 16], 3);\n        })\n        .then(function () {\n            return mouseTo([centerX - 50, centerY], [centerX + 50, centerY + 50]);\n        })\n        .then(function () {\n            // 2D\n            expect(gd.layout.xaxis.range).toBeCloseToArray([4, 12], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([4, 8], 3);\n        })\n        .then(function () {\n            return mouseTo([centerX - 50, centerY], [centerX, centerY + 5]);\n        })\n        .then(function () {\n            // x only\n            expect(gd.layout.xaxis.range).toBeCloseToArray([6, 8], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([4, 8], 3);\n        })\n        .then(function () {\n            return mouseTo([centerX, centerY - 50], [centerX - 5, centerY + 50]);\n        })\n        .then(function () {\n            // y only\n            expect(gd.layout.xaxis.range).toBeCloseToArray([6, 8], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([5, 7], 3);\n        })\n        .catch(fail)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'supports 1D and 2D Zoom'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "newPlot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "15",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "15",
        "type": "Numeric"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "margin",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "b",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "l",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "r",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "bBox",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "bBox",
        "type": "Identifier"
      },
      {
        "value": "left",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "bBox",
        "type": "Identifier"
      },
      {
        "value": "top",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "12",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/plotly/plotly.js/blob/44b0ae6f9e4c1c4ea79ffb67d303647ca630c78c/test/jasmine/tests/gl_plot_interact_test.js ",
    "commit": "44b0ae6f9e4c1c4ea79ffb67d303647ca630c78c",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl_plot_interact_test.js",
    "start_line": 1672,
    "end_line": 1737,
    "test_code": "it('supports axis constraints with zoom', function (done) {\n    var centerX;\n    var centerY;\n\n    Plotly.newPlot(gd, [{\n        type: 'scattergl', x: [1, 15], y: [1, 15]\n    }], {\n        width: 400,\n        height: 400,\n        margin: { t: 100, b: 100, l: 100, r: 100 },\n        xaxis: { range: [0, 16] },\n        yaxis: { range: [0, 16] }\n    })\n        .then(function () {\n            var bBox = gd.getBoundingClientRect();\n            centerX = bBox.left + 200;\n            centerY = bBox.top + 200;\n\n            return Plotly.relayout(gd, {\n                'yaxis.scaleanchor': 'x',\n                'yaxis.scaleratio': 2\n            });\n        })\n        .then(function () {\n            // x range is adjusted to fit constraint\n            expect(gd.layout.xaxis.range).toBeCloseToArray([-8, 24], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([0, 16], 3);\n        })\n        .then(function () {\n            return mouseTo([centerX, centerY], [centerX - 5, centerY + 5]);\n        })\n        .then(function () {\n            // no change - too small\n            expect(gd.layout.xaxis.range).toBeCloseToArray([-8, 24], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([0, 16], 3);\n        })\n        .then(function () {\n            // now there should only be 2D zooming\n            // dy>>dx\n            return mouseTo([centerX, centerY], [centerX - 1, centerY - 50]);\n        })\n        .then(function () {\n            expect(gd.layout.xaxis.range).toBeCloseToArray([0, 8], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([8, 12], 3);\n        })\n        .then(function () {\n            return mouseTo([centerX, centerY], [centerX + 50, centerY + 1]);\n        })\n        .then(function () {\n            // dx>>dy\n            expect(gd.layout.xaxis.range).toBeCloseToArray([4, 6], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([9, 10], 3);\n        })\n        .then(function () {\n            return Plotly.relayout(gd, {\n                'xaxis.autorange': true,\n                'yaxis.autorange': true\n            });\n        })\n        .then(function () {\n            expect(gd.layout.xaxis.range).toBeCloseToArray([-7.6, 23.6], 1);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([0.2, 15.8], 1);\n        })\n        .catch(fail)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'supports axis constraints with zoom'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "newPlot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "15",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "15",
        "type": "Numeric"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "margin",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "b",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "l",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "r",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "bBox",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "bBox",
        "type": "Identifier"
      },
      {
        "value": "left",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "bBox",
        "type": "Identifier"
      },
      {
        "value": "top",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'yaxis.scaleanchor'",
        "type": "String"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "'yaxis.scaleratio'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "24",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "24",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "12",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "9",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'xaxis.autorange'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "'yaxis.autorange'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "7.6",
        "type": "Numeric"
      },
      {
        "value": "23.6",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "0.2",
        "type": "Numeric"
      },
      {
        "value": "15.8",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": " https://github.com/plotly/plotly.js/blob/44b0ae6f9e4c1c4ea79ffb67d303647ca630c78c/test/jasmine/tests/gl_plot_interact_test.js ",
    "commit": "44b0ae6f9e4c1c4ea79ffb67d303647ca630c78c",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl_plot_interact_test.js",
    "start_line": 1752,
    "end_line": 1793,
    "test_code": "it('data-referenced annotations should update on drag', function (done) {\n    function assertAnnotation(xy) {\n        var ann = d3.select('g.annotation-text-g').select('g');\n        var translate = Drawing.getTranslate(ann);\n\n        expect(translate.x).toBeWithin(xy[0], 8);\n        expect(translate.y).toBeWithin(xy[1], 8);\n    }\n\n    Plotly.newPlot(gd, [{\n        type: 'scattergl',\n        x: [1, 2, 3],\n        y: [2, 1, 2]\n    }], {\n        annotations: [{\n            x: 2,\n            y: 1,\n            text: 'text'\n        }],\n        dragmode: 'pan'\n    })\n        .then(function () {\n            assertAnnotation([327, 312]);\n        })\n        .then(function () {\n            return mouseTo([250, 200], [200, 150]);\n        })\n        .then(function () {\n            assertAnnotation([277, 262]);\n        })\n        .then(function () {\n            return Plotly.relayout(gd, {\n                'xaxis.range': [1.5, 2.5],\n                'yaxis.range': [1, 1.5]\n            });\n        })\n        .then(function () {\n            assertAnnotation([327, 331]);\n        })\n        .catch(fail)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'data-referenced annotations should update on drag'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertAnnotation",
        "type": "Identifier"
      },
      {
        "value": "xy",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "ann",
        "type": "Identifier"
      },
      {
        "value": "d3",
        "type": "Identifier"
      },
      {
        "value": "select",
        "type": "Identifier"
      },
      {
        "value": "'g.annotation-text-g'",
        "type": "String"
      },
      {
        "value": "select",
        "type": "Identifier"
      },
      {
        "value": "'g'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "translate",
        "type": "Identifier"
      },
      {
        "value": "Drawing",
        "type": "Identifier"
      },
      {
        "value": "getTranslate",
        "type": "Identifier"
      },
      {
        "value": "ann",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "translate",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBeWithin",
        "type": "Identifier"
      },
      {
        "value": "xy",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "translate",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBeWithin",
        "type": "Identifier"
      },
      {
        "value": "xy",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "newPlot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "annotations",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "'text'",
        "type": "String"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'pan'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertAnnotation",
        "type": "Identifier"
      },
      {
        "value": "327",
        "type": "Numeric"
      },
      {
        "value": "312",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertAnnotation",
        "type": "Identifier"
      },
      {
        "value": "277",
        "type": "Numeric"
      },
      {
        "value": "262",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'xaxis.range'",
        "type": "String"
      },
      {
        "value": "1.5",
        "type": "Numeric"
      },
      {
        "value": "2.5",
        "type": "Numeric"
      },
      {
        "value": "'yaxis.range'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1.5",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertAnnotation",
        "type": "Identifier"
      },
      {
        "value": "327",
        "type": "Numeric"
      },
      {
        "value": "331",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/a2fc07a187c4d26bf2f1bcb3e2aa806b75ad24fc/test/jasmine/tests/select_test.js",
    "commit": "a2fc07a187c4d26bf2f1bcb3e2aa806b75ad24fc",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/select_test.js",
    "start_line": 557,
    "end_line": 1344,
    "test_code": "describe('@flaky Test select box and lasso per trace:', function () {\n    var gd;\n\n    beforeEach(function () {\n        gd = createGraphDiv();\n    });\n\n    afterEach(destroyGraphDiv);\n\n    function makeAssertPoints(keys) {\n        var callNumber = 0;\n\n        return function (expected) {\n            var msg = '(call #' + callNumber + ') ';\n            var pts = (selectedData || {}).points || [];\n\n            expect(pts.length).toBe(expected.length, msg + 'selected points length');\n\n            pts.forEach(function (p, i) {\n                var e = expected[i] || [];\n                keys.forEach(function (k, j) {\n                    var msgFull = msg + 'selected pt ' + i + ' - ' + k + ' val';\n\n                    if (typeof e[j] === 'number') {\n                        expect(p[k]).toBeCloseTo(e[j], 1, msgFull);\n                    } else if (Array.isArray(e[j])) {\n                        expect(p[k]).toBeCloseToArray(e[j], 1, msgFull);\n                    } else {\n                        expect(p[k]).toBe(e[j], msgFull);\n                    }\n                });\n            });\n\n            callNumber++;\n        };\n    }\n\n    function makeAssertSelectedPoints() {\n        var callNumber = 0;\n\n        return function (expected) {\n            var msg = '(call #' + callNumber + ') ';\n\n            gd.data.forEach(function (trace, i) {\n                var msgFull = msg + 'selectedpoints array for trace ' + i;\n                var actual = trace.selectedpoints;\n\n                if (expected[i]) {\n                    expect(actual).toBeCloseToArray(expected[i], 1, msgFull);\n                } else {\n                    expect(actual).toBe(undefined, 1, msgFull);\n                }\n            });\n\n            callNumber++;\n        };\n    }\n\n    function makeAssertRanges(subplot, tol) {\n        tol = tol || 1;\n        var callNumber = 0;\n\n        return function (expected) {\n            var msg = '(call #' + callNumber + ') select box range ';\n            var ranges = selectedData.range || {};\n\n            if (subplot) {\n                expect(ranges[subplot] || [])\n                    .toBeCloseTo2DArray(expected, tol, msg + 'for ' + subplot);\n            } else {\n                expect(ranges.x || [])\n                    .toBeCloseToArray(expected[0], tol, msg + 'x coords');\n                expect(ranges.y || [])\n                    .toBeCloseToArray(expected[1], tol, msg + 'y coords');\n            }\n\n            callNumber++;\n        };\n    }\n\n    function makeAssertLassoPoints(subplot, tol) {\n        tol = tol || 1;\n        var callNumber = 0;\n\n        return function (expected) {\n            var msg = '(call #' + callNumber + ') lasso points ';\n            var lassoPoints = selectedData.lassoPoints || {};\n\n            if (subplot) {\n                expect(lassoPoints[subplot] || [])\n                    .toBeCloseTo2DArray(expected, tol, msg + 'for ' + subplot);\n            } else {\n                expect(lassoPoints.x || [])\n                    .toBeCloseToArray(expected[0], tol, msg + 'x coords');\n                expect(lassoPoints.y || [])\n                    .toBeCloseToArray(expected[1], tol, msg + 'y coords');\n            }\n\n            callNumber++;\n        };\n    }\n\n    function _run(dragPath, afterDragFn, dblClickPos, eventCounts, msg) {\n        afterDragFn = afterDragFn || function () { };\n        dblClickPos = dblClickPos || [250, 200];\n\n        resetEvents(gd);\n\n        assertSelectionNodes(0, 0);\n        drag(dragPath);\n\n        return (eventCounts[0] ? selectedPromise : Promise.resolve())\n            .then(afterDragFn)\n            .then(function () {\n                // TODO: in v2 when we remove the `plotly_selecting->undefined` the Math.max(...)\n                // in the middle here will turn into just eventCounts[1].\n                // It's just here because one of the selected events is generated during\n                // doubleclick so hasn't happened yet when we're testing this.\n                assertEventCounts(eventCounts[0], Math.max(0, eventCounts[1] - 1), 0, msg + ' (before dblclick)');\n                return doubleClick(dblClickPos[0], dblClickPos[1]);\n            })\n            .then(eventCounts[2] ? deselectPromise : Promise.resolve())\n            .then(function () {\n                assertEventCounts(eventCounts[0], eventCounts[1], eventCounts[2], msg + ' (after dblclick)');\n            });\n    }\n\n    it('should work on scatterternary traces', function (done) {\n        var assertPoints = makeAssertPoints(['a', 'b', 'c']);\n        var assertSelectedPoints = makeAssertSelectedPoints();\n\n        var fig = Lib.extendDeep({}, require('@mocks/ternary_simple'));\n        fig.layout.width = 800;\n        fig.layout.dragmode = 'select';\n        addInvisible(fig);\n\n        Plotly.plot(gd, fig).then(function () {\n            return _run(\n                [[400, 200], [445, 235]],\n                function () {\n                    assertPoints([[0.5, 0.25, 0.25]]);\n                    assertSelectedPoints({ 0: [0] });\n                },\n                [380, 180],\n                BOXEVENTS, 'scatterternary select'\n            );\n        })\n            .then(function () {\n                return Plotly.relayout(gd, 'dragmode', 'lasso');\n            })\n            .then(function () {\n                return _run(\n                    [[400, 200], [445, 200], [445, 235], [400, 235], [400, 200]],\n                    function () {\n                        assertPoints([[0.5, 0.25, 0.25]]);\n                        assertSelectedPoints({ 0: [0] });\n                    },\n                    [380, 180],\n                    LASSOEVENTS, 'scatterternary lasso'\n                );\n            })\n            .then(function () {\n                // should work after a relayout too\n                return Plotly.relayout(gd, 'width', 400);\n            })\n            .then(function () {\n                return _run(\n                    [[200, 200], [230, 200], [230, 230], [200, 230], [200, 200]],\n                    function () {\n                        assertPoints([[0.5, 0.25, 0.25]]);\n                        assertSelectedPoints({ 0: [0] });\n                    },\n                    [180, 180],\n                    LASSOEVENTS, 'scatterternary lasso after relayout'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should work on scattercarpet traces', function (done) {\n        var assertPoints = makeAssertPoints(['a', 'b']);\n        var assertSelectedPoints = makeAssertSelectedPoints();\n\n        var fig = Lib.extendDeep({}, require('@mocks/scattercarpet'));\n        delete fig.data[6].selectedpoints;\n        fig.layout.dragmode = 'select';\n        addInvisible(fig);\n\n        Plotly.plot(gd, fig).then(function () {\n            return _run(\n                [[300, 200], [400, 250]],\n                function () {\n                    assertPoints([[0.2, 1.5]]);\n                    assertSelectedPoints({ 1: [], 2: [], 3: [], 4: [], 5: [1], 6: [] });\n                },\n                null, BOXEVENTS, 'scattercarpet select'\n            );\n        })\n            .then(function () {\n                return Plotly.relayout(gd, 'dragmode', 'lasso');\n            })\n            .then(function () {\n                return _run(\n                    [[300, 200], [400, 200], [400, 250], [300, 250], [300, 200]],\n                    function () {\n                        assertPoints([[0.2, 1.5]]);\n                        assertSelectedPoints({ 1: [], 2: [], 3: [], 4: [], 5: [1], 6: [] });\n                    },\n                    null, LASSOEVENTS, 'scattercarpet lasso'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    });\n\n    it('@noCI should work on scattermapbox traces', function (done) {\n        var assertPoints = makeAssertPoints(['lon', 'lat']);\n        var assertRanges = makeAssertRanges('mapbox');\n        var assertLassoPoints = makeAssertLassoPoints('mapbox');\n        var assertSelectedPoints = makeAssertSelectedPoints();\n\n        var fig = Lib.extendDeep({}, require('@mocks/mapbox_bubbles-text'));\n        fig.layout.dragmode = 'select';\n        fig.config = {\n            mapboxAccessToken: require('@build/credentials.json').MAPBOX_ACCESS_TOKEN\n        };\n        addInvisible(fig);\n\n        Plotly.plot(gd, fig).then(function () {\n            return _run(\n                [[370, 120], [500, 200]],\n                function () {\n                    assertPoints([[30, 30]]);\n                    assertRanges([[21.99, 34.55], [38.14, 25.98]]);\n                    assertSelectedPoints({ 0: [2] });\n                },\n                null, BOXEVENTS, 'scattermapbox select'\n            );\n        })\n            .then(function () {\n                return Plotly.relayout(gd, 'dragmode', 'lasso');\n            })\n            .then(function () {\n                return _run(\n                    [[300, 200], [300, 300], [400, 300], [400, 200], [300, 200]],\n                    function () {\n                        assertPoints([[20, 20]]);\n                        assertSelectedPoints({ 0: [1] });\n                        assertLassoPoints([\n                            [13.28, 25.97], [13.28, 14.33], [25.71, 14.33], [25.71, 25.97], [13.28, 25.97]\n                        ]);\n                    },\n                    null, LASSOEVENTS, 'scattermapbox lasso'\n                );\n            })\n            .then(function () {\n                // make selection handlers don't get called in 'pan' dragmode\n                return Plotly.relayout(gd, 'dragmode', 'pan');\n            })\n            .then(function () {\n                return _run(\n                    [[370, 120], [500, 200]], null, null, NOEVENTS, 'scattermapbox pan'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    }, LONG_TIMEOUT_INTERVAL);\n\n    it('should work on scattergeo traces', function (done) {\n        var assertPoints = makeAssertPoints(['lon', 'lat']);\n        var assertSelectedPoints = makeAssertSelectedPoints();\n        var assertRanges = makeAssertRanges('geo');\n        var assertLassoPoints = makeAssertLassoPoints('geo');\n\n        var fig = {\n            data: [{\n                type: 'scattergeo',\n                lon: [10, 20, 30],\n                lat: [10, 20, 30]\n            }, {\n                type: 'scattergeo',\n                lon: [-10, -20, -30],\n                lat: [10, 20, 30]\n            }],\n            layout: {\n                showlegend: false,\n                dragmode: 'select',\n                width: 800,\n                height: 600\n            }\n        };\n        addInvisible(fig);\n\n        Plotly.plot(gd, fig)\n            .then(function () {\n                return _run(\n                    [[350, 200], [450, 400]],\n                    function () {\n                        assertPoints([[10, 10], [20, 20], [-10, 10], [-20, 20]]);\n                        assertSelectedPoints({ 0: [0, 1], 1: [0, 1] });\n                        assertRanges([[-28.13, 61.88], [28.13, -50.64]]);\n                    },\n                    null, BOXEVENTS, 'scattergeo select'\n                );\n            })\n            .then(function () {\n                return Plotly.relayout(gd, 'dragmode', 'lasso');\n            })\n            .then(function () {\n                return _run(\n                    [[300, 200], [300, 300], [400, 300], [400, 200], [300, 200]],\n                    function () {\n                        assertPoints([[-10, 10], [-20, 20], [-30, 30]]);\n                        assertSelectedPoints({ 0: [], 1: [0, 1, 2] });\n                        assertLassoPoints([\n                            [-56.25, 61.88], [-56.24, 5.63], [0, 5.63], [0, 61.88], [-56.25, 61.88]\n                        ]);\n                    },\n                    null, LASSOEVENTS, 'scattergeo lasso'\n                );\n            })\n            .then(function () {\n                // make sure selection handlers don't get called in 'pan' dragmode\n                return Plotly.relayout(gd, 'dragmode', 'pan');\n            })\n            .then(function () {\n                return _run(\n                    [[370, 120], [500, 200]], null, null, NOEVENTS, 'scattergeo pan'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    }, LONG_TIMEOUT_INTERVAL);\n\n    it('should work on scatterpolar traces', function (done) {\n        var assertPoints = makeAssertPoints(['r', 'theta']);\n        var assertSelectedPoints = makeAssertSelectedPoints();\n\n        var fig = Lib.extendDeep({}, require('@mocks/polar_subplots'));\n        fig.layout.width = 800;\n        fig.layout.dragmode = 'select';\n        addInvisible(fig);\n\n        Plotly.plot(gd, fig).then(function () {\n            return _run(\n                [[150, 150], [350, 250]],\n                function () {\n                    assertPoints([[1, 0], [2, 45]]);\n                    assertSelectedPoints({ 0: [0, 1] });\n                },\n                [200, 200],\n                BOXEVENTS, 'scatterpolar select'\n            );\n        })\n            .then(function () {\n                return Plotly.relayout(gd, 'dragmode', 'lasso');\n            })\n            .then(function () {\n                return _run(\n                    [[150, 150], [350, 150], [350, 250], [150, 250], [150, 150]],\n                    function () {\n                        assertPoints([[1, 0], [2, 45]]);\n                        assertSelectedPoints({ 0: [0, 1] });\n                    },\n                    [200, 200],\n                    LASSOEVENTS, 'scatterpolar lasso'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should work on choropleth traces', function (done) {\n        var assertPoints = makeAssertPoints(['location', 'z']);\n        var assertSelectedPoints = makeAssertSelectedPoints();\n        var assertRanges = makeAssertRanges('geo', -0.5);\n        var assertLassoPoints = makeAssertLassoPoints('geo', -0.5);\n\n        var fig = Lib.extendDeep({}, require('@mocks/geo_choropleth-text'));\n        fig.layout.width = 870;\n        fig.layout.height = 450;\n        fig.layout.dragmode = 'select';\n        fig.layout.geo.scope = 'europe';\n        addInvisible(fig, false);\n\n        // add a trace with no locations which will then make trace invisible, lacking DOM elements\n        var emptyChoroplethTrace = Lib.extendDeep({}, fig.data[0]);\n        emptyChoroplethTrace.text = [];\n        emptyChoroplethTrace.locations = [];\n        emptyChoroplethTrace.z = [];\n        fig.data.push(emptyChoroplethTrace);\n\n        Plotly.plot(gd, fig)\n            .then(function () {\n                return _run(\n                    [[350, 200], [400, 250]],\n                    function () {\n                        assertPoints([['GBR', 26.507354205352502], ['IRL', 86.4125147625692]]);\n                        assertSelectedPoints({ 0: [43, 54] });\n                        assertRanges([[-19.11, 63.06], [7.31, 53.72]]);\n                    },\n                    [280, 190],\n                    BOXEVENTS, 'choropleth select'\n                );\n            })\n            .then(function () {\n                return Plotly.relayout(gd, 'dragmode', 'lasso');\n            })\n            .then(function () {\n                return _run(\n                    [[350, 200], [400, 200], [400, 250], [350, 250], [350, 200]],\n                    function () {\n                        assertPoints([['GBR', 26.507354205352502], ['IRL', 86.4125147625692]]);\n                        assertSelectedPoints({ 0: [43, 54] });\n                        assertLassoPoints([\n                            [-19.11, 63.06], [5.50, 65.25], [7.31, 53.72], [-12.90, 51.70], [-19.11, 63.06]\n                        ]);\n                    },\n                    [280, 190],\n                    LASSOEVENTS, 'choropleth lasso'\n                );\n            })\n            .then(function () {\n                // make selection handlers don't get called in 'pan' dragmode\n                return Plotly.relayout(gd, 'dragmode', 'pan');\n            })\n            .then(function () {\n                return _run(\n                    [[370, 120], [500, 200]], null, [280, 190], NOEVENTS, 'choropleth pan'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    }, LONG_TIMEOUT_INTERVAL);\n\n    it('should work for bar traces', function (done) {\n        var assertPoints = makeAssertPoints(['curveNumber', 'x', 'y']);\n        var assertSelectedPoints = makeAssertSelectedPoints();\n        var assertRanges = makeAssertRanges();\n        var assertLassoPoints = makeAssertLassoPoints();\n\n        var fig = Lib.extendDeep({}, require('@mocks/0'));\n        fig.layout.dragmode = 'lasso';\n        addInvisible(fig);\n\n        Plotly.plot(gd, fig)\n            .then(function () {\n                return _run(\n                    [[350, 200], [400, 200], [400, 250], [350, 250], [350, 200]],\n                    function () {\n                        assertPoints([\n                            [0, 4.9, 0.371], [0, 5, 0.368], [0, 5.1, 0.356], [0, 5.2, 0.336],\n                            [0, 5.3, 0.309], [0, 5.4, 0.275], [0, 5.5, 0.235], [0, 5.6, 0.192],\n                            [0, 5.7, 0.145],\n                            [1, 5.1, 0.485], [1, 5.2, 0.409], [1, 5.3, 0.327],\n                            [1, 5.4, 0.24], [1, 5.5, 0.149], [1, 5.6, 0.059],\n                            [2, 4.9, 0.473], [2, 5, 0.368], [2, 5.1, 0.258],\n                            [2, 5.2, 0.146], [2, 5.3, 0.036]\n                        ]);\n                        assertSelectedPoints({\n                            0: [49, 50, 51, 52, 53, 54, 55, 56, 57],\n                            1: [51, 52, 53, 54, 55, 56],\n                            2: [49, 50, 51, 52, 53]\n                        });\n                        assertLassoPoints([\n                            [4.87, 5.74, 5.74, 4.87, 4.87],\n                            [0.53, 0.53, -0.02, -0.02, 0.53]\n                        ]);\n                    },\n                    null, LASSOEVENTS, 'bar lasso'\n                );\n            })\n            .then(function () {\n                return Plotly.relayout(gd, 'dragmode', 'select');\n            })\n            .then(function () {\n                // For some reason we need this to make the following tests pass\n                // on CI consistently. It appears that a double-click action\n                // is being confused with a mere click. See\n                // https://github.com/plotly/plotly.js/pull/2135#discussion_r148897529\n                // for more info.\n                return new Promise(function (resolve) {\n                    setTimeout(resolve, 100);\n                });\n            })\n            .then(function () {\n                return _run(\n                    [[350, 200], [370, 220]],\n                    function () {\n                        assertPoints([\n                            [0, 4.9, 0.371], [0, 5, 0.368], [0, 5.1, 0.356], [0, 5.2, 0.336],\n                            [1, 5.1, 0.485], [1, 5.2, 0.41],\n                            [2, 4.9, 0.473], [2, 5, 0.37]\n                        ]);\n                        assertSelectedPoints({\n                            0: [49, 50, 51, 52],\n                            1: [51, 52],\n                            2: [49, 50]\n                        });\n                        assertRanges([[4.87, 5.22], [0.31, 0.53]]);\n                    },\n                    null, BOXEVENTS, 'bar select'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should work for date/category traces', function (done) {\n        var assertPoints = makeAssertPoints(['curveNumber', 'x', 'y']);\n        var assertSelectedPoints = makeAssertSelectedPoints();\n\n        var fig = {\n            data: [{\n                x: ['2017-01-01', '2017-02-01', '2017-03-01'],\n                y: ['a', 'b', 'c']\n            }, {\n                type: 'bar',\n                x: ['2017-01-01', '2017-02-02', '2017-03-01'],\n                y: ['a', 'b', 'c']\n            }],\n            layout: {\n                dragmode: 'lasso',\n                width: 400,\n                height: 400\n            }\n        };\n        addInvisible(fig);\n\n        var x0 = 100;\n        var y0 = 100;\n        var x1 = 250;\n        var y1 = 250;\n\n        Plotly.plot(gd, fig)\n            .then(function () {\n                return _run(\n                    [[x0, y0], [x1, y0], [x1, y1], [x0, y1], [x0, y0]],\n                    function () {\n                        assertPoints([\n                            [0, '2017-02-01', 'b'],\n                            [1, '2017-02-02', 'b']\n                        ]);\n                        assertSelectedPoints({ 0: [1], 1: [1] });\n                    },\n                    null, LASSOEVENTS, 'date/category lasso'\n                );\n            })\n            .then(function () {\n                return Plotly.relayout(gd, 'dragmode', 'select');\n            })\n            .then(function () {\n                return _run(\n                    [[x0, y0], [x1, y1]],\n                    function () {\n                        assertPoints([\n                            [0, '2017-02-01', 'b'],\n                            [1, '2017-02-02', 'b']\n                        ]);\n                        assertSelectedPoints({ 0: [1], 1: [1] });\n                    },\n                    null, BOXEVENTS, 'date/category select'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should work for histogram traces', function (done) {\n        var assertPoints = makeAssertPoints(['curveNumber', 'x', 'y', 'pointIndices']);\n        var assertSelectedPoints = makeAssertSelectedPoints();\n        var assertRanges = makeAssertRanges();\n        var assertLassoPoints = makeAssertLassoPoints();\n\n        var fig = Lib.extendDeep({}, require('@mocks/hist_grouped'));\n        fig.layout.dragmode = 'lasso';\n        fig.layout.width = 600;\n        fig.layout.height = 500;\n        addInvisible(fig);\n\n        Plotly.plot(gd, fig)\n            .then(function () {\n                return _run(\n                    [[200, 200], [400, 200], [400, 350], [200, 350], [200, 200]],\n                    function () {\n                        assertPoints([\n                            [0, 1.8, 2, [3, 4]], [1, 2.2, 1, [1]], [1, 3.2, 1, [2]]\n                        ]);\n                        assertSelectedPoints({ 0: [3, 4], 1: [1, 2] });\n                        assertLassoPoints([\n                            [1.66, 3.59, 3.59, 1.66, 1.66],\n                            [2.17, 2.17, 0.69, 0.69, 2.17]\n                        ]);\n                    },\n                    null, LASSOEVENTS, 'histogram lasso'\n                );\n            })\n            .then(function () {\n                return Plotly.relayout(gd, 'dragmode', 'select');\n            })\n            .then(function () {\n                return _run(\n                    [[200, 200], [400, 350]],\n                    function () {\n                        assertPoints([\n                            [0, 1.8, 2, [3, 4]], [1, 2.2, 1, [1]], [1, 3.2, 1, [2]]\n                        ]);\n                        assertSelectedPoints({ 0: [3, 4], 1: [1, 2] });\n                        assertRanges([[1.66, 3.59], [0.69, 2.17]]);\n                    },\n                    null, BOXEVENTS, 'histogram select'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should work for box traces', function (done) {\n        var assertPoints = makeAssertPoints(['curveNumber', 'y', 'x']);\n        var assertSelectedPoints = makeAssertSelectedPoints();\n        var assertRanges = makeAssertRanges();\n        var assertLassoPoints = makeAssertLassoPoints();\n\n        var fig = Lib.extendDeep({}, require('@mocks/box_grouped'));\n        fig.data.forEach(function (trace) {\n            trace.boxpoints = 'all';\n        });\n        fig.layout.dragmode = 'lasso';\n        fig.layout.width = 600;\n        fig.layout.height = 500;\n        addInvisible(fig);\n\n        Plotly.plot(gd, fig)\n            .then(function () {\n                return _run(\n                    [[200, 200], [400, 200], [400, 350], [200, 350], [200, 200]],\n                    function () {\n                        assertPoints([\n                            [0, 0.2, 'day 2'], [0, 0.3, 'day 2'], [0, 0.5, 'day 2'], [0, 0.7, 'day 2'],\n                            [1, 0.2, 'day 2'], [1, 0.5, 'day 2'], [1, 0.7, 'day 2'], [1, 0.7, 'day 2'],\n                            [2, 0.3, 'day 1'], [2, 0.6, 'day 1'], [2, 0.6, 'day 1']\n                        ]);\n                        assertSelectedPoints({\n                            0: [6, 11, 10, 7],\n                            1: [11, 8, 6, 10],\n                            2: [1, 4, 5]\n                        });\n                        assertLassoPoints([\n                            ['day 1', 'day 2', 'day 2', 'day 1', 'day 1'],\n                            [0.71, 0.71, 0.1875, 0.1875, 0.71]\n                        ]);\n                    },\n                    null, LASSOEVENTS, 'box lasso'\n                );\n            })\n            .then(function () {\n                return Plotly.relayout(gd, 'dragmode', 'select');\n            })\n            .then(function () {\n                return _run(\n                    [[200, 200], [400, 350]],\n                    function () {\n                        assertPoints([\n                            [0, 0.2, 'day 2'], [0, 0.3, 'day 2'], [0, 0.5, 'day 2'], [0, 0.7, 'day 2'],\n                            [1, 0.2, 'day 2'], [1, 0.5, 'day 2'], [1, 0.7, 'day 2'], [1, 0.7, 'day 2'],\n                            [2, 0.3, 'day 1'], [2, 0.6, 'day 1'], [2, 0.6, 'day 1']\n                        ]);\n                        assertSelectedPoints({\n                            0: [6, 11, 10, 7],\n                            1: [11, 8, 6, 10],\n                            2: [1, 4, 5]\n                        });\n                        assertRanges([['day 1', 'day 2'], [0.1875, 0.71]]);\n                    },\n                    null, BOXEVENTS, 'box select'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should work for violin traces', function (done) {\n        var assertPoints = makeAssertPoints(['curveNumber', 'y', 'x']);\n        var assertSelectedPoints = makeAssertSelectedPoints();\n        var assertRanges = makeAssertRanges();\n        var assertLassoPoints = makeAssertLassoPoints();\n\n        var fig = Lib.extendDeep({}, require('@mocks/violin_grouped'));\n        fig.layout.dragmode = 'lasso';\n        fig.layout.width = 600;\n        fig.layout.height = 500;\n        addInvisible(fig);\n\n        Plotly.plot(gd, fig)\n            .then(function () {\n                return _run(\n                    [[200, 200], [400, 200], [400, 350], [200, 350], [200, 200]],\n                    function () {\n                        assertPoints([\n                            [0, 0.3, 'day 2'], [0, 0.5, 'day 2'], [0, 0.7, 'day 2'], [0, 0.9, 'day 2'],\n                            [1, 0.5, 'day 2'], [1, 0.7, 'day 2'], [1, 0.7, 'day 2'], [1, 0.8, 'day 2'],\n                            [1, 0.9, 'day 2'],\n                            [2, 0.3, 'day 1'], [2, 0.6, 'day 1'], [2, 0.6, 'day 1'], [2, 0.9, 'day 1']\n                        ]);\n                        assertSelectedPoints({\n                            0: [11, 10, 7, 8],\n                            1: [8, 6, 10, 9, 7],\n                            2: [1, 4, 5, 3]\n                        });\n                        assertLassoPoints([\n                            ['day 1', 'day 2', 'day 2', 'day 1', 'day 1'],\n                            [1.02, 1.02, 0.27, 0.27, 1.02]\n                        ]);\n                    },\n                    null, LASSOEVENTS, 'violin lasso'\n                );\n            })\n            .then(function () {\n                return Plotly.relayout(gd, 'dragmode', 'select');\n            })\n            .then(function () {\n                return _run(\n                    [[200, 200], [400, 350]],\n                    function () {\n                        assertPoints([\n                            [0, 0.3, 'day 2'], [0, 0.5, 'day 2'], [0, 0.7, 'day 2'], [0, 0.9, 'day 2'],\n                            [1, 0.5, 'day 2'], [1, 0.7, 'day 2'], [1, 0.7, 'day 2'], [1, 0.8, 'day 2'],\n                            [1, 0.9, 'day 2'],\n                            [2, 0.3, 'day 1'], [2, 0.6, 'day 1'], [2, 0.6, 'day 1'], [2, 0.9, 'day 1']\n                        ]);\n                        assertSelectedPoints({\n                            0: [11, 10, 7, 8],\n                            1: [8, 6, 10, 9, 7],\n                            2: [1, 4, 5, 3]\n                        });\n                        assertRanges([['day 1', 'day 2'], [0.27, 1.02]]);\n                    },\n                    null, BOXEVENTS, 'violin select'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should work on traces with enabled transforms', function (done) {\n        var assertSelectedPoints = makeAssertSelectedPoints();\n\n        Plotly.plot(gd, [{\n            x: [1, 2, 3, 4, 5],\n            y: [2, 3, 1, 7, 9],\n            marker: { size: [10, 20, 20, 20, 10] },\n            transforms: [{\n                type: 'filter',\n                operation: '>',\n                value: 2,\n                target: 'y'\n            }, {\n                type: 'aggregate',\n                groups: 'marker.size',\n                aggregations: [\n                    // 20: 6, 10: 5\n                    { target: 'x', func: 'sum' },\n                    // 20: 5, 10: 9\n                    { target: 'y', func: 'avg' }\n                ]\n            }]\n        }], {\n            dragmode: 'select',\n            showlegend: false,\n            width: 400,\n            height: 400,\n            margin: { l: 0, t: 0, r: 0, b: 0 }\n        })\n            .then(function () {\n                return _run(\n                    [[5, 5], [395, 395]],\n                    function () {\n                        assertSelectedPoints({ 0: [1, 3, 4] });\n                    },\n                    [380, 180],\n                    BOXEVENTS, 'transformed trace select (all points selected)'\n                );\n            })\n            .catch(fail)\n            .then(done);\n    });\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'@flaky Test select box and lasso per trace:'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "createGraphDiv",
        "type": "Identifier"
      },
      {
        "value": "afterEach",
        "type": "Identifier"
      },
      {
        "value": "destroyGraphDiv",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "keys",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'(call #'",
        "type": "String"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "') '",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "pts",
        "type": "Identifier"
      },
      {
        "value": "selectedData",
        "type": "Identifier"
      },
      {
        "value": "points",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "pts",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'selected points length'",
        "type": "String"
      },
      {
        "value": "pts",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "p",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "e",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "keys",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "k",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "msgFull",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'selected pt '",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "' - '",
        "type": "String"
      },
      {
        "value": "k",
        "type": "Identifier"
      },
      {
        "value": "' val'",
        "type": "String"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "typeof",
        "type": "Keyword"
      },
      {
        "value": "e",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "'number'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "p",
        "type": "Identifier"
      },
      {
        "value": "k",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseTo",
        "type": "Identifier"
      },
      {
        "value": "e",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "msgFull",
        "type": "Identifier"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "Array",
        "type": "Identifier"
      },
      {
        "value": "isArray",
        "type": "Identifier"
      },
      {
        "value": "e",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "p",
        "type": "Identifier"
      },
      {
        "value": "k",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "e",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "msgFull",
        "type": "Identifier"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "p",
        "type": "Identifier"
      },
      {
        "value": "k",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "e",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "msgFull",
        "type": "Identifier"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'(call #'",
        "type": "String"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "') '",
        "type": "String"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "trace",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "msgFull",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'selectedpoints array for trace '",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "trace",
        "type": "Identifier"
      },
      {
        "value": "selectedpoints",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "msgFull",
        "type": "Identifier"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "undefined",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "msgFull",
        "type": "Identifier"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "makeAssertRanges",
        "type": "Identifier"
      },
      {
        "value": "subplot",
        "type": "Identifier"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'(call #'",
        "type": "String"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "') select box range '",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "ranges",
        "type": "Identifier"
      },
      {
        "value": "selectedData",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "subplot",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "ranges",
        "type": "Identifier"
      },
      {
        "value": "subplot",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseTo2DArray",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'for '",
        "type": "String"
      },
      {
        "value": "subplot",
        "type": "Identifier"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "ranges",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'x coords'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "ranges",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'y coords'",
        "type": "String"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "makeAssertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "subplot",
        "type": "Identifier"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'(call #'",
        "type": "String"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "') lasso points '",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "lassoPoints",
        "type": "Identifier"
      },
      {
        "value": "selectedData",
        "type": "Identifier"
      },
      {
        "value": "lassoPoints",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "subplot",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "lassoPoints",
        "type": "Identifier"
      },
      {
        "value": "subplot",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseTo2DArray",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'for '",
        "type": "String"
      },
      {
        "value": "subplot",
        "type": "Identifier"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "lassoPoints",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'x coords'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "lassoPoints",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "tol",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'y coords'",
        "type": "String"
      },
      {
        "value": "callNumber",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "dragPath",
        "type": "Identifier"
      },
      {
        "value": "afterDragFn",
        "type": "Identifier"
      },
      {
        "value": "dblClickPos",
        "type": "Identifier"
      },
      {
        "value": "eventCounts",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "afterDragFn",
        "type": "Identifier"
      },
      {
        "value": "afterDragFn",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "dblClickPos",
        "type": "Identifier"
      },
      {
        "value": "dblClickPos",
        "type": "Identifier"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "resetEvents",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "assertSelectionNodes",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "dragPath",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "eventCounts",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "selectedPromise",
        "type": "Identifier"
      },
      {
        "value": "Promise",
        "type": "Identifier"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "afterDragFn",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertEventCounts",
        "type": "Identifier"
      },
      {
        "value": "eventCounts",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "max",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "eventCounts",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "' (before dblclick)'",
        "type": "String"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "doubleClick",
        "type": "Identifier"
      },
      {
        "value": "dblClickPos",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dblClickPos",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "eventCounts",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "deselectPromise",
        "type": "Identifier"
      },
      {
        "value": "Promise",
        "type": "Identifier"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertEventCounts",
        "type": "Identifier"
      },
      {
        "value": "eventCounts",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "eventCounts",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "eventCounts",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "' (after dblclick)'",
        "type": "String"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should work on scatterternary traces'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "'a'",
        "type": "String"
      },
      {
        "value": "'b'",
        "type": "String"
      },
      {
        "value": "'c'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/ternary_simple'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "addInvisible",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "445",
        "type": "Numeric"
      },
      {
        "value": "235",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "0.25",
        "type": "Numeric"
      },
      {
        "value": "0.25",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "380",
        "type": "Numeric"
      },
      {
        "value": "180",
        "type": "Numeric"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scatterternary select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "445",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "445",
        "type": "Numeric"
      },
      {
        "value": "235",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "235",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "0.25",
        "type": "Numeric"
      },
      {
        "value": "0.25",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "380",
        "type": "Numeric"
      },
      {
        "value": "180",
        "type": "Numeric"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scatterternary lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'width'",
        "type": "String"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "230",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "230",
        "type": "Numeric"
      },
      {
        "value": "230",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "230",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "0.25",
        "type": "Numeric"
      },
      {
        "value": "0.25",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "180",
        "type": "Numeric"
      },
      {
        "value": "180",
        "type": "Numeric"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scatterternary lasso after relayout'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should work on scattercarpet traces'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "'a'",
        "type": "String"
      },
      {
        "value": "'b'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/scattercarpet'",
        "type": "String"
      },
      {
        "value": "delete",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "selectedpoints",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "addInvisible",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0.2",
        "type": "Numeric"
      },
      {
        "value": "1.5",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scattercarpet select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0.2",
        "type": "Numeric"
      },
      {
        "value": "1.5",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scattercarpet lasso'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@noCI should work on scattermapbox traces'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "'lon'",
        "type": "String"
      },
      {
        "value": "'lat'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "makeAssertRanges",
        "type": "Identifier"
      },
      {
        "value": "'mapbox'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "'mapbox'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/mapbox_bubbles-text'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "config",
        "type": "Identifier"
      },
      {
        "value": "mapboxAccessToken",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@build/credentials.json'",
        "type": "String"
      },
      {
        "value": "MAPBOX_ACCESS_TOKEN",
        "type": "Identifier"
      },
      {
        "value": "addInvisible",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "370",
        "type": "Numeric"
      },
      {
        "value": "120",
        "type": "Numeric"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "21.99",
        "type": "Numeric"
      },
      {
        "value": "34.55",
        "type": "Numeric"
      },
      {
        "value": "38.14",
        "type": "Numeric"
      },
      {
        "value": "25.98",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scattermapbox select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "13.28",
        "type": "Numeric"
      },
      {
        "value": "25.97",
        "type": "Numeric"
      },
      {
        "value": "13.28",
        "type": "Numeric"
      },
      {
        "value": "14.33",
        "type": "Numeric"
      },
      {
        "value": "25.71",
        "type": "Numeric"
      },
      {
        "value": "14.33",
        "type": "Numeric"
      },
      {
        "value": "25.71",
        "type": "Numeric"
      },
      {
        "value": "25.97",
        "type": "Numeric"
      },
      {
        "value": "13.28",
        "type": "Numeric"
      },
      {
        "value": "25.97",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scattermapbox lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'pan'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "370",
        "type": "Numeric"
      },
      {
        "value": "120",
        "type": "Numeric"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "NOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scattermapbox pan'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "LONG_TIMEOUT_INTERVAL",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should work on scattergeo traces'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "'lon'",
        "type": "String"
      },
      {
        "value": "'lat'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "makeAssertRanges",
        "type": "Identifier"
      },
      {
        "value": "'geo'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "'geo'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergeo'",
        "type": "String"
      },
      {
        "value": "lon",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "lat",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergeo'",
        "type": "String"
      },
      {
        "value": "lon",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "lat",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "showlegend",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "600",
        "type": "Numeric"
      },
      {
        "value": "addInvisible",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "450",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "28.13",
        "type": "Numeric"
      },
      {
        "value": "61.88",
        "type": "Numeric"
      },
      {
        "value": "28.13",
        "type": "Numeric"
      },
      {
        "value": "50.64",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scattergeo select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "56.25",
        "type": "Numeric"
      },
      {
        "value": "61.88",
        "type": "Numeric"
      },
      {
        "value": "56.24",
        "type": "Numeric"
      },
      {
        "value": "5.63",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.63",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "61.88",
        "type": "Numeric"
      },
      {
        "value": "56.25",
        "type": "Numeric"
      },
      {
        "value": "61.88",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scattergeo lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'pan'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "370",
        "type": "Numeric"
      },
      {
        "value": "120",
        "type": "Numeric"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "NOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scattergeo pan'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "LONG_TIMEOUT_INTERVAL",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should work on scatterpolar traces'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "'r'",
        "type": "String"
      },
      {
        "value": "'theta'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/polar_subplots'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "800",
        "type": "Numeric"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "addInvisible",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "45",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scatterpolar select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "45",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'scatterpolar lasso'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should work on choropleth traces'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "'location'",
        "type": "String"
      },
      {
        "value": "'z'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "makeAssertRanges",
        "type": "Identifier"
      },
      {
        "value": "'geo'",
        "type": "String"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "'geo'",
        "type": "String"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/geo_choropleth-text'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "870",
        "type": "Numeric"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "450",
        "type": "Numeric"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "geo",
        "type": "Identifier"
      },
      {
        "value": "scope",
        "type": "Identifier"
      },
      {
        "value": "'europe'",
        "type": "String"
      },
      {
        "value": "addInvisible",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "emptyChoroplethTrace",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "emptyChoroplethTrace",
        "type": "Identifier"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "emptyChoroplethTrace",
        "type": "Identifier"
      },
      {
        "value": "locations",
        "type": "Identifier"
      },
      {
        "value": "emptyChoroplethTrace",
        "type": "Identifier"
      },
      {
        "value": "z",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "push",
        "type": "Identifier"
      },
      {
        "value": "emptyChoroplethTrace",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "'GBR'",
        "type": "String"
      },
      {
        "value": "26.507354205352502",
        "type": "Numeric"
      },
      {
        "value": "'IRL'",
        "type": "String"
      },
      {
        "value": "86.4125147625692",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "43",
        "type": "Numeric"
      },
      {
        "value": "54",
        "type": "Numeric"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "19.11",
        "type": "Numeric"
      },
      {
        "value": "63.06",
        "type": "Numeric"
      },
      {
        "value": "7.31",
        "type": "Numeric"
      },
      {
        "value": "53.72",
        "type": "Numeric"
      },
      {
        "value": "280",
        "type": "Numeric"
      },
      {
        "value": "190",
        "type": "Numeric"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'choropleth select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "'GBR'",
        "type": "String"
      },
      {
        "value": "26.507354205352502",
        "type": "Numeric"
      },
      {
        "value": "'IRL'",
        "type": "String"
      },
      {
        "value": "86.4125147625692",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "43",
        "type": "Numeric"
      },
      {
        "value": "54",
        "type": "Numeric"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "19.11",
        "type": "Numeric"
      },
      {
        "value": "63.06",
        "type": "Numeric"
      },
      {
        "value": "5.50",
        "type": "Numeric"
      },
      {
        "value": "65.25",
        "type": "Numeric"
      },
      {
        "value": "7.31",
        "type": "Numeric"
      },
      {
        "value": "53.72",
        "type": "Numeric"
      },
      {
        "value": "12.90",
        "type": "Numeric"
      },
      {
        "value": "51.70",
        "type": "Numeric"
      },
      {
        "value": "19.11",
        "type": "Numeric"
      },
      {
        "value": "63.06",
        "type": "Numeric"
      },
      {
        "value": "280",
        "type": "Numeric"
      },
      {
        "value": "190",
        "type": "Numeric"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'choropleth lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'pan'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "370",
        "type": "Numeric"
      },
      {
        "value": "120",
        "type": "Numeric"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "280",
        "type": "Numeric"
      },
      {
        "value": "190",
        "type": "Numeric"
      },
      {
        "value": "NOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'choropleth pan'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "LONG_TIMEOUT_INTERVAL",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should work for bar traces'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "'curveNumber'",
        "type": "String"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "makeAssertRanges",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/0'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "addInvisible",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "4.9",
        "type": "Numeric"
      },
      {
        "value": "0.371",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "0.368",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.1",
        "type": "Numeric"
      },
      {
        "value": "0.356",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.2",
        "type": "Numeric"
      },
      {
        "value": "0.336",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.3",
        "type": "Numeric"
      },
      {
        "value": "0.309",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.4",
        "type": "Numeric"
      },
      {
        "value": "0.275",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.5",
        "type": "Numeric"
      },
      {
        "value": "0.235",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.6",
        "type": "Numeric"
      },
      {
        "value": "0.192",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.7",
        "type": "Numeric"
      },
      {
        "value": "0.145",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "5.1",
        "type": "Numeric"
      },
      {
        "value": "0.485",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "5.2",
        "type": "Numeric"
      },
      {
        "value": "0.409",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "5.3",
        "type": "Numeric"
      },
      {
        "value": "0.327",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "5.4",
        "type": "Numeric"
      },
      {
        "value": "0.24",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "5.5",
        "type": "Numeric"
      },
      {
        "value": "0.149",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "5.6",
        "type": "Numeric"
      },
      {
        "value": "0.059",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "4.9",
        "type": "Numeric"
      },
      {
        "value": "0.473",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "0.368",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "5.1",
        "type": "Numeric"
      },
      {
        "value": "0.258",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "5.2",
        "type": "Numeric"
      },
      {
        "value": "0.146",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "5.3",
        "type": "Numeric"
      },
      {
        "value": "0.036",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "49",
        "type": "Numeric"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "51",
        "type": "Numeric"
      },
      {
        "value": "52",
        "type": "Numeric"
      },
      {
        "value": "53",
        "type": "Numeric"
      },
      {
        "value": "54",
        "type": "Numeric"
      },
      {
        "value": "55",
        "type": "Numeric"
      },
      {
        "value": "56",
        "type": "Numeric"
      },
      {
        "value": "57",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "51",
        "type": "Numeric"
      },
      {
        "value": "52",
        "type": "Numeric"
      },
      {
        "value": "53",
        "type": "Numeric"
      },
      {
        "value": "54",
        "type": "Numeric"
      },
      {
        "value": "55",
        "type": "Numeric"
      },
      {
        "value": "56",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "49",
        "type": "Numeric"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "51",
        "type": "Numeric"
      },
      {
        "value": "52",
        "type": "Numeric"
      },
      {
        "value": "53",
        "type": "Numeric"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "4.87",
        "type": "Numeric"
      },
      {
        "value": "5.74",
        "type": "Numeric"
      },
      {
        "value": "5.74",
        "type": "Numeric"
      },
      {
        "value": "4.87",
        "type": "Numeric"
      },
      {
        "value": "4.87",
        "type": "Numeric"
      },
      {
        "value": "0.53",
        "type": "Numeric"
      },
      {
        "value": "0.53",
        "type": "Numeric"
      },
      {
        "value": "0.02",
        "type": "Numeric"
      },
      {
        "value": "0.02",
        "type": "Numeric"
      },
      {
        "value": "0.53",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'bar lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Promise",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "370",
        "type": "Numeric"
      },
      {
        "value": "220",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "4.9",
        "type": "Numeric"
      },
      {
        "value": "0.371",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "0.368",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.1",
        "type": "Numeric"
      },
      {
        "value": "0.356",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.2",
        "type": "Numeric"
      },
      {
        "value": "0.336",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "5.1",
        "type": "Numeric"
      },
      {
        "value": "0.485",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "5.2",
        "type": "Numeric"
      },
      {
        "value": "0.41",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "4.9",
        "type": "Numeric"
      },
      {
        "value": "0.473",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "0.37",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "49",
        "type": "Numeric"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "51",
        "type": "Numeric"
      },
      {
        "value": "52",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "51",
        "type": "Numeric"
      },
      {
        "value": "52",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "49",
        "type": "Numeric"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "4.87",
        "type": "Numeric"
      },
      {
        "value": "5.22",
        "type": "Numeric"
      },
      {
        "value": "0.31",
        "type": "Numeric"
      },
      {
        "value": "0.53",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'bar select'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should work for date/category traces'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "'curveNumber'",
        "type": "String"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "'2017-01-01'",
        "type": "String"
      },
      {
        "value": "'2017-02-01'",
        "type": "String"
      },
      {
        "value": "'2017-03-01'",
        "type": "String"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "'a'",
        "type": "String"
      },
      {
        "value": "'b'",
        "type": "String"
      },
      {
        "value": "'c'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'bar'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "'2017-01-01'",
        "type": "String"
      },
      {
        "value": "'2017-02-02'",
        "type": "String"
      },
      {
        "value": "'2017-03-01'",
        "type": "String"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "'a'",
        "type": "String"
      },
      {
        "value": "'b'",
        "type": "String"
      },
      {
        "value": "'c'",
        "type": "String"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "addInvisible",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "x0",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "x1",
        "type": "Identifier"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "y1",
        "type": "Identifier"
      },
      {
        "value": "250",
        "type": "Numeric"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "x0",
        "type": "Identifier"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "x1",
        "type": "Identifier"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "x1",
        "type": "Identifier"
      },
      {
        "value": "y1",
        "type": "Identifier"
      },
      {
        "value": "x0",
        "type": "Identifier"
      },
      {
        "value": "y1",
        "type": "Identifier"
      },
      {
        "value": "x0",
        "type": "Identifier"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'2017-02-01'",
        "type": "String"
      },
      {
        "value": "'b'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'2017-02-02'",
        "type": "String"
      },
      {
        "value": "'b'",
        "type": "String"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'date/category lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "x0",
        "type": "Identifier"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "x1",
        "type": "Identifier"
      },
      {
        "value": "y1",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'2017-02-01'",
        "type": "String"
      },
      {
        "value": "'b'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'2017-02-02'",
        "type": "String"
      },
      {
        "value": "'b'",
        "type": "String"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'date/category select'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should work for histogram traces'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "'curveNumber'",
        "type": "String"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "'pointIndices'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "makeAssertRanges",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/hist_grouped'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "600",
        "type": "Numeric"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "addInvisible",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1.8",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2.2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "3.2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "1.66",
        "type": "Numeric"
      },
      {
        "value": "3.59",
        "type": "Numeric"
      },
      {
        "value": "3.59",
        "type": "Numeric"
      },
      {
        "value": "1.66",
        "type": "Numeric"
      },
      {
        "value": "1.66",
        "type": "Numeric"
      },
      {
        "value": "2.17",
        "type": "Numeric"
      },
      {
        "value": "2.17",
        "type": "Numeric"
      },
      {
        "value": "0.69",
        "type": "Numeric"
      },
      {
        "value": "0.69",
        "type": "Numeric"
      },
      {
        "value": "2.17",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'histogram lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1.8",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2.2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "3.2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "1.66",
        "type": "Numeric"
      },
      {
        "value": "3.59",
        "type": "Numeric"
      },
      {
        "value": "0.69",
        "type": "Numeric"
      },
      {
        "value": "2.17",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'histogram select'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should work for box traces'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "'curveNumber'",
        "type": "String"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "makeAssertRanges",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/box_grouped'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "forEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "trace",
        "type": "Identifier"
      },
      {
        "value": "trace",
        "type": "Identifier"
      },
      {
        "value": "boxpoints",
        "type": "Identifier"
      },
      {
        "value": "'all'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "600",
        "type": "Numeric"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "addInvisible",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.2",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.3",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.2",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.3",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.6",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.6",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "11",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "11",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "0.71",
        "type": "Numeric"
      },
      {
        "value": "0.71",
        "type": "Numeric"
      },
      {
        "value": "0.1875",
        "type": "Numeric"
      },
      {
        "value": "0.1875",
        "type": "Numeric"
      },
      {
        "value": "0.71",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'box lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.2",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.3",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.2",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.3",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.6",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.6",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "11",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "11",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0.1875",
        "type": "Numeric"
      },
      {
        "value": "0.71",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'box select'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should work for violin traces'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertPoints",
        "type": "Identifier"
      },
      {
        "value": "'curveNumber'",
        "type": "String"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "makeAssertRanges",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/violin_grouped'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "600",
        "type": "Numeric"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "addInvisible",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.3",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.9",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.8",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.9",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.3",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.6",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.6",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.9",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "11",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "9",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "assertLassoPoints",
        "type": "Identifier"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "1.02",
        "type": "Numeric"
      },
      {
        "value": "1.02",
        "type": "Numeric"
      },
      {
        "value": "0.27",
        "type": "Numeric"
      },
      {
        "value": "0.27",
        "type": "Numeric"
      },
      {
        "value": "1.02",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "LASSOEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'violin lasso'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'dragmode'",
        "type": "String"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.3",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0.9",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.5",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.7",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.8",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0.9",
        "type": "Numeric"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.3",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.6",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.6",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0.9",
        "type": "Numeric"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "11",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "9",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "assertRanges",
        "type": "Identifier"
      },
      {
        "value": "'day 1'",
        "type": "String"
      },
      {
        "value": "'day 2'",
        "type": "String"
      },
      {
        "value": "0.27",
        "type": "Numeric"
      },
      {
        "value": "1.02",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'violin select'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should work on traces with enabled transforms'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "makeAssertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "7",
        "type": "Numeric"
      },
      {
        "value": "9",
        "type": "Numeric"
      },
      {
        "value": "marker",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "transforms",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'filter'",
        "type": "String"
      },
      {
        "value": "operation",
        "type": "Identifier"
      },
      {
        "value": "'>'",
        "type": "String"
      },
      {
        "value": "value",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "target",
        "type": "Identifier"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'aggregate'",
        "type": "String"
      },
      {
        "value": "groups",
        "type": "Identifier"
      },
      {
        "value": "'marker.size'",
        "type": "String"
      },
      {
        "value": "aggregations",
        "type": "Identifier"
      },
      {
        "value": "target",
        "type": "Identifier"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "func",
        "type": "Identifier"
      },
      {
        "value": "'sum'",
        "type": "String"
      },
      {
        "value": "target",
        "type": "Identifier"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "func",
        "type": "Identifier"
      },
      {
        "value": "'avg'",
        "type": "String"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "showlegend",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "margin",
        "type": "Identifier"
      },
      {
        "value": "l",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "r",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "b",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_run",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "395",
        "type": "Numeric"
      },
      {
        "value": "395",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "380",
        "type": "Numeric"
      },
      {
        "value": "180",
        "type": "Numeric"
      },
      {
        "value": "BOXEVENTS",
        "type": "Identifier"
      },
      {
        "value": "'transformed trace select (all points selected)'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/446f9f95d7539c5dc603b362e900688634eb8b0a/test/jasmine/tests/parcoords_test.js",
    "commit": "446f9f95d7539c5dc603b362e900688634eb8b0a",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/parcoords_test.js",
    "start_line": 499,
    "end_line": 531,
    "test_code": "it('@flaky Skip dimensions which are not plain objects or whose `values` is not an array', function (done) {\n\n    var mockCopy = Lib.extendDeep({}, mock1);\n    var newDimension, i, j;\n\n    mockCopy.layout.width = 680;\n    mockCopy.data[0].dimensions = [];\n    for (i = 0; i < 5; i++) {\n        newDimension = Lib.extendDeep({}, mock1.data[0].dimensions[0]);\n        newDimension.id = 'S' + i;\n        newDimension.label = 'S' + i;\n        delete newDimension.constraintrange;\n        newDimension.range = [1, 2];\n        newDimension.values = [];\n        for (j = 0; j < 100; j++) {\n            newDimension.values[j] = 1 + Math.random();\n        }\n        mockCopy.data[0].dimensions[i] = newDimension;\n    }\n\n    mockCopy.data[0].dimensions[0] = 'This is not a plain object';\n    mockCopy.data[0].dimensions[1].values = 'This is not an array';\n\n    var gd = createGraphDiv();\n    Plotly.plot(gd, mockCopy.data, mockCopy.layout).then(function () {\n\n        expect(gd.data.length).toEqual(1);\n        expect(gd.data[0].dimensions.length).toEqual(5); // it's still five, but ...\n        expect(document.querySelectorAll('.axis').length).toEqual(3); // only 3 axes shown\n    })\n        .catch(fail)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky Skip dimensions which are not plain objects or whose `values` is not an array'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock1",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "newDimension",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "680",
        "type": "Numeric"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dimensions",
        "type": "Identifier"
      },
      {
        "value": "for",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "newDimension",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock1",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dimensions",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "newDimension",
        "type": "Identifier"
      },
      {
        "value": "id",
        "type": "Identifier"
      },
      {
        "value": "'S'",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "newDimension",
        "type": "Identifier"
      },
      {
        "value": "label",
        "type": "Identifier"
      },
      {
        "value": "'S'",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "delete",
        "type": "Keyword"
      },
      {
        "value": "newDimension",
        "type": "Identifier"
      },
      {
        "value": "constraintrange",
        "type": "Identifier"
      },
      {
        "value": "newDimension",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "newDimension",
        "type": "Identifier"
      },
      {
        "value": "values",
        "type": "Identifier"
      },
      {
        "value": "for",
        "type": "Keyword"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "newDimension",
        "type": "Identifier"
      },
      {
        "value": "values",
        "type": "Identifier"
      },
      {
        "value": "j",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Math",
        "type": "Identifier"
      },
      {
        "value": "random",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dimensions",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "newDimension",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dimensions",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "'This is not a plain object'",
        "type": "String"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dimensions",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "values",
        "type": "Identifier"
      },
      {
        "value": "'This is not an array'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "createGraphDiv",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dimensions",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "querySelectorAll",
        "type": "Identifier"
      },
      {
        "value": "'.axis'",
        "type": "String"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/011443eb73ea89aef14e798570c4ad200ae25b5b/test/jasmine/tests/gl2d_plot_interact_test.js",
    "commit": "011443eb73ea89aef14e798570c4ad200ae25b5b",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl2d_plot_interact_test.js",
    "start_line": 351,
    "end_line": 380,
    "test_code": "it('@flaky should be able to toggle visibility', function (done) {\n    var _mock = Lib.extendDeep({}, mock);\n    _mock.data[0].line.width = 5;\n\n    Plotly.plot(gd, _mock)\n        .then(delay(30))\n        .then(function () {\n            return Plotly.restyle(gd, 'visible', 'legendonly');\n        })\n        .then(function () {\n            expect(gd.querySelector('.gl-canvas-context')).toBe(null);\n\n            return Plotly.restyle(gd, 'visible', true);\n        })\n        .then(function () {\n            expect(readPixel(gd.querySelector('.gl-canvas-context'), 108, 100)[0]).not.toBe(0);\n\n            return Plotly.restyle(gd, 'visible', false);\n        })\n        .then(function () {\n            expect(gd.querySelector('.gl-canvas-context')).toBe(null);\n\n            return Plotly.restyle(gd, 'visible', true);\n        })\n        .then(function () {\n            expect(readPixel(gd.querySelector('.gl-canvas-context'), 108, 100)[0]).not.toBe(0);\n        })\n        .catch(fail)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should be able to toggle visibility'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "line",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "restyle",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'visible'",
        "type": "String"
      },
      {
        "value": "'legendonly'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.gl-canvas-context'",
        "type": "String"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "restyle",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'visible'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "readPixel",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.gl-canvas-context'",
        "type": "String"
      },
      {
        "value": "108",
        "type": "Numeric"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "restyle",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'visible'",
        "type": "String"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.gl-canvas-context'",
        "type": "String"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "restyle",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'visible'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "readPixel",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.gl-canvas-context'",
        "type": "String"
      },
      {
        "value": "108",
        "type": "Numeric"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/fff668ace691575ecbd509f942ccd88d2b30bd1d/test/jasmine/tests/parcoords_test.js",
    "commit": "fff668ace691575ecbd509f942ccd88d2b30bd1d",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/parcoords_test.js",
    "start_line": 1147,
    "end_line": 1207,
    "test_code": "it('@flaky snaps ordinal constraints', function (done) {\n    // first: drag almost to 2 but not quite - constraint will snap back to [2.75, 4]\n    mostOfDrag(105, 165, 105, 190);\n    var newDashArray = getDashArray(0);\n    expect(newDashArray).not.toBe(initialDashArray0);\n    checkDashCount(newDashArray, 1);\n\n    mouseEvent('mouseup', 105, 190);\n    delay(snapDelay)().then(function () {\n        expect(getDashArray(0)).toBe(initialDashArray0);\n        expect(gd.data[0].dimensions[0].constraintrange).toBeCloseToArray([2.75, 4]);\n\n        // now select a range between 1 and 2 but missing both - it will disappear on mouseup\n        mostOfDrag(105, 210, 105, 240);\n        newDashArray = getDashArray(0);\n        checkDashCount(newDashArray, 2);\n\n        mouseEvent('mouseup', 105, 240);\n    })\n        .then(delay(snapDelay))\n        .then(function () {\n            expect(getDashArray(0)).toBe(initialDashArray0);\n            expect(gd.data[0].dimensions[0].constraintrange).toBeCloseToArray([2.75, 4]);\n\n            // select across 1, making a new region\n            mostOfDrag(105, 240, 105, 260);\n            newDashArray = getDashArray(0);\n            checkDashCount(newDashArray, 2);\n\n            mouseEvent('mouseup', 105, 260);\n        })\n        .then(delay(snapDelay))\n        .then(function () {\n            newDashArray = getDashArray(0);\n            checkDashCount(newDashArray, 2);\n            expect(gd.data[0].dimensions[0].constraintrange).toBeCloseTo2DArray([[0.75, 1.25], [2.75, 4]]);\n\n            // select from 2 down to just above 1, extending the new region\n            mostOfDrag(105, 190, 105, 240);\n            newDashArray = getDashArray(0);\n            checkDashCount(newDashArray, 2);\n\n            mouseEvent('mouseup', 105, 240);\n        })\n        .then(delay(snapDelay))\n        .then(function () {\n            newDashArray = getDashArray(0);\n            checkDashCount(newDashArray, 2);\n            expect(gd.data[0].dimensions[0].constraintrange).toBeCloseTo2DArray([[0.75, 2.25], [2.75, 4]]);\n\n            // clear the whole thing\n            click(105, 290);\n        })\n        .then(delay(snapDelay))\n        .then(function () {\n            checkDashCount(getDashArray(0), 0);\n            expect(gd.data[0].dimensions[0].constraintrange).toBeUndefined();\n        })\n        .catch(failTest)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky snaps ordinal constraints'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "mostOfDrag",
        "type": "Identifier"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "165",
        "type": "Numeric"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "190",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "getDashArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "initialDashArray0",
        "type": "Identifier"
      },
      {
        "value": "checkDashCount",
        "type": "Identifier"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "mouseEvent",
        "type": "Identifier"
      },
      {
        "value": "'mouseup'",
        "type": "String"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "190",
        "type": "Numeric"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "snapDelay",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "getDashArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "initialDashArray0",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dimensions",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "constraintrange",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "2.75",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "mostOfDrag",
        "type": "Identifier"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "210",
        "type": "Numeric"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "240",
        "type": "Numeric"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "getDashArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "checkDashCount",
        "type": "Identifier"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "mouseEvent",
        "type": "Identifier"
      },
      {
        "value": "'mouseup'",
        "type": "String"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "240",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "snapDelay",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "getDashArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "initialDashArray0",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dimensions",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "constraintrange",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "2.75",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "mostOfDrag",
        "type": "Identifier"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "240",
        "type": "Numeric"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "260",
        "type": "Numeric"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "getDashArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "checkDashCount",
        "type": "Identifier"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "mouseEvent",
        "type": "Identifier"
      },
      {
        "value": "'mouseup'",
        "type": "String"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "260",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "snapDelay",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "getDashArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "checkDashCount",
        "type": "Identifier"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dimensions",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "constraintrange",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseTo2DArray",
        "type": "Identifier"
      },
      {
        "value": "0.75",
        "type": "Numeric"
      },
      {
        "value": "1.25",
        "type": "Numeric"
      },
      {
        "value": "2.75",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "mostOfDrag",
        "type": "Identifier"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "190",
        "type": "Numeric"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "240",
        "type": "Numeric"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "getDashArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "checkDashCount",
        "type": "Identifier"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "mouseEvent",
        "type": "Identifier"
      },
      {
        "value": "'mouseup'",
        "type": "String"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "240",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "snapDelay",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "getDashArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "checkDashCount",
        "type": "Identifier"
      },
      {
        "value": "newDashArray",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dimensions",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "constraintrange",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseTo2DArray",
        "type": "Identifier"
      },
      {
        "value": "0.75",
        "type": "Numeric"
      },
      {
        "value": "2.25",
        "type": "Numeric"
      },
      {
        "value": "2.75",
        "type": "Numeric"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "105",
        "type": "Numeric"
      },
      {
        "value": "290",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "snapDelay",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "checkDashCount",
        "type": "Identifier"
      },
      {
        "value": "getDashArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dimensions",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "constraintrange",
        "type": "Identifier"
      },
      {
        "value": "toBeUndefined",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/4e6935aede26f25466c1817ef6addb3c259ab35c/test/jasmine/tests/gl2d_plot_interact_test.js",
    "commit": "4e6935aede26f25466c1817ef6addb3c259ab35c",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl2d_plot_interact_test.js",
    "start_line": 574,
    "end_line": 639,
    "test_code": "it('@flaky supports axis constraints with zoom', function (done) {\n    var centerX;\n    var centerY;\n\n    Plotly.newPlot(gd, [{\n        type: 'scattergl', x: [1, 15], y: [1, 15]\n    }], {\n        width: 400,\n        height: 400,\n        margin: { t: 100, b: 100, l: 100, r: 100 },\n        xaxis: { range: [0, 16] },\n        yaxis: { range: [0, 16] }\n    })\n        .then(function () {\n            var bBox = gd.getBoundingClientRect();\n            centerX = bBox.left + 200;\n            centerY = bBox.top + 200;\n\n            return Plotly.relayout(gd, {\n                'yaxis.scaleanchor': 'x',\n                'yaxis.scaleratio': 2\n            });\n        })\n        .then(function () {\n            // x range is adjusted to fit constraint\n            expect(gd.layout.xaxis.range).toBeCloseToArray([-8, 24], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([0, 16], 3);\n        })\n        .then(function () {\n            return mouseTo([centerX, centerY], [centerX - 5, centerY + 5]);\n        })\n        .then(function () {\n            // no change - too small\n            expect(gd.layout.xaxis.range).toBeCloseToArray([-8, 24], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([0, 16], 3);\n        })\n        .then(function () {\n            // now there should only be 2D zooming\n            // dy>>dx\n            return mouseTo([centerX, centerY], [centerX - 1, centerY - 50]);\n        })\n        .then(function () {\n            expect(gd.layout.xaxis.range).toBeCloseToArray([0, 8], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([8, 12], 3);\n        })\n        .then(function () {\n            return mouseTo([centerX, centerY], [centerX + 50, centerY + 1]);\n        })\n        .then(function () {\n            // dx>>dy\n            expect(gd.layout.xaxis.range).toBeCloseToArray([4, 6], 3);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([9, 10], 3);\n        })\n        .then(function () {\n            return Plotly.relayout(gd, {\n                'xaxis.autorange': true,\n                'yaxis.autorange': true\n            });\n        })\n        .then(function () {\n            expect(gd.layout.xaxis.range).toBeCloseToArray([-8.2, 24.2], 1);\n            expect(gd.layout.yaxis.range).toBeCloseToArray([-0.12, 16.1], 1);\n        })\n        .catch(fail)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky supports axis constraints with zoom'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "newPlot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "15",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "15",
        "type": "Numeric"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "margin",
        "type": "Identifier"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "b",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "l",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "r",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "bBox",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "bBox",
        "type": "Identifier"
      },
      {
        "value": "left",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "bBox",
        "type": "Identifier"
      },
      {
        "value": "top",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'yaxis.scaleanchor'",
        "type": "String"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "'yaxis.scaleratio'",
        "type": "String"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "24",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "5",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "24",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "16",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "12",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "mouseTo",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "centerX",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "centerY",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "4",
        "type": "Numeric"
      },
      {
        "value": "6",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "9",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "relayout",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'xaxis.autorange'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "'yaxis.autorange'",
        "type": "String"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "8.2",
        "type": "Numeric"
      },
      {
        "value": "24.2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "0.12",
        "type": "Numeric"
      },
      {
        "value": "16.1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/4e6935aede26f25466c1817ef6addb3c259ab35c/test/jasmine/tests/gl2d_plot_interact_test.js",
    "commit": "4e6935aede26f25466c1817ef6addb3c259ab35c",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl2d_plot_interact_test.js",
    "start_line": 641,
    "end_line": 652,
    "test_code": "it('@flaky should change plot type with incomplete data', function (done) {\n    Plotly.plot(gd, [{}]);\n    expect(function () {\n        Plotly.restyle(gd, { type: 'scattergl', x: [[1]] }, 0);\n    }).not.toThrow();\n\n    expect(function () {\n        Plotly.restyle(gd, { y: [[1]] }, 0);\n    }).not.toThrow();\n\n    done();\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should change plot type with incomplete data'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "restyle",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toThrow",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "restyle",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toThrow",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/4e6935aede26f25466c1817ef6addb3c259ab35c/test/jasmine/tests/gl2d_plot_interact_test.js",
    "commit": "4e6935aede26f25466c1817ef6addb3c259ab35c",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl2d_plot_interact_test.js",
    "start_line": 697,
    "end_line": 749,
    "test_code": "it('@flaky should not scroll document while panning', function (done) {\n    var mock = {\n        data: [\n            { type: 'scattergl', y: [1, 2, 3], x: [1, 2, 3] }\n        ],\n        layout: {\n            width: 500,\n            height: 500\n        }\n    };\n\n    var sceneTarget, relayoutCallback = jasmine.createSpy('relayoutCallback');\n\n    function scroll(target, amt) {\n        return new Promise(function (resolve) {\n            target.dispatchEvent(new WheelEvent('wheel', { deltaY: amt || 1, cancelable: true }));\n            setTimeout(resolve, 0);\n        });\n    }\n\n    function touchDrag(target, start, end) {\n        return new Promise(function (resolve) {\n            touchEvent('touchstart', start[0], start[1], { element: target });\n            touchEvent('touchmove', end[0], end[1], { element: target });\n            touchEvent('touchend', end[0], end[1], { element: target });\n            setTimeout(resolve, 0);\n        });\n    }\n\n    function assertEvent(e) {\n        expect(e.defaultPrevented).toEqual(true);\n        relayoutCallback();\n    }\n\n    gd.addEventListener('touchstart', assertEvent);\n    gd.addEventListener('wheel', assertEvent);\n\n    Plotly.plot(gd, mock)\n        .then(function () {\n            sceneTarget = gd.querySelector('.nsewdrag');\n\n            return touchDrag(sceneTarget, [100, 100], [0, 0]);\n        })\n        .then(function () {\n            return scroll(sceneTarget);\n        })\n        .then(function () {\n            expect(relayoutCallback).toHaveBeenCalledTimes(1);\n\n        })\n        .catch(fail)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should not scroll document while panning'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "sceneTarget",
        "type": "Identifier"
      },
      {
        "value": "relayoutCallback",
        "type": "Identifier"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "createSpy",
        "type": "Identifier"
      },
      {
        "value": "'relayoutCallback'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "scroll",
        "type": "Identifier"
      },
      {
        "value": "target",
        "type": "Identifier"
      },
      {
        "value": "amt",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Promise",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "target",
        "type": "Identifier"
      },
      {
        "value": "dispatchEvent",
        "type": "Identifier"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "WheelEvent",
        "type": "Identifier"
      },
      {
        "value": "'wheel'",
        "type": "String"
      },
      {
        "value": "deltaY",
        "type": "Identifier"
      },
      {
        "value": "amt",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "cancelable",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "touchDrag",
        "type": "Identifier"
      },
      {
        "value": "target",
        "type": "Identifier"
      },
      {
        "value": "start",
        "type": "Identifier"
      },
      {
        "value": "end",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Promise",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "touchEvent",
        "type": "Identifier"
      },
      {
        "value": "'touchstart'",
        "type": "String"
      },
      {
        "value": "start",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "start",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "target",
        "type": "Identifier"
      },
      {
        "value": "touchEvent",
        "type": "Identifier"
      },
      {
        "value": "'touchmove'",
        "type": "String"
      },
      {
        "value": "end",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "end",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "target",
        "type": "Identifier"
      },
      {
        "value": "touchEvent",
        "type": "Identifier"
      },
      {
        "value": "'touchend'",
        "type": "String"
      },
      {
        "value": "end",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "end",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "target",
        "type": "Identifier"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertEvent",
        "type": "Identifier"
      },
      {
        "value": "e",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "e",
        "type": "Identifier"
      },
      {
        "value": "defaultPrevented",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "relayoutCallback",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "addEventListener",
        "type": "Identifier"
      },
      {
        "value": "'touchstart'",
        "type": "String"
      },
      {
        "value": "assertEvent",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "addEventListener",
        "type": "Identifier"
      },
      {
        "value": "'wheel'",
        "type": "String"
      },
      {
        "value": "assertEvent",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "sceneTarget",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.nsewdrag'",
        "type": "String"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "touchDrag",
        "type": "Identifier"
      },
      {
        "value": "sceneTarget",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "scroll",
        "type": "Identifier"
      },
      {
        "value": "sceneTarget",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "relayoutCallback",
        "type": "Identifier"
      },
      {
        "value": "toHaveBeenCalledTimes",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/4e6935aede26f25466c1817ef6addb3c259ab35c/test/jasmine/tests/gl2d_plot_interact_test.js",
    "commit": "4e6935aede26f25466c1817ef6addb3c259ab35c",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl2d_plot_interact_test.js",
    "start_line": 859,
    "end_line": 874,
    "test_code": "it('@flaky should remove fill2d', function (done) {\n    var mock = require('@mocks/gl2d_axes_labels2.json');\n\n    Plotly.plot(gd, mock.data, mock.layout)\n        .then(delay(1000))\n        .then(function () {\n            expect(readPixel(gd.querySelector('.gl-canvas-context'), 100, 80)[0]).not.toBe(0);\n\n            return Plotly.restyle(gd, { fill: 'none' });\n        })\n        .then(function () {\n            expect(readPixel(gd.querySelector('.gl-canvas-context'), 100, 80)[0]).toBe(0);\n        })\n        .catch(fail)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should remove fill2d'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/gl2d_axes_labels2.json'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "1000",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "readPixel",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.gl-canvas-context'",
        "type": "String"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "80",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "restyle",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fill",
        "type": "Identifier"
      },
      {
        "value": "'none'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "readPixel",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "querySelector",
        "type": "Identifier"
      },
      {
        "value": "'.gl-canvas-context'",
        "type": "String"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "80",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/37e054864cfec82316bdadab1b197b53164ae007/test/jasmine/tests/gl2d_click_test.js",
    "commit": "37e054864cfec82316bdadab1b197b53164ae007",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl2d_click_test.js",
    "start_line": 67,
    "end_line": 533,
    "test_code": "describe('@gl @flaky Test hover and click interactions', function () {\n    var gd;\n\n    function makeHoverFn(gd, x, y) {\n        return function () {\n            return new Promise(function (resolve) {\n                gd.on('plotly_hover', resolve);\n                hover(x, y);\n            });\n        };\n    }\n\n    function makeClickFn(gd, x, y) {\n        return function () {\n            return new Promise(function (resolve) {\n                gd.on('plotly_click', resolve);\n                click(x, y);\n            });\n        };\n    }\n\n    function makeUnhoverFn(gd, x0, y0) {\n        return function () {\n            return new Promise(function (resolve) {\n                var initialElement = document.elementFromPoint(x0, y0);\n                // fairly realistic simulation of moving with the cursor\n                var canceler = setInterval(function () {\n                    x0 -= 2;\n                    y0 -= 2;\n                    hover(x0, y0);\n\n                    var nowElement = document.elementFromPoint(x0, y0);\n                    if (nowElement !== initialElement) {\n                        mouseEvent('mouseout', x0, y0, { element: initialElement });\n                    }\n                }, 10);\n\n                gd.on('plotly_unhover', function () {\n                    clearInterval(canceler);\n                    resolve('emitted plotly_unhover');\n                });\n\n                setTimeout(function () {\n                    clearInterval(canceler);\n                    resolve(null);\n                }, 350);\n            });\n        };\n    }\n\n    function assertEventData(actual, expected, msg) {\n        expect(actual.points.length).toEqual(1, 'points length');\n\n        var pt = actual.points[0];\n\n        expect(Object.keys(pt)).toEqual(jasmine.arrayContaining([\n            'x', 'y', 'curveNumber', 'pointNumber',\n            'data', 'fullData', 'xaxis', 'yaxis'\n        ]), 'event data keys');\n\n        expect(typeof pt.data.uid).toBe('string', msg + ' - uid');\n        expect(pt.xaxis.domain.length).toBe(2, msg + ' - xaxis');\n        expect(pt.yaxis.domain.length).toBe(2, msg + ' - yaxis');\n\n        expect(pt.x).toBe(expected.x, msg + ' - x');\n        expect(pt.y).toBe(expected.y, msg + ' - y');\n        expect(pt.curveNumber).toBe(expected.curveNumber, msg + ' - curve number');\n        expect(String(pt.pointNumber)).toBe(String(expected.pointNumber), msg + ' - point number');\n    }\n\n    // returns basic hover/click/unhover runner for one xy position\n    function makeRunner(pos, expected, opts) {\n        opts = opts || {};\n\n        var _hover = makeHoverFn(gd, pos[0], pos[1]);\n        var _click = makeClickFn(gd, pos[0], pos[1]);\n\n        var _unhover = opts.noUnHover ?\n            function () { return 'emitted plotly_unhover'; } :\n            makeUnhoverFn(gd, pos[0], pos[1]);\n\n        return function () {\n            return delay(100)()\n                .then(_hover)\n                .then(function (eventData) {\n                    assertEventData(eventData, expected);\n\n                    var g = d3.select('g.hovertext');\n                    if (g.node() === null) {\n                        expect(expected.noHoverLabel).toBe(true);\n                    } else {\n                        assertHoverLabelStyle(g, expected, opts.msg);\n                    }\n                    if (expected.label) {\n                        assertHoverLabelContent({\n                            nums: expected.label[0],\n                            name: expected.label[1]\n                        });\n                    }\n                })\n                .then(_click)\n                .then(function (eventData) {\n                    assertEventData(eventData, expected, opts.msg);\n                })\n                .then(_unhover)\n                .then(function (eventData) {\n                    expect(eventData).toBe('emitted plotly_unhover', opts.msg);\n                });\n        };\n    }\n\n    beforeEach(function () {\n        gd = createGraphDiv();\n    });\n\n    afterEach(function () {\n        Plotly.purge(gd);\n        destroyGraphDiv();\n    });\n\n    it('should output correct event data for scattergl', function (done) {\n        var _mock = Lib.extendDeep({}, mock1);\n\n        _mock.layout.hoverlabel = {\n            font: {\n                size: 20,\n                color: 'yellow'\n            }\n        };\n        _mock.data[0].hoverinfo = _mock.data[0].x.map(function (_, i) { return i % 2 ? 'y' : 'x'; });\n\n        _mock.data[0].hoverlabel = {\n            bgcolor: 'blue',\n            bordercolor: _mock.data[0].x.map(function (_, i) { return i % 2 ? 'red' : 'green'; })\n        };\n\n        var run = makeRunner([634, 321], {\n            x: 15.772,\n            y: 0.387,\n            label: ['0.387', null],\n            curveNumber: 0,\n            pointNumber: 33,\n            bgcolor: 'rgb(0, 0, 255)',\n            bordercolor: 'rgb(255, 0, 0)',\n            fontSize: 20,\n            fontFamily: 'Arial',\n            fontColor: 'rgb(255, 255, 0)'\n        }, {\n            msg: 'scattergl'\n        });\n\n        Plotly.plot(gd, _mock)\n            .then(run)\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should output correct event data for scattergl in *select* dragmode', function (done) {\n        var _mock = Lib.extendDeep({}, mock1);\n\n        _mock.layout.dragmode = 'select';\n\n        _mock.layout.hoverlabel = {\n            font: {\n                size: 20,\n                color: 'yellow'\n            }\n        };\n        _mock.data[0].hoverinfo = _mock.data[0].x.map(function (_, i) { return i % 2 ? 'y' : 'x'; });\n\n        _mock.data[0].hoverlabel = {\n            bgcolor: 'blue',\n            bordercolor: _mock.data[0].x.map(function (_, i) { return i % 2 ? 'red' : 'green'; })\n        };\n\n        var run = makeRunner([634, 321], {\n            x: 15.772,\n            y: 0.387,\n            label: ['0.387', null],\n            curveNumber: 0,\n            pointNumber: 33,\n            bgcolor: 'rgb(0, 0, 255)',\n            bordercolor: 'rgb(255, 0, 0)',\n            fontSize: 20,\n            fontFamily: 'Arial',\n            fontColor: 'rgb(255, 255, 0)'\n        }, {\n            msg: 'scattergl'\n        });\n\n        Plotly.plot(gd, _mock)\n            .then(run)\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should output correct event data for scattergl in *lasso* dragmode', function (done) {\n        var _mock = Lib.extendDeep({}, mock1);\n\n        _mock.layout.dragmode = 'lasso';\n\n        _mock.layout.hoverlabel = {\n            font: {\n                size: 20,\n                color: 'yellow'\n            }\n        };\n        _mock.data[0].hoverinfo = _mock.data[0].x.map(function (_, i) { return i % 2 ? 'y' : 'x'; });\n\n        _mock.data[0].hoverlabel = {\n            bgcolor: 'blue',\n            bordercolor: _mock.data[0].x.map(function (_, i) { return i % 2 ? 'red' : 'green'; })\n        };\n\n        var run = makeRunner([634, 321], {\n            x: 15.772,\n            y: 0.387,\n            label: ['0.387', null],\n            curveNumber: 0,\n            pointNumber: 33,\n            bgcolor: 'rgb(0, 0, 255)',\n            bordercolor: 'rgb(255, 0, 0)',\n            fontSize: 20,\n            fontFamily: 'Arial',\n            fontColor: 'rgb(255, 255, 0)'\n        }, {\n            msg: 'scattergl'\n        });\n\n        Plotly.plot(gd, _mock)\n            .then(run)\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should output correct event data for scattergl with hoverinfo: \\'none\\'', function (done) {\n        var _mock = Lib.extendDeep({}, mock1);\n        _mock.data[0].hoverinfo = 'none';\n\n        var run = makeRunner([634, 321], {\n            x: 15.772,\n            y: 0.387,\n            curveNumber: 0,\n            pointNumber: 33,\n            noHoverLabel: true\n        }, {\n            msg: 'scattergl with hoverinfo'\n        });\n\n        Plotly.plot(gd, _mock)\n            .then(run)\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should output correct event data for pointcloud', function (done) {\n        var _mock = Lib.extendDeep({}, mock2);\n\n        _mock.layout.hoverlabel = { font: { size: 8 } };\n        _mock.data[2].hoverlabel = {\n            bgcolor: ['red', 'green', 'blue']\n        };\n\n        var run = makeRunner([540, 150], {\n            x: 4.5,\n            y: 9,\n            curveNumber: 2,\n            pointNumber: 1,\n            bgcolor: 'rgb(0, 128, 0)',\n            bordercolor: 'rgb(255, 255, 255)',\n            fontSize: 8,\n            fontFamily: 'Arial',\n            fontColor: 'rgb(255, 255, 255)'\n        }, {\n            msg: 'pointcloud'\n        });\n\n        Plotly.plot(gd, _mock)\n            .then(run)\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should output correct event data for heatmapgl', function (done) {\n        var _mock = Lib.extendDeep({}, mock3);\n        _mock.data[0].type = 'heatmapgl';\n\n        _mock.data[0].hoverlabel = {\n            font: { size: _mock.data[0].z }\n        };\n\n        _mock.layout.hoverlabel = {\n            font: { family: 'Roboto' }\n        };\n\n        var run = makeRunner([540, 150], {\n            x: 3,\n            y: 3,\n            curveNumber: 0,\n            pointNumber: [3, 3],\n            bgcolor: 'rgb(68, 68, 68)',\n            bordercolor: 'rgb(255, 255, 255)',\n            fontSize: 20,\n            fontFamily: 'Roboto',\n            fontColor: 'rgb(255, 255, 255)'\n        }, {\n            noUnHover: true,\n            msg: 'heatmapgl'\n        });\n\n        Plotly.plot(gd, _mock)\n            .then(run)\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should output correct event data for heatmapgl (asymmetric case) ', function (done) {\n        var _mock = {\n            data: [{\n                type: 'heatmapgl',\n                z: [[1, 2, 0], [2, 3, 1]],\n                text: [['a', 'b', 'c'], ['D', 'E', 'F']],\n                hoverlabel: {\n                    bgcolor: [['red', 'blue', 'green'], ['cyan', 'pink', 'black']]\n                }\n            }]\n        };\n\n        var run = makeRunner([540, 150], {\n            x: 2,\n            y: 1,\n            curveNumber: 0,\n            pointNumber: [1, 2],\n            bgcolor: 'rgb(0, 0, 0)',\n            bordercolor: 'rgb(255, 255, 255)',\n            fontSize: 13,\n            fontFamily: 'Arial',\n            fontColor: 'rgb(255, 255, 255)'\n        }, {\n            noUnHover: true,\n            msg: 'heatmapgl'\n        });\n\n        Plotly.plot(gd, _mock)\n            .then(run)\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should output correct event data for scattergl after visibility restyle', function (done) {\n        var _mock = Lib.extendDeep({}, mock4);\n\n        var run = makeRunner([435, 216], {\n            x: 8,\n            y: 18,\n            curveNumber: 2,\n            pointNumber: 0,\n            bgcolor: 'rgb(44, 160, 44)',\n            bordercolor: 'rgb(255, 255, 255)',\n            fontSize: 13,\n            fontFamily: 'Arial',\n            fontColor: 'rgb(255, 255, 255)'\n        }, {\n            msg: 'scattergl before visibility restyle'\n        });\n\n        // after the restyle, autorange changes the y range\n        var run2 = makeRunner([435, 106], {\n            x: 8,\n            y: 18,\n            curveNumber: 2,\n            pointNumber: 0,\n            bgcolor: 'rgb(255, 127, 14)',\n            bordercolor: 'rgb(68, 68, 68)',\n            fontSize: 13,\n            fontFamily: 'Arial',\n            fontColor: 'rgb(68, 68, 68)'\n        }, {\n            msg: 'scattergl after visibility restyle'\n        });\n\n        Plotly.plot(gd, _mock)\n            .then(run)\n            .then(function () {\n                return Plotly.restyle(gd, 'visible', false, [1]);\n            })\n            .then(run2)\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should output correct event data for scattergl-fancy', function (done) {\n        var _mock = Lib.extendDeep({}, mock4);\n        _mock.data[0].mode = 'markers+lines';\n        _mock.data[1].mode = 'markers+lines';\n        _mock.data[2].mode = 'markers+lines';\n\n        var run = makeRunner([435, 216], {\n            x: 8,\n            y: 18,\n            curveNumber: 2,\n            pointNumber: 0,\n            bgcolor: 'rgb(44, 160, 44)',\n            bordercolor: 'rgb(255, 255, 255)',\n            fontSize: 13,\n            fontFamily: 'Arial',\n            fontColor: 'rgb(255, 255, 255)'\n        }, {\n            msg: 'scattergl fancy before visibility restyle'\n        });\n\n        // after the restyle, autorange changes the x AND y ranges\n        // I don't get why the x range changes, nor why the y changes in\n        // a different way than in the previous test, but they do look\n        // correct on the screen during the test.\n        var run2 = makeRunner([426, 116], {\n            x: 8,\n            y: 18,\n            curveNumber: 2,\n            pointNumber: 0,\n            bgcolor: 'rgb(255, 127, 14)',\n            bordercolor: 'rgb(68, 68, 68)',\n            fontSize: 13,\n            fontFamily: 'Arial',\n            fontColor: 'rgb(68, 68, 68)'\n        }, {\n            msg: 'scattergl fancy after visibility restyle'\n        });\n\n        Plotly.plot(gd, _mock)\n            .then(run)\n            .then(function () {\n                return Plotly.restyle(gd, 'visible', false, [1]);\n            })\n            .then(run2)\n            .catch(fail)\n            .then(done);\n    });\n\n    it('should output correct event data contourgl', function (done) {\n        var _mock = Lib.extendDeep({}, mock3);\n\n        _mock.data[0].hoverlabel = {\n            font: { size: _mock.data[0].z }\n        };\n\n        var run = makeRunner([540, 150], {\n            x: 3,\n            y: 3,\n            curveNumber: 0,\n            pointNumber: [3, 3],\n            bgcolor: 'rgb(68, 68, 68)',\n            bordercolor: 'rgb(255, 255, 255)',\n            fontSize: 20,\n            fontFamily: 'Arial',\n            fontColor: 'rgb(255, 255, 255)'\n        }, {\n            noUnHover: true,\n            msg: 'contourgl'\n        });\n\n        Plotly.plot(gd, _mock)\n            .then(run)\n            .catch(fail)\n            .then(done);\n    });\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'@gl @flaky Test hover and click interactions'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "makeHoverFn",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Promise",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "on",
        "type": "Identifier"
      },
      {
        "value": "'plotly_hover'",
        "type": "String"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "hover",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "makeClickFn",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Promise",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "on",
        "type": "Identifier"
      },
      {
        "value": "'plotly_click'",
        "type": "String"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "click",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "makeUnhoverFn",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "x0",
        "type": "Identifier"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "new",
        "type": "Keyword"
      },
      {
        "value": "Promise",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "initialElement",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "elementFromPoint",
        "type": "Identifier"
      },
      {
        "value": "x0",
        "type": "Identifier"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "canceler",
        "type": "Identifier"
      },
      {
        "value": "setInterval",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "x0",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "hover",
        "type": "Identifier"
      },
      {
        "value": "x0",
        "type": "Identifier"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "nowElement",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "elementFromPoint",
        "type": "Identifier"
      },
      {
        "value": "x0",
        "type": "Identifier"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "nowElement",
        "type": "Identifier"
      },
      {
        "value": "initialElement",
        "type": "Identifier"
      },
      {
        "value": "mouseEvent",
        "type": "Identifier"
      },
      {
        "value": "'mouseout'",
        "type": "String"
      },
      {
        "value": "x0",
        "type": "Identifier"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "element",
        "type": "Identifier"
      },
      {
        "value": "initialElement",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "on",
        "type": "Identifier"
      },
      {
        "value": "'plotly_unhover'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "clearInterval",
        "type": "Identifier"
      },
      {
        "value": "canceler",
        "type": "Identifier"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "'emitted plotly_unhover'",
        "type": "String"
      },
      {
        "value": "setTimeout",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "clearInterval",
        "type": "Identifier"
      },
      {
        "value": "canceler",
        "type": "Identifier"
      },
      {
        "value": "resolve",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertEventData",
        "type": "Identifier"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "points",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "'points length'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "pt",
        "type": "Identifier"
      },
      {
        "value": "actual",
        "type": "Identifier"
      },
      {
        "value": "points",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Object",
        "type": "Identifier"
      },
      {
        "value": "keys",
        "type": "Identifier"
      },
      {
        "value": "pt",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "jasmine",
        "type": "Identifier"
      },
      {
        "value": "arrayContaining",
        "type": "Identifier"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "'curveNumber'",
        "type": "String"
      },
      {
        "value": "'pointNumber'",
        "type": "String"
      },
      {
        "value": "'data'",
        "type": "String"
      },
      {
        "value": "'fullData'",
        "type": "String"
      },
      {
        "value": "'xaxis'",
        "type": "String"
      },
      {
        "value": "'yaxis'",
        "type": "String"
      },
      {
        "value": "'event data keys'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "typeof",
        "type": "Keyword"
      },
      {
        "value": "pt",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "uid",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'string'",
        "type": "String"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "' - uid'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "pt",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "domain",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "' - xaxis'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "pt",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "domain",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "' - yaxis'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "pt",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "' - x'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "pt",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "' - y'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "pt",
        "type": "Identifier"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "' - curve number'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "String",
        "type": "Identifier"
      },
      {
        "value": "pt",
        "type": "Identifier"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "String",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "' - point number'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "pos",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "opts",
        "type": "Identifier"
      },
      {
        "value": "opts",
        "type": "Identifier"
      },
      {
        "value": "opts",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_hover",
        "type": "Identifier"
      },
      {
        "value": "makeHoverFn",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "pos",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "pos",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_click",
        "type": "Identifier"
      },
      {
        "value": "makeClickFn",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "pos",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "pos",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_unhover",
        "type": "Identifier"
      },
      {
        "value": "opts",
        "type": "Identifier"
      },
      {
        "value": "noUnHover",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "'emitted plotly_unhover'",
        "type": "String"
      },
      {
        "value": "makeUnhoverFn",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "pos",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "pos",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "_hover",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "eventData",
        "type": "Identifier"
      },
      {
        "value": "assertEventData",
        "type": "Identifier"
      },
      {
        "value": "eventData",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "g",
        "type": "Identifier"
      },
      {
        "value": "d3",
        "type": "Identifier"
      },
      {
        "value": "select",
        "type": "Identifier"
      },
      {
        "value": "'g.hovertext'",
        "type": "String"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "g",
        "type": "Identifier"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "noHoverLabel",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "assertHoverLabelStyle",
        "type": "Identifier"
      },
      {
        "value": "g",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "opts",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "label",
        "type": "Identifier"
      },
      {
        "value": "assertHoverLabelContent",
        "type": "Identifier"
      },
      {
        "value": "nums",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "label",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "label",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "_click",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "eventData",
        "type": "Identifier"
      },
      {
        "value": "assertEventData",
        "type": "Identifier"
      },
      {
        "value": "eventData",
        "type": "Identifier"
      },
      {
        "value": "expected",
        "type": "Identifier"
      },
      {
        "value": "opts",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "_unhover",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "eventData",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "eventData",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "'emitted plotly_unhover'",
        "type": "String"
      },
      {
        "value": "opts",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "createGraphDiv",
        "type": "Identifier"
      },
      {
        "value": "afterEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "purge",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "destroyGraphDiv",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should output correct event data for scattergl'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock1",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "font",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "'yellow'",
        "type": "String"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hoverinfo",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "map",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'blue'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "map",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "'red'",
        "type": "String"
      },
      {
        "value": "'green'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "634",
        "type": "Numeric"
      },
      {
        "value": "321",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "15.772",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "0.387",
        "type": "Numeric"
      },
      {
        "value": "label",
        "type": "Identifier"
      },
      {
        "value": "'0.387'",
        "type": "String"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "33",
        "type": "Numeric"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(0, 0, 255)'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 0, 0)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "fontFamily",
        "type": "Identifier"
      },
      {
        "value": "'Arial'",
        "type": "String"
      },
      {
        "value": "fontColor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 0)'",
        "type": "String"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should output correct event data for scattergl in *select* dragmode'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock1",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "font",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "'yellow'",
        "type": "String"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hoverinfo",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "map",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'blue'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "map",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "'red'",
        "type": "String"
      },
      {
        "value": "'green'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "634",
        "type": "Numeric"
      },
      {
        "value": "321",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "15.772",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "0.387",
        "type": "Numeric"
      },
      {
        "value": "label",
        "type": "Identifier"
      },
      {
        "value": "'0.387'",
        "type": "String"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "33",
        "type": "Numeric"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(0, 0, 255)'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 0, 0)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "fontFamily",
        "type": "Identifier"
      },
      {
        "value": "'Arial'",
        "type": "String"
      },
      {
        "value": "fontColor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 0)'",
        "type": "String"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should output correct event data for scattergl in *lasso* dragmode'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock1",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'lasso'",
        "type": "String"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "font",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "color",
        "type": "Identifier"
      },
      {
        "value": "'yellow'",
        "type": "String"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hoverinfo",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "map",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "'y'",
        "type": "String"
      },
      {
        "value": "'x'",
        "type": "String"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'blue'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "map",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "'red'",
        "type": "String"
      },
      {
        "value": "'green'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "634",
        "type": "Numeric"
      },
      {
        "value": "321",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "15.772",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "0.387",
        "type": "Numeric"
      },
      {
        "value": "label",
        "type": "Identifier"
      },
      {
        "value": "'0.387'",
        "type": "String"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "33",
        "type": "Numeric"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(0, 0, 255)'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 0, 0)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "fontFamily",
        "type": "Identifier"
      },
      {
        "value": "'Arial'",
        "type": "String"
      },
      {
        "value": "fontColor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 0)'",
        "type": "String"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should output correct event data for scattergl with hoverinfo: \\'none\\''",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock1",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hoverinfo",
        "type": "Identifier"
      },
      {
        "value": "'none'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "634",
        "type": "Numeric"
      },
      {
        "value": "321",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "15.772",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "0.387",
        "type": "Numeric"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "33",
        "type": "Numeric"
      },
      {
        "value": "noHoverLabel",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'scattergl with hoverinfo'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should output correct event data for pointcloud'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock2",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "font",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'red'",
        "type": "String"
      },
      {
        "value": "'green'",
        "type": "String"
      },
      {
        "value": "'blue'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "540",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "4.5",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "9",
        "type": "Numeric"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(0, 128, 0)'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "fontFamily",
        "type": "Identifier"
      },
      {
        "value": "'Arial'",
        "type": "String"
      },
      {
        "value": "fontColor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'pointcloud'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should output correct event data for heatmapgl'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock3",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'heatmapgl'",
        "type": "String"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "font",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "z",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "font",
        "type": "Identifier"
      },
      {
        "value": "family",
        "type": "Identifier"
      },
      {
        "value": "'Roboto'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "540",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(68, 68, 68)'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "fontFamily",
        "type": "Identifier"
      },
      {
        "value": "'Roboto'",
        "type": "String"
      },
      {
        "value": "fontColor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "noUnHover",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'heatmapgl'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should output correct event data for heatmapgl (asymmetric case) '",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'heatmapgl'",
        "type": "String"
      },
      {
        "value": "z",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "text",
        "type": "Identifier"
      },
      {
        "value": "'a'",
        "type": "String"
      },
      {
        "value": "'b'",
        "type": "String"
      },
      {
        "value": "'c'",
        "type": "String"
      },
      {
        "value": "'D'",
        "type": "String"
      },
      {
        "value": "'E'",
        "type": "String"
      },
      {
        "value": "'F'",
        "type": "String"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'red'",
        "type": "String"
      },
      {
        "value": "'blue'",
        "type": "String"
      },
      {
        "value": "'green'",
        "type": "String"
      },
      {
        "value": "'cyan'",
        "type": "String"
      },
      {
        "value": "'pink'",
        "type": "String"
      },
      {
        "value": "'black'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "540",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(0, 0, 0)'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "fontFamily",
        "type": "Identifier"
      },
      {
        "value": "'Arial'",
        "type": "String"
      },
      {
        "value": "fontColor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "noUnHover",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'heatmapgl'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should output correct event data for scattergl after visibility restyle'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock4",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "435",
        "type": "Numeric"
      },
      {
        "value": "216",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "18",
        "type": "Numeric"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(44, 160, 44)'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "fontFamily",
        "type": "Identifier"
      },
      {
        "value": "'Arial'",
        "type": "String"
      },
      {
        "value": "fontColor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'scattergl before visibility restyle'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run2",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "435",
        "type": "Numeric"
      },
      {
        "value": "106",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "18",
        "type": "Numeric"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 127, 14)'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(68, 68, 68)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "fontFamily",
        "type": "Identifier"
      },
      {
        "value": "'Arial'",
        "type": "String"
      },
      {
        "value": "fontColor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(68, 68, 68)'",
        "type": "String"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'scattergl after visibility restyle'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "restyle",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'visible'",
        "type": "String"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run2",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should output correct event data for scattergl-fancy'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock4",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "mode",
        "type": "Identifier"
      },
      {
        "value": "'markers+lines'",
        "type": "String"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "mode",
        "type": "Identifier"
      },
      {
        "value": "'markers+lines'",
        "type": "String"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "mode",
        "type": "Identifier"
      },
      {
        "value": "'markers+lines'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "435",
        "type": "Numeric"
      },
      {
        "value": "216",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "18",
        "type": "Numeric"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(44, 160, 44)'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "fontFamily",
        "type": "Identifier"
      },
      {
        "value": "'Arial'",
        "type": "String"
      },
      {
        "value": "fontColor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'scattergl fancy before visibility restyle'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run2",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "426",
        "type": "Numeric"
      },
      {
        "value": "116",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "8",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "18",
        "type": "Numeric"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 127, 14)'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(68, 68, 68)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "13",
        "type": "Numeric"
      },
      {
        "value": "fontFamily",
        "type": "Identifier"
      },
      {
        "value": "'Arial'",
        "type": "String"
      },
      {
        "value": "fontColor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(68, 68, 68)'",
        "type": "String"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'scattergl fancy after visibility restyle'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "restyle",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'visible'",
        "type": "String"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run2",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'should output correct event data contourgl'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock3",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "hoverlabel",
        "type": "Identifier"
      },
      {
        "value": "font",
        "type": "Identifier"
      },
      {
        "value": "size",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "z",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "makeRunner",
        "type": "Identifier"
      },
      {
        "value": "540",
        "type": "Numeric"
      },
      {
        "value": "150",
        "type": "Numeric"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "curveNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "pointNumber",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "bgcolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(68, 68, 68)'",
        "type": "String"
      },
      {
        "value": "bordercolor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "fontSize",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "fontFamily",
        "type": "Identifier"
      },
      {
        "value": "'Arial'",
        "type": "String"
      },
      {
        "value": "fontColor",
        "type": "Identifier"
      },
      {
        "value": "'rgb(255, 255, 255)'",
        "type": "String"
      },
      {
        "value": "noUnHover",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'contourgl'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "run",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/13204a9be522b20ec030b25f1a35d0e763281776/test/jasmine/tests/polar_test.js",
    "commit": "13204a9be522b20ec030b25f1a35d0e763281776",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/polar_test.js",
    "start_line": 801,
    "end_line": 890,
    "test_code": "it('@flaky should respond to drag interactions on plot area', function (done) {\n    var fig = Lib.extendDeep({}, require('@mocks/polar_scatter.json'));\n\n    // to avoid dragging on hover labels\n    fig.layout.hovermode = false;\n\n    // adjust margins so that middle of plot area is at 300x300\n    // with its middle at [200,200]\n    fig.layout.width = 400;\n    fig.layout.height = 400;\n    fig.layout.margin = { l: 50, t: 50, b: 50, r: 50 };\n\n    var mid = [200, 200];\n    var relayoutNumber = 0;\n    var resetNumber = 0;\n\n    function _drag(p0, dp) {\n        var node = d3.select('.polar > .draglayer > .maindrag').node();\n        return drag(node, dp[0], dp[1], null, p0[0], p0[1]);\n    }\n\n    function _assertRange(rng, msg) {\n        expect(gd._fullLayout.polar.radialaxis.range).toBeCloseToArray(rng, 1, msg);\n    }\n\n    function _assertDrag(rng, msg) {\n        relayoutNumber++;\n        _assertRange(rng, msg);\n\n        if (eventCnts.plotly_relayout === relayoutNumber) {\n            expect(eventData['polar.radialaxis.range'])\n                .toBeCloseToArray(rng, 1, msg + '- event data');\n        } else {\n            fail('incorrect number of plotly_relayout events triggered - ' + msg);\n        }\n    }\n\n    function _assertBase(extra) {\n        var msg = 'base range' + (extra ? ' ' + extra : '');\n        _assertRange([0, 11.1], msg);\n    }\n\n    function _reset() {\n        return delay(100)()\n            .then(function () { return _doubleClick(mid); })\n            .then(function () {\n                relayoutNumber++;\n                resetNumber++;\n\n                var extra = '(reset ' + resetNumber + ')';\n                _assertBase(extra);\n                expect(eventCnts.plotly_doubleclick).toBe(resetNumber, 'doubleclick event #' + extra);\n            });\n    }\n\n    _plot(fig)\n        .then(_assertBase)\n        .then(function () { return _drag(mid, [50, 50]); })\n        .then(function () {\n            _assertDrag([0, 5.24], 'from center move toward bottom-right');\n        })\n        .then(_reset)\n        .then(function () { return _drag(mid, [-50, -50]); })\n        .then(function () {\n            _assertDrag([0, 5.24], 'from center move toward top-left');\n        })\n        .then(_reset)\n        .then(function () { return _drag([mid[0] + 30, mid[0] - 30], [50, -50]); })\n        .then(function () {\n            _assertDrag([3.1, 8.4], 'from quadrant #1 move top-right');\n        })\n        .then(_reset)\n        .then(function () { return _drag([345, 200], [-50, 0]); })\n        .then(function () {\n            _assertDrag([7.0, 11.1], 'from right edge move left');\n        })\n        .then(_reset)\n        .then(function () { return _drag(mid, [10, 10]); })\n        .then(function () { _assertBase('from center to not far enough'); })\n        .then(function () { return _drag([mid[0] + 30, mid[0] - 30], [-10, 0]); })\n        .then(function () { _assertBase('from quadrant #1 to not far enough'); })\n        .then(function () { return _drag([345, 200], [-10, 0]); })\n        .then(function () { _assertBase('from right edge to not far enough'); })\n        .then(function () {\n            expect(eventCnts.plotly_relayout)\n                .toBe(relayoutNumber, 'no new relayout events after *not far enough* cases');\n        })\n        .catch(fail)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should respond to drag interactions on plot area'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/polar_scatter.json'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "hovermode",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "margin",
        "type": "Identifier"
      },
      {
        "value": "l",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "t",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "b",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "r",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mid",
        "type": "Identifier"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "relayoutNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "resetNumber",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_drag",
        "type": "Identifier"
      },
      {
        "value": "p0",
        "type": "Identifier"
      },
      {
        "value": "dp",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "d3",
        "type": "Identifier"
      },
      {
        "value": "select",
        "type": "Identifier"
      },
      {
        "value": "'.polar > .draglayer > .maindrag'",
        "type": "String"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "dp",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "dp",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "p0",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "p0",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertRange",
        "type": "Identifier"
      },
      {
        "value": "rng",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "polar",
        "type": "Identifier"
      },
      {
        "value": "radialaxis",
        "type": "Identifier"
      },
      {
        "value": "range",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "rng",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertDrag",
        "type": "Identifier"
      },
      {
        "value": "rng",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "relayoutNumber",
        "type": "Identifier"
      },
      {
        "value": "_assertRange",
        "type": "Identifier"
      },
      {
        "value": "rng",
        "type": "Identifier"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "eventCnts",
        "type": "Identifier"
      },
      {
        "value": "plotly_relayout",
        "type": "Identifier"
      },
      {
        "value": "relayoutNumber",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "eventData",
        "type": "Identifier"
      },
      {
        "value": "'polar.radialaxis.range'",
        "type": "String"
      },
      {
        "value": "toBeCloseToArray",
        "type": "Identifier"
      },
      {
        "value": "rng",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'- event data'",
        "type": "String"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "'incorrect number of plotly_relayout events triggered - '",
        "type": "String"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertBase",
        "type": "Identifier"
      },
      {
        "value": "extra",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "'base range'",
        "type": "String"
      },
      {
        "value": "extra",
        "type": "Identifier"
      },
      {
        "value": "' '",
        "type": "String"
      },
      {
        "value": "extra",
        "type": "Identifier"
      },
      {
        "value": "''",
        "type": "String"
      },
      {
        "value": "_assertRange",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "11.1",
        "type": "Numeric"
      },
      {
        "value": "msg",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_reset",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_doubleClick",
        "type": "Identifier"
      },
      {
        "value": "mid",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "relayoutNumber",
        "type": "Identifier"
      },
      {
        "value": "resetNumber",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "extra",
        "type": "Identifier"
      },
      {
        "value": "'(reset '",
        "type": "String"
      },
      {
        "value": "resetNumber",
        "type": "Identifier"
      },
      {
        "value": "')'",
        "type": "String"
      },
      {
        "value": "_assertBase",
        "type": "Identifier"
      },
      {
        "value": "extra",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "eventCnts",
        "type": "Identifier"
      },
      {
        "value": "plotly_doubleclick",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "resetNumber",
        "type": "Identifier"
      },
      {
        "value": "'doubleclick event #'",
        "type": "String"
      },
      {
        "value": "extra",
        "type": "Identifier"
      },
      {
        "value": "_plot",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "_assertBase",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_drag",
        "type": "Identifier"
      },
      {
        "value": "mid",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertDrag",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.24",
        "type": "Numeric"
      },
      {
        "value": "'from center move toward bottom-right'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "_reset",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_drag",
        "type": "Identifier"
      },
      {
        "value": "mid",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertDrag",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "5.24",
        "type": "Numeric"
      },
      {
        "value": "'from center move toward top-left'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "_reset",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_drag",
        "type": "Identifier"
      },
      {
        "value": "mid",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "mid",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertDrag",
        "type": "Identifier"
      },
      {
        "value": "3.1",
        "type": "Numeric"
      },
      {
        "value": "8.4",
        "type": "Numeric"
      },
      {
        "value": "'from quadrant #1 move top-right'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "_reset",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_drag",
        "type": "Identifier"
      },
      {
        "value": "345",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertDrag",
        "type": "Identifier"
      },
      {
        "value": "7.0",
        "type": "Numeric"
      },
      {
        "value": "11.1",
        "type": "Numeric"
      },
      {
        "value": "'from right edge move left'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "_reset",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_drag",
        "type": "Identifier"
      },
      {
        "value": "mid",
        "type": "Identifier"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertBase",
        "type": "Identifier"
      },
      {
        "value": "'from center to not far enough'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_drag",
        "type": "Identifier"
      },
      {
        "value": "mid",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "mid",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "30",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertBase",
        "type": "Identifier"
      },
      {
        "value": "'from quadrant #1 to not far enough'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "_drag",
        "type": "Identifier"
      },
      {
        "value": "345",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "10",
        "type": "Numeric"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertBase",
        "type": "Identifier"
      },
      {
        "value": "'from right edge to not far enough'",
        "type": "String"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "eventCnts",
        "type": "Identifier"
      },
      {
        "value": "plotly_relayout",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "relayoutNumber",
        "type": "Identifier"
      },
      {
        "value": "'no new relayout events after *not far enough* cases'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "fail",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/d9d626ae53109144dd2a9eeea9c7daf5f1e45a37/test/jasmine/tests/select_test.js",
    "commit": "d9d626ae53109144dd2a9eeea9c7daf5f1e45a37",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/select_test.js",
    "start_line": 1299,
    "end_line": 1334,
    "test_code": "it('@flaky should cleanly clear and restart selections on double click when add/subtract mode on', function (done) {\n    var gd = createGraphDiv();\n    var fig = Lib.extendDeep({}, require('@mocks/0.json'));\n\n    fig.layout.dragmode = 'select';\n    Plotly.plot(gd, fig)\n        .then(function () {\n            return drag([[350, 100], [400, 400]]);\n        })\n        .then(function () {\n            _assertSelectedPoints([49, 50, 51, 52, 53, 54, 55, 56, 57]);\n\n            // Note: although Shift has no behavioral effect on clearing a selection\n            // with a double click, users might hold the Shift key by accident.\n            // This test ensures selection is cleared as expected although\n            // the Shift key is held and no selection state is retained in any way.\n            return doubleClick(500, 200, { shiftKey: true });\n        })\n        .then(function () {\n            _assertSelectedPoints(null);\n            return drag([[450, 100], [500, 400]], { shiftKey: true });\n        })\n        .then(function () {\n            _assertSelectedPoints([67, 68, 69, 70, 71, 72, 73, 74]);\n        })\n        .catch(failTest)\n        .then(done);\n\n    function _assertSelectedPoints(selPts) {\n        if (selPts) {\n            expect(gd.data[0].selectedpoints).toEqual(selPts);\n        } else {\n            expect('selectedpoints' in gd.data[0]).toBe(false);\n        }\n    }\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should cleanly clear and restart selections on double click when add/subtract mode on'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "createGraphDiv",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/0.json'",
        "type": "String"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "dragmode",
        "type": "Identifier"
      },
      {
        "value": "'select'",
        "type": "String"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "fig",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "350",
        "type": "Numeric"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "49",
        "type": "Numeric"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "51",
        "type": "Numeric"
      },
      {
        "value": "52",
        "type": "Numeric"
      },
      {
        "value": "53",
        "type": "Numeric"
      },
      {
        "value": "54",
        "type": "Numeric"
      },
      {
        "value": "55",
        "type": "Numeric"
      },
      {
        "value": "56",
        "type": "Numeric"
      },
      {
        "value": "57",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "doubleClick",
        "type": "Identifier"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "450",
        "type": "Numeric"
      },
      {
        "value": "100",
        "type": "Numeric"
      },
      {
        "value": "500",
        "type": "Numeric"
      },
      {
        "value": "400",
        "type": "Numeric"
      },
      {
        "value": "shiftKey",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "67",
        "type": "Numeric"
      },
      {
        "value": "68",
        "type": "Numeric"
      },
      {
        "value": "69",
        "type": "Numeric"
      },
      {
        "value": "70",
        "type": "Numeric"
      },
      {
        "value": "71",
        "type": "Numeric"
      },
      {
        "value": "72",
        "type": "Numeric"
      },
      {
        "value": "73",
        "type": "Numeric"
      },
      {
        "value": "74",
        "type": "Numeric"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_assertSelectedPoints",
        "type": "Identifier"
      },
      {
        "value": "selPts",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "selPts",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "selectedpoints",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "selPts",
        "type": "Identifier"
      },
      {
        "value": "else",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "'selectedpoints'",
        "type": "String"
      },
      {
        "value": "in",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/8f627dcacc40a031a7da1516c4e438dc5f795618/test/jasmine/tests/config_test.js",
    "commit": "8f627dcacc40a031a7da1516c4e438dc5f795618",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/config_test.js",
    "start_line": 618,
    "end_line": 624,
    "test_code": "it('@flaky should still be responsive if the plot is edited', function (done) {\n    fillParent(1, 1);\n    Plotly.plot(gd, data, {}, { responsive: true })\n        .then(function () { return Plotly.restyle(gd, 'y[0]', data[0].y[0] + 2); })\n        .then(testResponsive)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should still be responsive if the plot is edited'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "fillParent",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "responsive",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "restyle",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'y[0]'",
        "type": "String"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "testResponsive",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/4eb5dafc041e51aa251e99da9abae41884e31f05/test/jasmine/tests/shapes_test.js",
    "commit": "4eb5dafc041e51aa251e99da9abae41884e31f05",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/shapes_test.js",
    "start_line": 1040,
    "end_line": 1061,
    "test_code": "it('@flaky being sized relative to data vertically is getting lower ' +\n    'when being dragged to expand the y-axis',\n    function (done) {\n        layout.shapes[0].ysizemode = 'data';\n        layout.shapes[0].y0 = 1;\n        layout.shapes[0].y1 = 2;\n\n        Plotly.plot(gd, data, layout, { editable: true })\n            .then(function () {\n                var shapeNodeBeforeDrag = getFirstShapeNode();\n                var heightBeforeDrag = shapeNodeBeforeDrag.getBoundingClientRect().height;\n\n                drag(shapeNodeBeforeDrag, 50, 300).then(function () {\n                    var shapeNodeAfterDrag = getFirstShapeNode();\n                    var bbox = shapeNodeAfterDrag.getBoundingClientRect();\n                    expect(bbox.width).toBe(25);\n                    expect(bbox.height).toBeLessThan(heightBeforeDrag);\n                    assertShapeFullyVisible(shapeNodeAfterDrag);\n                    done();\n                });\n            });\n    });\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky being sized relative to data vertically is getting lower '",
        "type": "String"
      },
      {
        "value": "'when being dragged to expand the y-axis'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "shapes",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "ysizemode",
        "type": "Identifier"
      },
      {
        "value": "'data'",
        "type": "String"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "shapes",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "y0",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "shapes",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "y1",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "editable",
        "type": "Identifier"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "shapeNodeBeforeDrag",
        "type": "Identifier"
      },
      {
        "value": "getFirstShapeNode",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "heightBeforeDrag",
        "type": "Identifier"
      },
      {
        "value": "shapeNodeBeforeDrag",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "shapeNodeBeforeDrag",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "shapeNodeAfterDrag",
        "type": "Identifier"
      },
      {
        "value": "getFirstShapeNode",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "bbox",
        "type": "Identifier"
      },
      {
        "value": "shapeNodeAfterDrag",
        "type": "Identifier"
      },
      {
        "value": "getBoundingClientRect",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "bbox",
        "type": "Identifier"
      },
      {
        "value": "width",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "25",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "bbox",
        "type": "Identifier"
      },
      {
        "value": "height",
        "type": "Identifier"
      },
      {
        "value": "toBeLessThan",
        "type": "Identifier"
      },
      {
        "value": "heightBeforeDrag",
        "type": "Identifier"
      },
      {
        "value": "assertShapeFullyVisible",
        "type": "Identifier"
      },
      {
        "value": "shapeNodeAfterDrag",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/8241bc8b22164683f2d265aa49d732c615498542/test/jasmine/tests/sankey_test.js",
    "commit": "8241bc8b22164683f2d265aa49d732c615498542",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/sankey_test.js",
    "start_line": 1131,
    "end_line": 1177,
    "test_code": "it('@flaky should persist the position of every nodes after drag in attributes nodes.(x|y)', function (done) {\n    mockCopy.data[0].arrangement = arrangement;\n    var move = [50, -50];\n    var nodes;\n    var node;\n    var x, x1;\n    var y, y1;\n    var precision = 3;\n\n    Plotly.newPlot(gd, mockCopy)\n        .then(function () {\n            x = gd._fullData[0].node.x.slice();\n            y = gd._fullData[0].node.y.slice();\n            expect(x.length).toBe(0);\n            expect(y.length).toBe(0);\n\n            nodes = document.getElementsByClassName('sankey-node');\n            node = nodes.item(nodeId);\n            return drag(node, move[0], move[1]);\n        })\n        .then(function () {\n            x = gd._fullData[0].node.x.slice();\n            y = gd._fullData[0].node.y.slice();\n            expect(x.length).toBe(mockCopy.data[0].node.label.length);\n            expect(y.length).toBe(mockCopy.data[0].node.label.length);\n\n            nodes = document.getElementsByClassName('sankey-node');\n            node = nodes.item(nodes.length - 1); // Dragged node is now the last one\n            return drag(node, move[0], move[1]);\n        })\n        .then(function () {\n            x1 = gd._fullData[0].node.x.slice();\n            y1 = gd._fullData[0].node.y.slice();\n            if (arrangement === 'freeform') expect(x1[nodeId]).not.toBeCloseTo(x[nodeId], 2, 'node ' + nodeId + ' has not changed x position');\n            expect(y1[nodeId]).not.toBeCloseTo(y[nodeId], precision, 'node ' + nodeId + ' has not changed y position');\n\n            // All nodes should have same x, y values after drag\n            for (var i = 0; i < x.length; i++) {\n                if (i === nodeId) continue; // except the one was just dragged\n                if (arrangement === 'freeform') expect(x1[i]).toBeCloseTo(x[i], 3, 'node ' + i + ' has changed x position');\n                expect(y1[i]).toBeCloseTo(y[i], precision, 'node ' + i + ' has changed y position');\n            }\n            return true;\n        })\n        .catch(failTest)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should persist the position of every nodes after drag in attributes nodes.(x|y)'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "arrangement",
        "type": "Identifier"
      },
      {
        "value": "arrangement",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "move",
        "type": "Identifier"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "50",
        "type": "Numeric"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "nodes",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "x1",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "y1",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "newPlot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "nodes",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "getElementsByClassName",
        "type": "Identifier"
      },
      {
        "value": "'sankey-node'",
        "type": "String"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "nodes",
        "type": "Identifier"
      },
      {
        "value": "item",
        "type": "Identifier"
      },
      {
        "value": "nodeId",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "move",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "move",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "label",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "label",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "nodes",
        "type": "Identifier"
      },
      {
        "value": "document",
        "type": "Identifier"
      },
      {
        "value": "getElementsByClassName",
        "type": "Identifier"
      },
      {
        "value": "'sankey-node'",
        "type": "String"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "nodes",
        "type": "Identifier"
      },
      {
        "value": "item",
        "type": "Identifier"
      },
      {
        "value": "nodes",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "drag",
        "type": "Identifier"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "move",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "move",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "x1",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "y1",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "node",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "arrangement",
        "type": "Identifier"
      },
      {
        "value": "'freeform'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "x1",
        "type": "Identifier"
      },
      {
        "value": "nodeId",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseTo",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "nodeId",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "'node '",
        "type": "String"
      },
      {
        "value": "nodeId",
        "type": "Identifier"
      },
      {
        "value": "' has not changed x position'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "y1",
        "type": "Identifier"
      },
      {
        "value": "nodeId",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseTo",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "nodeId",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "'node '",
        "type": "String"
      },
      {
        "value": "nodeId",
        "type": "Identifier"
      },
      {
        "value": "' has not changed y position'",
        "type": "String"
      },
      {
        "value": "for",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "nodeId",
        "type": "Identifier"
      },
      {
        "value": "continue",
        "type": "Keyword"
      },
      {
        "value": "if",
        "type": "Keyword"
      },
      {
        "value": "arrangement",
        "type": "Identifier"
      },
      {
        "value": "'freeform'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "x1",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseTo",
        "type": "Identifier"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "'node '",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "' has changed x position'",
        "type": "String"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "y1",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "toBeCloseTo",
        "type": "Identifier"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "precision",
        "type": "Identifier"
      },
      {
        "value": "'node '",
        "type": "String"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "' has changed y position'",
        "type": "String"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "true",
        "type": "Boolean"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/17b506815dc44ba90b1daf2d0891b822bebb2ab0/test/jasmine/tests/gl2d_plot_interact_test.js",
    "commit": "17b506815dc44ba90b1daf2d0891b822bebb2ab0",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl2d_plot_interact_test.js",
    "start_line": 25,
    "end_line": 95,
    "test_code": "describe('Test removal of gl contexts', function () {\n    var gd;\n\n    beforeEach(function () {\n        gd = createGraphDiv();\n    });\n\n    afterEach(function () {\n        Plotly.purge(gd);\n        destroyGraphDiv();\n    });\n\n    it('@gl Plots.cleanPlot should remove gl context from the graph div of a gl2d plot', function (done) {\n        Plotly.plot(gd, [{\n            type: 'scattergl',\n            x: [1, 2, 3],\n            y: [2, 1, 3]\n        }])\n            .then(function () {\n                expect(gd._fullLayout._plots.xy._scene).toBeDefined();\n                Plots.cleanPlot([], {}, gd._fullData, gd._fullLayout);\n\n                expect(!!gd._fullLayout._plots.xy._scene).toBe(false);\n            })\n            .catch(failTest)\n            .then(done);\n    });\n\n    it('@gl Plotly.newPlot should remove gl context from the graph div of a gl2d plot', function (done) {\n        var firstGlplotObject, firstGlContext, firstCanvas;\n\n        Plotly.plot(gd, [{\n            type: 'scattergl',\n            x: [1, 2, 3],\n            y: [2, 1, 3]\n        }])\n            .then(function () {\n                firstGlplotObject = gd._fullLayout._plots.xy._scene;\n                firstGlContext = firstGlplotObject.scatter2d.gl;\n                firstCanvas = firstGlContext.canvas;\n\n                expect(firstGlplotObject).toBeDefined();\n                expect(firstGlContext).toBeDefined();\n                expect(firstGlContext instanceof WebGLRenderingContext);\n\n                return Plotly.newPlot(gd, [{\n                    type: 'scattergl',\n                    x: [1, 2, 3],\n                    y: [2, 1, 3]\n                }], {});\n            })\n            .then(function () {\n                var secondGlplotObject = gd._fullLayout._plots.xy._scene;\n                var secondGlContext = secondGlplotObject.scatter2d.gl;\n                var secondCanvas = secondGlContext.canvas;\n\n                expect(Object.keys(gd._fullLayout._plots).length === 1);\n                expect(secondGlplotObject).not.toBe(firstGlplotObject);\n                expect(firstGlplotObject.gl === null);\n                expect(secondGlContext instanceof WebGLRenderingContext);\n                expect(secondGlContext).not.toBe(firstGlContext);\n\n                expect(\n                    firstCanvas.parentNode === null ||\n                    firstCanvas !== secondCanvas && firstGlContext.isContextLost()\n                );\n            })\n            .catch(failTest)\n            .then(done);\n    });\n});\n",
    "tokens": [
      {
        "value": "describe",
        "type": "Identifier"
      },
      {
        "value": "'Test removal of gl contexts'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "beforeEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "createGraphDiv",
        "type": "Identifier"
      },
      {
        "value": "afterEach",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "purge",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "destroyGraphDiv",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@gl Plots.cleanPlot should remove gl context from the graph div of a gl2d plot'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_plots",
        "type": "Identifier"
      },
      {
        "value": "xy",
        "type": "Identifier"
      },
      {
        "value": "_scene",
        "type": "Identifier"
      },
      {
        "value": "toBeDefined",
        "type": "Identifier"
      },
      {
        "value": "Plots",
        "type": "Identifier"
      },
      {
        "value": "cleanPlot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullData",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_plots",
        "type": "Identifier"
      },
      {
        "value": "xy",
        "type": "Identifier"
      },
      {
        "value": "_scene",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "false",
        "type": "Boolean"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@gl Plotly.newPlot should remove gl context from the graph div of a gl2d plot'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "firstGlplotObject",
        "type": "Identifier"
      },
      {
        "value": "firstGlContext",
        "type": "Identifier"
      },
      {
        "value": "firstCanvas",
        "type": "Identifier"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "firstGlplotObject",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_plots",
        "type": "Identifier"
      },
      {
        "value": "xy",
        "type": "Identifier"
      },
      {
        "value": "_scene",
        "type": "Identifier"
      },
      {
        "value": "firstGlContext",
        "type": "Identifier"
      },
      {
        "value": "firstGlplotObject",
        "type": "Identifier"
      },
      {
        "value": "scatter2d",
        "type": "Identifier"
      },
      {
        "value": "gl",
        "type": "Identifier"
      },
      {
        "value": "firstCanvas",
        "type": "Identifier"
      },
      {
        "value": "firstGlContext",
        "type": "Identifier"
      },
      {
        "value": "canvas",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "firstGlplotObject",
        "type": "Identifier"
      },
      {
        "value": "toBeDefined",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "firstGlContext",
        "type": "Identifier"
      },
      {
        "value": "toBeDefined",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "firstGlContext",
        "type": "Identifier"
      },
      {
        "value": "instanceof",
        "type": "Keyword"
      },
      {
        "value": "WebGLRenderingContext",
        "type": "Identifier"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "newPlot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "'scattergl'",
        "type": "String"
      },
      {
        "value": "x",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "y",
        "type": "Identifier"
      },
      {
        "value": "2",
        "type": "Numeric"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "secondGlplotObject",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_plots",
        "type": "Identifier"
      },
      {
        "value": "xy",
        "type": "Identifier"
      },
      {
        "value": "_scene",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "secondGlContext",
        "type": "Identifier"
      },
      {
        "value": "secondGlplotObject",
        "type": "Identifier"
      },
      {
        "value": "scatter2d",
        "type": "Identifier"
      },
      {
        "value": "gl",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "secondCanvas",
        "type": "Identifier"
      },
      {
        "value": "secondGlContext",
        "type": "Identifier"
      },
      {
        "value": "canvas",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "Object",
        "type": "Identifier"
      },
      {
        "value": "keys",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_fullLayout",
        "type": "Identifier"
      },
      {
        "value": "_plots",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "1",
        "type": "Numeric"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "secondGlplotObject",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "firstGlplotObject",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "firstGlplotObject",
        "type": "Identifier"
      },
      {
        "value": "gl",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "secondGlContext",
        "type": "Identifier"
      },
      {
        "value": "instanceof",
        "type": "Keyword"
      },
      {
        "value": "WebGLRenderingContext",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "secondGlContext",
        "type": "Identifier"
      },
      {
        "value": "not",
        "type": "Identifier"
      },
      {
        "value": "toBe",
        "type": "Identifier"
      },
      {
        "value": "firstGlContext",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "firstCanvas",
        "type": "Identifier"
      },
      {
        "value": "parentNode",
        "type": "Identifier"
      },
      {
        "value": "null",
        "type": "Keyword"
      },
      {
        "value": "firstCanvas",
        "type": "Identifier"
      },
      {
        "value": "secondCanvas",
        "type": "Identifier"
      },
      {
        "value": "firstGlContext",
        "type": "Identifier"
      },
      {
        "value": "isContextLost",
        "type": "Identifier"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/b2975c90d9e9e388d49c37fbc5e7c255b9cfd6d8/test/jasmine/tests/gl3d_plot_interact_test.js",
    "commit": "b2975c90d9e9e388d49c37fbc5e7c255b9cfd6d8",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl3d_plot_interact_test.js",
    "start_line": 204,
    "end_line": 231,
    "test_code": "it('@gl should display correct hover labels of the second point of the very first scatter3d trace', function (done) {\n    var _mock = Lib.extendDeep({}, multipleScatter3dMock);\n\n    function _hover() {\n        mouseEvent('mouseover', 300, 200);\n    }\n\n    Plotly.plot(gd, _mock)\n        .then(delay(20))\n        .then(function () {\n            gd.on('plotly_hover', function (eventData) {\n                ptData = eventData.points[0];\n            });\n        })\n        .then(delay(20))\n        .then(_hover)\n        .then(delay(20))\n        .then(function () {\n            assertHoverLabelContent(\n                {\n                    nums: ['x: 0', 'y: 0', 'z: 0'].join('\\n'),\n                    name: 'trace 0'\n                }\n            );\n        })\n        .catch(failTest)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@gl should display correct hover labels of the second point of the very first scatter3d trace'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "multipleScatter3dMock",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_hover",
        "type": "Identifier"
      },
      {
        "value": "mouseEvent",
        "type": "Identifier"
      },
      {
        "value": "'mouseover'",
        "type": "String"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "on",
        "type": "Identifier"
      },
      {
        "value": "'plotly_hover'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "eventData",
        "type": "Identifier"
      },
      {
        "value": "ptData",
        "type": "Identifier"
      },
      {
        "value": "eventData",
        "type": "Identifier"
      },
      {
        "value": "points",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "_hover",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertHoverLabelContent",
        "type": "Identifier"
      },
      {
        "value": "nums",
        "type": "Identifier"
      },
      {
        "value": "'x: 0'",
        "type": "String"
      },
      {
        "value": "'y: 0'",
        "type": "String"
      },
      {
        "value": "'z: 0'",
        "type": "String"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "'\\n'",
        "type": "String"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "'trace 0'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/b2975c90d9e9e388d49c37fbc5e7c255b9cfd6d8/test/jasmine/tests/gl3d_plot_interact_test.js",
    "commit": "b2975c90d9e9e388d49c37fbc5e7c255b9cfd6d8",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/gl3d_plot_interact_test.js",
    "start_line": 233,
    "end_line": 255,
    "test_code": "it('@gl should honor *hoverlabel.namelength*', function (done) {\n    var _mock = Lib.extendDeep({}, multipleScatter3dMock);\n\n    function _hover() {\n        mouseEvent('mouseover', 300, 200);\n    }\n\n    Plotly.plot(gd, _mock)\n        .then(delay(20))\n        .then(function () { return Plotly.restyle(gd, 'hoverlabel.namelength', 3); })\n        .then(_hover)\n        .then(delay(20))\n        .then(function () {\n            assertHoverLabelContent(\n                {\n                    nums: ['x: 0', 'y: 0', 'z: 0'].join('\\n'),\n                    name: 'tra'\n                }\n            );\n        })\n        .catch(failTest)\n        .then(done);\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@gl should honor *hoverlabel.namelength*'",
        "type": "String"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "done",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "multipleScatter3dMock",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "_hover",
        "type": "Identifier"
      },
      {
        "value": "mouseEvent",
        "type": "Identifier"
      },
      {
        "value": "'mouseover'",
        "type": "String"
      },
      {
        "value": "300",
        "type": "Numeric"
      },
      {
        "value": "200",
        "type": "Numeric"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "plot",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "_mock",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "return",
        "type": "Keyword"
      },
      {
        "value": "Plotly",
        "type": "Identifier"
      },
      {
        "value": "restyle",
        "type": "Identifier"
      },
      {
        "value": "gd",
        "type": "Identifier"
      },
      {
        "value": "'hoverlabel.namelength'",
        "type": "String"
      },
      {
        "value": "3",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "_hover",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "delay",
        "type": "Identifier"
      },
      {
        "value": "20",
        "type": "Numeric"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "assertHoverLabelContent",
        "type": "Identifier"
      },
      {
        "value": "nums",
        "type": "Identifier"
      },
      {
        "value": "'x: 0'",
        "type": "String"
      },
      {
        "value": "'y: 0'",
        "type": "String"
      },
      {
        "value": "'z: 0'",
        "type": "String"
      },
      {
        "value": "join",
        "type": "Identifier"
      },
      {
        "value": "'\\n'",
        "type": "String"
      },
      {
        "value": "name",
        "type": "Identifier"
      },
      {
        "value": "'tra'",
        "type": "String"
      },
      {
        "value": "catch",
        "type": "Keyword"
      },
      {
        "value": "failTest",
        "type": "Identifier"
      },
      {
        "value": "then",
        "type": "Identifier"
      },
      {
        "value": "done",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  },
  {
    "URL": "https://github.com/plotly/plotly.js/blob/5160948d6813b5de162fb6a68af44bd7be1bec9b/test/jasmine/tests/histogram2d_test.js",
    "commit": "5160948d6813b5de162fb6a68af44bd7be1bec9b",
    "project_name": "plotly.js",
    "project_author": "plotly",
    "flaky_file": "/test/jasmine/tests/histogram2d_test.js",
    "start_line": 175,
    "end_line": 203,
    "test_code": "it('@flaky should sort z data based on axis categoryorder for ' + traceType, function () {\n    var mock = require('@mocks/heatmap_categoryorder');\n    var mockCopy = Lib.extendDeep({}, mock);\n    var data = mockCopy.data[0];\n    data.type = traceType;\n    var layout = mockCopy.layout;\n\n    // sort x axis categories\n    var mockLayout = Lib.extendDeep({}, layout);\n    var out = _calc(data, mockLayout);\n    mockLayout.xaxis.categoryorder = 'category ascending';\n    var out1 = _calc(data, mockLayout);\n\n    expect(out._xcategories).toEqual(out1._xcategories.slice().reverse());\n    // Check z data is also sorted\n    for (var i = 0; i < out.z.length; i++) {\n        expect(out1.z[i]).toEqual(out.z[i].slice().reverse());\n    }\n\n    // sort y axis categories\n    mockLayout = Lib.extendDeep({}, layout);\n    out = _calc(data, mockLayout);\n    mockLayout.yaxis.categoryorder = 'category ascending';\n    out1 = _calc(data, mockLayout);\n\n    expect(out._ycategories).toEqual(out1._ycategories.slice().reverse());\n    // Check z data is also sorted\n    expect(out1.z).toEqual(out.z.slice().reverse());\n});\n",
    "tokens": [
      {
        "value": "it",
        "type": "Identifier"
      },
      {
        "value": "'@flaky should sort z data based on axis categoryorder for '",
        "type": "String"
      },
      {
        "value": "traceType",
        "type": "Identifier"
      },
      {
        "value": "function",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "require",
        "type": "Identifier"
      },
      {
        "value": "'@mocks/heatmap_categoryorder'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "mock",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "type",
        "type": "Identifier"
      },
      {
        "value": "traceType",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "mockCopy",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "mockLayout",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "out",
        "type": "Identifier"
      },
      {
        "value": "_calc",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "mockLayout",
        "type": "Identifier"
      },
      {
        "value": "mockLayout",
        "type": "Identifier"
      },
      {
        "value": "xaxis",
        "type": "Identifier"
      },
      {
        "value": "categoryorder",
        "type": "Identifier"
      },
      {
        "value": "'category ascending'",
        "type": "String"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "out1",
        "type": "Identifier"
      },
      {
        "value": "_calc",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "mockLayout",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "out",
        "type": "Identifier"
      },
      {
        "value": "_xcategories",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "out1",
        "type": "Identifier"
      },
      {
        "value": "_xcategories",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "reverse",
        "type": "Identifier"
      },
      {
        "value": "for",
        "type": "Keyword"
      },
      {
        "value": "var",
        "type": "Keyword"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "0",
        "type": "Numeric"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "out",
        "type": "Identifier"
      },
      {
        "value": "z",
        "type": "Identifier"
      },
      {
        "value": "length",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "out1",
        "type": "Identifier"
      },
      {
        "value": "z",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "out",
        "type": "Identifier"
      },
      {
        "value": "z",
        "type": "Identifier"
      },
      {
        "value": "i",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "reverse",
        "type": "Identifier"
      },
      {
        "value": "mockLayout",
        "type": "Identifier"
      },
      {
        "value": "Lib",
        "type": "Identifier"
      },
      {
        "value": "extendDeep",
        "type": "Identifier"
      },
      {
        "value": "layout",
        "type": "Identifier"
      },
      {
        "value": "out",
        "type": "Identifier"
      },
      {
        "value": "_calc",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "mockLayout",
        "type": "Identifier"
      },
      {
        "value": "mockLayout",
        "type": "Identifier"
      },
      {
        "value": "yaxis",
        "type": "Identifier"
      },
      {
        "value": "categoryorder",
        "type": "Identifier"
      },
      {
        "value": "'category ascending'",
        "type": "String"
      },
      {
        "value": "out1",
        "type": "Identifier"
      },
      {
        "value": "_calc",
        "type": "Identifier"
      },
      {
        "value": "data",
        "type": "Identifier"
      },
      {
        "value": "mockLayout",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "out",
        "type": "Identifier"
      },
      {
        "value": "_ycategories",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "out1",
        "type": "Identifier"
      },
      {
        "value": "_ycategories",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "reverse",
        "type": "Identifier"
      },
      {
        "value": "expect",
        "type": "Identifier"
      },
      {
        "value": "out1",
        "type": "Identifier"
      },
      {
        "value": "z",
        "type": "Identifier"
      },
      {
        "value": "toEqual",
        "type": "Identifier"
      },
      {
        "value": "out",
        "type": "Identifier"
      },
      {
        "value": "z",
        "type": "Identifier"
      },
      {
        "value": "slice",
        "type": "Identifier"
      },
      {
        "value": "reverse",
        "type": "Identifier"
      }
    ],
    "is_flaky": true
  }
]